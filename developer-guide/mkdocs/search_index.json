{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction\n\n\nHello World! \n\n\nWe\u2019re JW Player. We strive to enable developers and designers (like you!) to build, customize, and deliver the best video experiences for viewers across web, mobile, and OTT devices. \n\n\nPurpose\n\n\nOur goal is to provide you with documentation on more advanced uses of JW Player. Here you will find a consolidated reference of API calls and design resources to accelerate your development process with our player.\n\n\nIntended Audience\n\n\nThis site specifically caters to developers and designers who are using JW Player in their projects. For basic configuration settings or assistance embedding a player, please see our \nsupport site\n. If you are visiting the developer site, a basic level of Javascript is required to use our API and a knowledge of CSS is necessary in order to customize our skinning model.\n\n\nLicenses\n\n\nCertain features of JW Player may require specific license types. For example, DRM and Advertising require an Enterprise license. A more extensive explanation of license types, and their features, can be be found on our \npricing page\n.\n\n\nStructure\n\n\nOur developer guide offers sections dedicated to developing with JW Player. Namely, we offer sections like:\n\n\n\n\nJavascript API\n\n\nCustomization\n\n\nDesign Resources\n\n\nRelease Notes\n\n\n\n\nWithin each of these sections, you'll find starter guides, documentation, code samples, links to demos, and additional resources.\n\n\nContact\n\n\nIf you\u2019re unable to find the resources you need on our developer site:\n\n\n\n\nWe regularly monitor \nStackOverflow\n for questions.\n\n\nWe welcome contributions to our open source Player code on \nGitHub\n.\n\n\nStay connected on Twitter \n@JWDevelopers\n.\n\n\nWe\u2019re available to discuss feedback (or new cat videos!) at \ndevrelations@jwplayer.com\n.\n\n\nLicense upgrades are handled at our \ncontact us\n page.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#introduction", 
            "text": "Hello World!   We\u2019re JW Player. We strive to enable developers and designers (like you!) to build, customize, and deliver the best video experiences for viewers across web, mobile, and OTT devices.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#purpose", 
            "text": "Our goal is to provide you with documentation on more advanced uses of JW Player. Here you will find a consolidated reference of API calls and design resources to accelerate your development process with our player.", 
            "title": "Purpose"
        }, 
        {
            "location": "/#intended-audience", 
            "text": "This site specifically caters to developers and designers who are using JW Player in their projects. For basic configuration settings or assistance embedding a player, please see our  support site . If you are visiting the developer site, a basic level of Javascript is required to use our API and a knowledge of CSS is necessary in order to customize our skinning model.", 
            "title": "Intended Audience"
        }, 
        {
            "location": "/#licenses", 
            "text": "Certain features of JW Player may require specific license types. For example, DRM and Advertising require an Enterprise license. A more extensive explanation of license types, and their features, can be be found on our  pricing page .", 
            "title": "Licenses"
        }, 
        {
            "location": "/#structure", 
            "text": "Our developer guide offers sections dedicated to developing with JW Player. Namely, we offer sections like:   Javascript API  Customization  Design Resources  Release Notes   Within each of these sections, you'll find starter guides, documentation, code samples, links to demos, and additional resources.", 
            "title": "Structure"
        }, 
        {
            "location": "/#contact", 
            "text": "If you\u2019re unable to find the resources you need on our developer site:   We regularly monitor  StackOverflow  for questions.  We welcome contributions to our open source Player code on  GitHub .  Stay connected on Twitter  @JWDevelopers .  We\u2019re available to discuss feedback (or new cat videos!) at  devrelations@jwplayer.com .  License upgrades are handled at our  contact us  page.", 
            "title": "Contact"
        }, 
        {
            "location": "/api/javascript_api_introduction/", 
            "text": "Introduction to the Javascript API\n\n\nThis article explains the basics of how to use the \nJavaScript API\n component of JW Player. This API can be used to enhance the functionality of your video embeds, or to implement rich page-level video interactions. Unless noted, there are no differences between HTML5 and Flash API calls, so the code you write will work across multiple technologies.\n\n\nNote: We strongly suggest that all API calls be made after the player is considered ready.\n\n\n\n\nGetting Information with the JW Player API\n\n\nCertain API calls utilize a \"get\" prefix, which signifies that their express purpose is to return certain information. This may be in the form of an object, an array, a string, or a number. Each API call will have the expected output format listed in the full \nJavaScript API Reference\n.\n\n\n\"Get\" API calls can return information like:\n\n\n\n\nAn array of playlist items with \njwplayer().getPlaylist()\n\n\nThe duration of a video with \njwplayer().getDuration()\n\n\nThe current playback state of the video player with \njwplayer().getState()\n\n\nThe current pixel dimensions of a JW Player with \njwplayer().getHeight()\n and \njwplayer().getWidth()\n\n\n\n\n\n\nControlling and setting with the JW Player API\n\n\nThese types of API calls are used to control player behavior. Many of these calls expect a value to be passed along with it. For example, setVolume() expects a number from 1-100 to be included.\n\n\nAPI calls can tell the player to do things like:\n\n\n\n\nPause playback with \njwplayer().pause(true)\n\n\nSet volume to 50% with \njwplayer().setVolume(50)\n\n\nSeek to 2 minutes into a video with \njwplayer().seek(120)\n\n\n\n\n\n\nEvent listening with the JW Player API\n\n\nCertain events are triggered when the player \ndoes\n something. JW Player 8 bases its event structure on \nbackbone.events\n. This allows a player instance to be used as an event router and gives developers better options and control. Certain events also return information. We list this expected information in the full \nJavaScript API Reference\n document.\n\n\nCurrently, JW Player events support the following event triggers:\n\n\n\n\n\n\n\n\nListener\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\non(\n'event'\n)\n\n\nUsing an \non\n listener will continually listen for an event for a specified player. If this player is removed and set up again, the listener will also need to be reinstated.\n\n\njwplayer().on(event, [callback], [context])\n\n\n\n\n\n\noff(\n'event'\n)\n\n\nSignifies to stop listening for a particular event\n\n\njwplayer().off(event, [callback], [context])\n\n\n\n\n\n\nonce(\n'event'\n)\n\n\nBehaves similarly to on, however will only trigger for a single event, until it is set up again.\n\n\njwplayer().once(event, [callback], [context])\n\n\n\n\n\n\ntrigger(\n'event'\n)\n\n\nCapable of firing events to a listener. This replaces dispatchEvent from JW6.\n\n\njwplayer().trigger(event, [*args])\n\n\n\n\n\n\n\n\nThe below event triggers every time a volume change is initiated, and will return a number called \"volume\" within an object.\n\n\njwplayer().on('volume', function(e) {\nalert(\nVolume is changed to: \n+ e.volume);\n});\n\n\n\n\n\n\nExample: Using the JW Player API\n\n\nBefore it is possible to interact with a player, a player setup is required. Our \nEmbedding Article\n contains several examples. Here is the proper syntax for a basic player embed:\n\n\ndiv id='myElement'\nLoading the player...\n/div\n\n\nscript type='text/javascript'\n\n  jwplayer(\nmyElement\n).setup({\n    \nfile\n: \n/uploads/example.mp4\n,\n    \nimage\n: \n/uploads/example.jpg\n\n  });\n\n/script\n\n\n\n\n\nOnce the player completes its setup, API calls can immediately be made. If you have one player on your page, it can always be accessed using the \nplayerInstance\n reference function. For example:\n\n\nscript\n\njwplayer(\nmyElement\n).on('complete', function(){\nalert(\nComplete fired - Your content has completed!\n);\n});\n\n/script\n\n\n\na href=\njavascript:jwplayer('myElement').play();\nToggle playback\n/a\n\n\na href=\njavascript:alert('The volume of the player is: ' + jwplayer('myElement').getVolume());\nReport volume\n/a\n\n\n\n\n\n\n\n\n\n\n\n\n\nTargeting Multiple Players\n\n\nWhen you have multiple players on a page, you must be specific about which player you want to interact with. Let's assume that we have embedded two different players on the same page:\n\n\ndiv id='myFirstPlayer'\nLoading the first player...\n/div\n\n\ndiv id='mySecondPlayer'\nLoading the player...\n/div\n\n\n\nscript type='text/javascript'\n\n\njwplayer(\nmyFirstPlayer\n).setup({\n\nfile\n: \n/uploads/example.mp4\n,\n\nimage\n: \n/uploads/example.jpg\n\n});\n\njwplayer(\nmySecondPlayer\n).setup({\n\nfile\n: \n/uploads/example2.mp4\n,\n\nimage\n: \n/uploads/example2.jpg\n\n});\n\n\n/script\n\n\n\n\n\nThere are two ways that we can target a player:\n\n\n1 - Include the id of the player div:\n\n\n// ID references the first player\njwplayer(\nmyFirstPlayer\n).play();\n\n\n\n\n2 - Include the index of player you wish to target\n\n\n// An index of 1 targets the second player on the page\njwplayer(1).play();\n\n\n\n\n!!!\nNot including an ID or index with your API call will always target the first player on a page.\n!!!\n\n\n\n\nRequire.js and JW Player\n\n\nJW Player is not currently supported within require js due to JW Player needing to use jwplayer namespace. To avoid issues when require and jwplayer.js are on the same page, load jwplayer.js before the require.js script is loaded.\n\n\nExample:\n\n\nscript src='jwplayer.js'\n\n\nscript src='requirejs.js'\n\n\n\n\n\n\n\nCheat Sheet Reference\n\n\nThe table below act as a cheat sheet of all API calls. The separate \nJavaScript API Reference\n guide contains an listing of all parameters for all API calls. Click on the name of a class in the table to jump to the corresponding section in the API Reference. Also, for the sake of simplicity, we are only referencing \non\n events here. As mentioned above, these can also utilize \noff\n, \nonce\n, and \ntrigger\n.\n\n\n\n\n\n\n\n\nClass\n\n\nGetters\n\n\nSetters\n\n\nEvents\n\n\n\n\n\n\n\n\n\n\nSetup\n\n\ngetRenderingMode()\n\n\nsetup()\nremove()\n\n\non('ready')\non('setupError')\n\n\n\n\n\n\nPlaylist\n\n\ngetPlaylist()\ngetPlaylistIndex()\ngetPlaylistItem()\n\n\nload()\nplaylistItem()\n\n\non('playlist')\non('playlistItem')\non('playlistComplete')\n\n\n\n\n\n\nBuffer\n\n\ngetBuffer()\n\n\n-\n\n\non('bufferChange')\n\n\n\n\n\n\nPlayback\n\n\ngetState()\n\n\nplay()\npause()\nstop()\n\n\non('play')\non('pause')\non('buffer')\non('idle')\non('complete')\non('error')\n\n\n\n\n\n\nSeek\n\n\ngetPosition()\ngetDuration()\n\n\nseek()\n\n\non('seek')\non('seeked')\non('time')\n\n\n\n\n\n\nVolume\n\n\ngetMute()\ngetVolume()\n\n\nsetMute()\nsetVolume()\n\n\non('mute')\non('volume')\n\n\n\n\n\n\nResize\n\n\ngetWidth()\ngetHeight()\ngetFullscreen()\n\n\nresize()\n\n\non('fullscreen')\non('resize')\n\n\n\n\n\n\nQuality\n\n\ngetQualityLevels()\ngetCurrentQuality()\n\n\nsetCurrentQuality()\n\n\non('levels')\non('levelsChanged')\n\n\n\n\n\n\nCaptions\n\n\ngetCaptionsList()\ngetCurrentCaptions()\n\n\nsetCurrentCaptions()\n\n\non('captionsList')\non('captionsChange')\n\n\n\n\n\n\nControls\n\n\ngetControls()\ngetSafeRegion()\n\n\naddButton()\nremoveButton()\nsetControls()\n\n\non('controls')\non('displayClick')\n\n\n\n\n\n\nAdvertising\n\n\n-\n\n\nplayAd()\n\n\non('adClick')\non('adCompanions')\non('adComplete')\non('adError')\non('adImpression')\non('adTime')\non('adSkipped')\non('beforePlay')\non('beforeComplete')\n\n\n\n\n\n\nMetadata\n\n\n-\n\n\n-\n\n\non('meta')\n\n\n\n\n\n\nSharing\n\n\n-\n\n\ngetPlugin('sharing').open()\ngetPlugin('sharing').close()\n\n\ngetPlugin('sharing').on('open')\ngetPlugin('sharing').on('close')\ngetPlugin('sharing').on('click')\n\n\n\n\n\n\nRelated\n\n\n-\n\n\ngetPlugin('related').open()\ngetPlugin('related').close()\n\n\ngetPlugin('related').on('open')\ngetPlugin('related').on('close')\ngetPlugin('related').on('play')", 
            "title": "Intro to Javascript API"
        }, 
        {
            "location": "/api/javascript_api_introduction/#introduction-to-the-javascript-api", 
            "text": "This article explains the basics of how to use the  JavaScript API  component of JW Player. This API can be used to enhance the functionality of your video embeds, or to implement rich page-level video interactions. Unless noted, there are no differences between HTML5 and Flash API calls, so the code you write will work across multiple technologies.", 
            "title": "Introduction to the Javascript API"
        }, 
        {
            "location": "/api/javascript_api_introduction/#note-we-strongly-suggest-that-all-api-calls-be-made-after-the-player-is-considered-ready", 
            "text": "", 
            "title": "Note: We strongly suggest that all API calls be made after the player is considered ready."
        }, 
        {
            "location": "/api/javascript_api_introduction/#getting-information-with-the-jw-player-api", 
            "text": "Certain API calls utilize a \"get\" prefix, which signifies that their express purpose is to return certain information. This may be in the form of an object, an array, a string, or a number. Each API call will have the expected output format listed in the full  JavaScript API Reference .", 
            "title": "Getting Information with the JW Player API"
        }, 
        {
            "location": "/api/javascript_api_introduction/#get-api-calls-can-return-information-like", 
            "text": "An array of playlist items with  jwplayer().getPlaylist()  The duration of a video with  jwplayer().getDuration()  The current playback state of the video player with  jwplayer().getState()  The current pixel dimensions of a JW Player with  jwplayer().getHeight()  and  jwplayer().getWidth()", 
            "title": "\"Get\" API calls can return information like:"
        }, 
        {
            "location": "/api/javascript_api_introduction/#controlling-and-setting-with-the-jw-player-api", 
            "text": "These types of API calls are used to control player behavior. Many of these calls expect a value to be passed along with it. For example, setVolume() expects a number from 1-100 to be included.", 
            "title": "Controlling and setting with the JW Player API"
        }, 
        {
            "location": "/api/javascript_api_introduction/#api-calls-can-tell-the-player-to-do-things-like", 
            "text": "Pause playback with  jwplayer().pause(true)  Set volume to 50% with  jwplayer().setVolume(50)  Seek to 2 minutes into a video with  jwplayer().seek(120)", 
            "title": "API calls can tell the player to do things like:"
        }, 
        {
            "location": "/api/javascript_api_introduction/#event-listening-with-the-jw-player-api", 
            "text": "Certain events are triggered when the player  does  something. JW Player 8 bases its event structure on  backbone.events . This allows a player instance to be used as an event router and gives developers better options and control. Certain events also return information. We list this expected information in the full  JavaScript API Reference  document.  Currently, JW Player events support the following event triggers:     Listener  Description  Example      on( 'event' )  Using an  on  listener will continually listen for an event for a specified player. If this player is removed and set up again, the listener will also need to be reinstated.  jwplayer().on(event, [callback], [context])    off( 'event' )  Signifies to stop listening for a particular event  jwplayer().off(event, [callback], [context])    once( 'event' )  Behaves similarly to on, however will only trigger for a single event, until it is set up again.  jwplayer().once(event, [callback], [context])    trigger( 'event' )  Capable of firing events to a listener. This replaces dispatchEvent from JW6.  jwplayer().trigger(event, [*args])     The below event triggers every time a volume change is initiated, and will return a number called \"volume\" within an object.  jwplayer().on('volume', function(e) {\nalert( Volume is changed to:  + e.volume);\n});", 
            "title": "Event listening with the JW Player API"
        }, 
        {
            "location": "/api/javascript_api_introduction/#example-using-the-jw-player-api", 
            "text": "Before it is possible to interact with a player, a player setup is required. Our  Embedding Article  contains several examples. Here is the proper syntax for a basic player embed:  div id='myElement' Loading the player... /div  script type='text/javascript' \n  jwplayer( myElement ).setup({\n     file :  /uploads/example.mp4 ,\n     image :  /uploads/example.jpg \n  }); /script   Once the player completes its setup, API calls can immediately be made. If you have one player on your page, it can always be accessed using the  playerInstance  reference function. For example:  script \njwplayer( myElement ).on('complete', function(){\nalert( Complete fired - Your content has completed! );\n}); /script  a href= javascript:jwplayer('myElement').play(); Toggle playback /a  a href= javascript:alert('The volume of the player is: ' + jwplayer('myElement').getVolume()); Report volume /a", 
            "title": "Example: Using the JW Player API"
        }, 
        {
            "location": "/api/javascript_api_introduction/#targeting-multiple-players", 
            "text": "When you have multiple players on a page, you must be specific about which player you want to interact with. Let's assume that we have embedded two different players on the same page:  div id='myFirstPlayer' Loading the first player... /div  div id='mySecondPlayer' Loading the player... /div  script type='text/javascript' \n\njwplayer( myFirstPlayer ).setup({ file :  /uploads/example.mp4 , image :  /uploads/example.jpg \n});\n\njwplayer( mySecondPlayer ).setup({ file :  /uploads/example2.mp4 , image :  /uploads/example2.jpg \n}); /script   There are two ways that we can target a player:", 
            "title": "Targeting Multiple Players"
        }, 
        {
            "location": "/api/javascript_api_introduction/#1-include-the-id-of-the-player-div", 
            "text": "// ID references the first player\njwplayer( myFirstPlayer ).play();", 
            "title": "1 - Include the id of the player div:"
        }, 
        {
            "location": "/api/javascript_api_introduction/#2-include-the-index-of-player-you-wish-to-target", 
            "text": "// An index of 1 targets the second player on the page\njwplayer(1).play();  !!!\nNot including an ID or index with your API call will always target the first player on a page.\n!!!", 
            "title": "2 - Include the index of player you wish to target"
        }, 
        {
            "location": "/api/javascript_api_introduction/#requirejs-and-jw-player", 
            "text": "JW Player is not currently supported within require js due to JW Player needing to use jwplayer namespace. To avoid issues when require and jwplayer.js are on the same page, load jwplayer.js before the require.js script is loaded.  Example:  script src='jwplayer.js'  script src='requirejs.js'", 
            "title": "Require.js and JW Player"
        }, 
        {
            "location": "/api/javascript_api_introduction/#cheat-sheet-reference", 
            "text": "The table below act as a cheat sheet of all API calls. The separate  JavaScript API Reference  guide contains an listing of all parameters for all API calls. Click on the name of a class in the table to jump to the corresponding section in the API Reference. Also, for the sake of simplicity, we are only referencing  on  events here. As mentioned above, these can also utilize  off ,  once , and  trigger .     Class  Getters  Setters  Events      Setup  getRenderingMode()  setup() remove()  on('ready') on('setupError')    Playlist  getPlaylist() getPlaylistIndex() getPlaylistItem()  load() playlistItem()  on('playlist') on('playlistItem') on('playlistComplete')    Buffer  getBuffer()  -  on('bufferChange')    Playback  getState()  play() pause() stop()  on('play') on('pause') on('buffer') on('idle') on('complete') on('error')    Seek  getPosition() getDuration()  seek()  on('seek') on('seeked') on('time')    Volume  getMute() getVolume()  setMute() setVolume()  on('mute') on('volume')    Resize  getWidth() getHeight() getFullscreen()  resize()  on('fullscreen') on('resize')    Quality  getQualityLevels() getCurrentQuality()  setCurrentQuality()  on('levels') on('levelsChanged')    Captions  getCaptionsList() getCurrentCaptions()  setCurrentCaptions()  on('captionsList') on('captionsChange')    Controls  getControls() getSafeRegion()  addButton() removeButton() setControls()  on('controls') on('displayClick')    Advertising  -  playAd()  on('adClick') on('adCompanions') on('adComplete') on('adError') on('adImpression') on('adTime') on('adSkipped') on('beforePlay') on('beforeComplete')    Metadata  -  -  on('meta')    Sharing  -  getPlugin('sharing').open() getPlugin('sharing').close()  getPlugin('sharing').on('open') getPlugin('sharing').on('close') getPlugin('sharing').on('click')    Related  -  getPlugin('related').open() getPlugin('related').close()  getPlugin('related').on('open') getPlugin('related').on('close') getPlugin('related').on('play')", 
            "title": "Cheat Sheet Reference"
        }, 
        {
            "location": "/customization/configuration-reference/", 
            "text": "!!!\nThis page has been updated for JW Player 8. Click here to go to the \nJW7 Configuration Reference\n.\n!!!\n\n\nJW Player Configuration Reference\n\n\nThis article acts a reference to all configuration options JW Player supports. Configuration options tell a player instance which media to play and how to layout and behave on your page.\n\n\n!!!important\nCertain JW Player features may require a specific license. Please \ncontact our team\n to upgrade your account.\n!!!\n\n\n\n\n\n\n\n\nTable Of Contents\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSetup Options\n\n\nThe Playlist\n\n\nSkin\n\n\n\n\n\n\nCaptions\n\n\nRTMP\n\n\nLogo\n\n\n\n\n\n\nSharing\n\n\nGoogle Analytics\n\n\nRelated\n\n\n\n\n\n\nAdvertising\n\n\nDRM\n\n\nLocalization\n\n\n\n\n\n\n\n\nIntroduction\n\n\nJW Player contains a large number of features and options that can be configured inside of the player setup.  Some options, like \nwidth\n or \nmute\n, are directly placed into the setup. Other, more advanced options, are grouped into nested blocks, like \nskin\n or \nadvertising\n.\n\n\nHere is an example setup that contains both \nsetup\n options and specific \nadvertising\n options:\n\n\njwplayer(\nmyElement\n).setup({\n  \nfile\n: \nhttps://example.com/myVideo.mp4\n,\n  \nheight\n: 360,\n  \nwidth\n: 640,\n  \nautostart\n: \nviewable\n,\n  \nadvertising\n: {\n        \nclient\n: \nvast\n,\n        \ntag\n: \nhttp://adserver.com/vastTag.xml\n\n    }\n});\n\n\n\n\nWeb developers will recognize the JavaScript Object Notation (\nJSON\n) syntax of these setup blocks. While configuring player setups, beware of common JSON requirements, like the need for a comma after all but the last element in a list.\n\n\n\n\n\n\nSetup Options\n\n\nThese are the options for configuring the layout and playback behavior of a player. Each is placed directly into the \nsetup\n of the player.\n\n\nThe following properties are related to media that is loaded into the player.\n\n\nIf only a single playlist item is used, this information can either be configured directly inside of \nsetup\n. If you are planning on using multiple media items, these can also be used inside of a \nplaylist\n array.\n\n\n\n\nMedia\n\n\n\n\n\n\n\n\nSetting\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nfile\n\n\nString\n\n\n(Required)\n URL to a single video file, audio file, or live stream to play. Can also be configured inside of a \nsources\n array\n\n\n-\n\n\n\n\n\n\nimage\n\n\nString\n\n\nURL to a poster image to display before playback starts.\n\n\n-\n\n\n\n\n\n\ntitle\n\n\nString\n\n\nThe title of your video or audio item\n\n\n-\n\n\n\n\n\n\ndescription\n\n\nString\n\n\nA description of your video or audio item\n\n\n-\n\n\n\n\n\n\nmediaid\n\n\nString\n\n\nUnique identifier of this item. Used by advertising, analytics and discovery services\n\n\n-\n\n\n\n\n\n\n\n\n!!!\nYouTube and RTMP media formats are no longer supported.\n8.0+\n\n!!!\n\n\n\n\nBehavior\n\n\n\n\n\n\n\n\nSetting\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nmute\n\n\nBoolean\n\n\nConfigures if the player should be muted during playback\n\n\nfalse\n\n\n\n\n\n\nautostart\n\n\nString\n\n\nWhether the player will attempt to begin playback automatically when a page is loaded. Set to 'viewable' to have player autostart if 50% is viewable.\n\n\nfalse\n\n\n\n\n\n\nnextupoffset\n\n\nNumber\n\n\nConfigures when the Next Up card displays when transitioning between playlist items. A positive value is an offset from the start of the video. A negative number is an offset from the end of the video\n\n\n-10\n\n\n\n\n\n\nrepeat\n\n\nBoolean\n\n\nConfigures if the player should loop content after a playlist completes\n\n\nfalse\n\n\n\n\n\n\nabouttext\n\n\nString\n\n\nCustom text to display in the right-click menu\n\n\n-\n\n\n\n\n\n\naboutlink\n\n\nString\n\n\nCustom URL to link to when clicking the right-click menu\n\n\n\"https://www.jwplayer.com/learn-more\"\n\n\n\n\n\n\nplaybackRateControls\n\n\nBoolean\n\n\nWhether to display a settings menu to adjust playback speed. If true, the pre-defined options available in the menu are 0.5x, 1x, 1.25x, 1.5x, and 2x. An array can be passed to customize the menu options using \nplaybackRates\n. \nNote:\n This feature is not currently supported in Android with HLS streams.\n\n\nfalse\n\n\n\n\n\n\nplaybackRates\n \n8.0+\n\n\nArray of Numbers\n\n\n(Optional) Custom playback rate options to display in the settings menu.\n\n\n[0.25, 0.75, 1, 1.25]\n\n\n\n\n\n\n\n\n\n\nAppearance\n\n\n\n\n\n\n\n\nSetting\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncontrols\n\n\nBoolean\n\n\nWhether to display the video controls (control bar and display icons)\n\n\ntrue\n\n\n\n\n\n\nlocalization\n\n\nObject\n\n\nChanges text for the player in certain locations\n\n\n-\n\n\n\n\n\n\naspectratio\n\n\nString\n\n\nMaintains proportions when width is a percentage. Will not be used if the player is a static size. \n \nMust be entered in ratio \"x:y\" format.\n\n\n-\n\n\n\n\n\n\nheight\n\n\nNumber\n\n\nThe desired height of your video player (In pixels). Can be omitted when aspectratio is configured\n\n\n360\n\n\n\n\n\n\nwidth\n\n\nNumber or String\n\n\nThe desired height of your video player (In pixels or percentage)\n\n\n640\n\n\n\n\n\n\ndisplaytitle\n\n\nBoolean\n\n\nConfigures if the title of a media file should be displayed\n\n\ntrue\n\n\n\n\n\n\ndisplaydescription\n\n\nBoolean\n\n\nConfigures if the description title of a media file should be displayed\n\n\ntrue\n\n\n\n\n\n\nstretching\n\n\nString\n\n\nResize images and video to fit player dimensions. See graphic below for examples \n \n\"uniform\"\n \u2014 Fits JW Player dimensions while maintaining aspect ratio \n \n\"exactfit\":\n Will fit JW Player dimensions without maintaining aspect ratio \n\"fill\"\n\u2014 Will zoom and crop video\u00a0to fill dimensions,\u00a0maintaining aspect ratio \n \n\"none\"\n \u2014 Displays the actual size of the video file. (Black borders)\n\n\n\"uniform\"\n\n\n\n\n\n\nnextUpDisplay\n\n\nBoolean\n\n\nConfigures whether the Next Up modal is displayed\n\n\n-\n\n\n\n\n\n\nqualityLabels\n\n\nArray\n\n\nBy default, the JW Player will set video quality levels using information from the manifest files. Use this configuration option to apply a custom quality label to a desired bandwidth in kbps, works for HLS and DASH. For example: \"qualityLabels\":{\"2500\":\"High\",\"1000\":\"Medium\"}\n\n\n-\n\n\n\n\n\n\n\n\n!!!\n\ntimeSliderAbove\n, which configures whether the timeslider dynamically appears above the control bar, has been deprecated. \n8.0+\n\n!!!\n\n\nStretching Examples\n\n\n\n\n\n\nRendering and Loading\n\n\n\n\n\n\n\n\nSetting\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nbase\n\n\nString\n\n\nConfigures an alternate base path for skins and providers\n\n\n\"/\"\n\n\n\n\n\n\npreload\n\n\nString\n\n\nTells the player if content should be loaded prior to playback. Useful for faster playback speed or if certain metadata should be loaded prior to playback: \n\"none\"\n \u2014 Player will explicitly \nnot\n preload content. \n(Recommended if you are concerned about excess content usage.)\n\"metadata\"\n \u2014 Loads the manifest and buffers a maximum of one segment of media for HLS and Dash streams.\n \n\"auto\"\n \u2014 Loads the manifest and buffers approximately 30 seconds worth of media segments.\n\n\n\"metadata\"\n\n\n\n\n\n\nflashplayer\n\n\nString\n\n\nSpecifies an alternate directory of \njwplayer.flash.swf\n\n\n\"/\"\n\n\n\n\n\n\n\n\n!!!\n\nprimary\n, which set the default player rendering mode, has been deprecated.\n8.0+\n Flash is no longer supported in JW Player except to play HLS streams in IE11 on Windows 7.\n\n\n\n\nThe default \npreload\n configuration has been updated to \"metadata\", and the \nmetadata\n and \nauto\n settings have been redefined.\n8.0+\n\n!!!\n\n\n\n\n\n\nPlaylist\n\n\nThe playlist is a powerful feature of JW Player, used to play multiple video or audio files.\n\n\nA playlist can be either a \nstring\n, referring to the URL of an RSS feed or JSON file, or an \narray\n of media objects.\n\n\nConfiguring Playlist as a String\n\n\njwplayer(\nmyElement\n).setup({\n  \nplaylist\n: \nhttp://example.com/myPlaylist.json\n\n});\n\n\n\n\n\n\nConfiguring Playlist as an Array\n\n\njwplayer(\nmyElement\n).setup({\n    \nplaylist\n: [{\n        \nfile\n: \n/assets/sintel.mp4\n,\n        \nimage\n: \n/assets/sintel.jpg\n,\n        \ntitle\n: \nSintel Trailer\n,\n        \nmediaid\n: \nddra573\n\n    },{\n        \nfile\n: \n/assets/bigbuckbunny.mp4\n,\n        \nimage\n: \n/assets/bigbuckbunny.jpg\n,\n        \ntitle\n: \nBig Buck Bunny Trailer\n,\n        \nmediaid\n: \nddrx3v2\n\n    }]\n});\n\n\n\n\n\n\n\n\n\n\nSetting\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nplaylist[\nindex\n].file\n\n\nString\n\n\n(Required)\n If no file is specified in your setup or sources, this is a required configuration option\n\n\n\n\n\n\nplaylist[\nindex\n].withCredentials\n\n\nBoolean\n\n\nIf true, \"withCredentials\" will be used to request a media file rather than CORS\n\n\n\n\n\n\nplaylist[\nindex\n].title\n\n\nString\n\n\nTitle of the item. This is displayed inside of the player prior to playback, as well as in the visual playlist. This can be hidden with the displaytitle option\n\n\n\n\n\n\nplaylist[\nindex\n].description\n\n\nString\n\n\nShort description of the item. It is displayed below the title. This can be hidden with the displaydescription option.\n\n\n\n\n\n\nplaylist[\nindex\n].image\n\n\nString\n\n\nPoster image URL. Displayed before and after playback.\n\n\n\n\n\n\nplaylist[\nindex\n].mediaid\n\n\nString\n\n\nUnique identifier of this item. Used by advertising, analytics and discovery services\n\n\n\n\n\n\nplaylist[\nindex\n].recommendations\n\n\nString\n\n\nURL to a feed that contains related items for a particular playlist item\n\n\n\n\n\n\nplaylist[\nindex\n].minDvrWindow\n\n\nNumber\n\n\nHLS-only\n In seconds, the minimum amount of content in an M3U8 required to trigger DVR mode. Set to 0 to always display DVR mode.(Defaults to \n120\n)\n\n\n\n\n\n\nplaylist[index].stereomode\n\n\nString\n\n\nUsed for playback of a spherical 360 Video. \"Monoscopic\" is the value supported at this time.\n\n\n\n\n\n\nplaylist\nindex\n.sources\n\n\nArray\n\n\nUsed for quality toggling and alternate sources\n\n\n\n\n\n\nplaylist\nindex\n.tracks\n\n\nArray\n\n\nInclude \ncaptions\n, \nchapters\n, and \nthumbnails\n for media\n\n\n\n\n\n\nplaylist\nindex\n.adschedule\n\n\nObject\n\n\nSchedule advertising for a specific media file\n\n\n\n\n\n\n\n\nIn addition to standard media information, (\"title\", \"description\", \"mediaid\") it is also possible to insert additional metadata, using custom properties. This information \nmust\n be entered inside of a playlist, and cannot be set directly inside of a setup block.\n\n\n\n\n\n\nplaylist[\nindex\n].sources[]\n\n\nSources are inserted into playlist objects and are lists of files. Sources serve a dual purpose, depending on the files used:\n\n\n\n\nUse different file types:\n Alternate \"fallback\" media sources\n\n\nUse the same file type:\n Toggle quality with static video files\n\n\n\n\nAlternate Media Sources\n\n\nIf using different file types, sources prioritizes which file to play only in the case when a provider (HTML5, HLS, or DASH) fails to load. If there is an error with a stream, the player will not failover to the next provider. In the example below, the player will attempt to play myVideo.m3u8 as a first choice. \n\n\nIn the event that a browser cannot play an m3u8, the player is intelligent enough to choose myVideo.mp4 instead. In the event that an mp4 cannot be played, the player will attempt the webm format before producing an error. \n\n\njwplayer(\nmyElement\n).setup({\n  \nplaylist\n: [{\n    \ntitle\n:\nOne Playlist Item With Multiple Sources\n,\n    \ndescription\n:\nThree Sources - One Playlist Item\n,\n    \nimage\n: \nmyImage.png\n,\n    \nmediaid\n: \nddrx3v2\n,\n    \nsources\n: [{\n      \nfile\n: \nmyVideo.m3u8\n\n    },{\n      \nfile\n: \nmyVideo.mp4\n\n    },{\n      \nfile\n: \nmyVideo.webm\n\n    }]\n  }]\n});\n\n\n\n\n\n\nSources with DRM\n\n\nWhen using DRM, we highly suggest placing the drm block inside of the appropriate media source. This ensures the correct media and DRM pair gets chosen for the appropriate browser. For example:\n\n\n  \nsources\n: [{\n      \nfile\n: \nmyFairplayStream.m3u8\n,\n      \ndrm\n: {\n        \nfairplay\n: {\n          \ncertificateUrl\n: \nhttp://myfairplay.com/fairplay/cert\n,\n          \nprocessSpcUrl\n: \nhttp://myfairplay.com/fairplay/ckc\n\n        }\n      }\n    },{\n      \nfile\n: \nmyWidevineStream.mpd\n,\n      \ndrm\n: {\n        \nwidevine\n: {\n          \nurl\n: \nhttp://mywidevineurl.com/drm\n\n          }\n      }\n    },{\n      \nfile\n: \nmyPlayreadyStream.mpd\n,\n      \ndrm\n: {\n        \nplayready\n: {\n          \nurl\n: \nhttp://myplayreadyurl.com/drm\n\n          }\n      },{\n      \nfile\n: \nmyClearkeyStream.mpd\n,\n      \ndrm\n: {\n        \nclearkey\n: {\n          \nkey\n: \n1234clear5678key\n,\n          \nkeyId\n: \nfefde00d-efde-adbf-eff1-baadf01dd11d\n\n          }\n      }\n    }]\n\n\n\n\nSee our \ndrm\n section for more information.\n\n\n\n\nQuality Settings for Video Files\n\n\nIn the event that a streaming technology like HLS or DASH cannot be used, listing video files of different qualities will enable a quality selection settings menu in the player. Compared to other streaming methods, it has the following drawbacks:\n\n\n\n\nNo automatic switching, based on bandwidth or download speed\n\n\nChanging qualities may cause playback stuttering\n\n\nPseudostreaming\n may need to be configured in cases where Flash is used\n\n\n\n\njwplayer(\nmyElement\n).setup({\n  \nplaylist\n: [{\n    \ntitle\n:\nOne Playlist Item With Multiple Qualities\n,\n    \ndescription\n:\nTwo Qualities - One Playlist Item\n,\n    \nsources\n: [{\n      \nfile\n: \nmyVideo-720p.mp4\n,\n      \nlabel\n: \nHD\n\n    },{\n    \nfile\n: \nmyVideo-480p.mp4\n,\n    \nlabel\n: \nSD\n\n    }]\n  }]\n});\n\n\n\n\n\n\n\n\n\n\nConfig\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nplaylist[\nindex\n].sources[].file\n\n\nString\n\n\nURL to the video file, audio file, YouTube video or live stream of this playlist item source.\n\n\n\n\n\n\nplaylist[\nindex\n].sources[].label\n\n\nString\n\n\nLabel of the media source, displayed in the manual quality selection menu. Set this if you have more than 2 qualities of your video.\n\n\n\n\n\n\nplaylist[\nindex\n].sources[].type\n\n\nString\n\n\nForces a media type. Only required when a file extension is missing or not recognized (Using .php or certain tokens, for example\n\n\n\n\n\n\nplaylist[\nindex\n].sources[].default\n\n\nBoolean\n\n\nSet this to \ntrue\n for the media source you want to play on startup. If this isn't set for any source, the first one is used\n\n\n\n\n\n\nplaylist[\nindex\n].sources[].drm\n\n\nObject\n\n\nAn object containing DRM information for a particular source\n\n\n\n\n\n\n\n\n\n\n\n\nplaylist[\nindex\n].tracks[]\n\n\nTracks can be attached to media for three possible reasons: \ncaptions\n, \nthumbnails\n, or \nchapters\n. Thumbnail and chapter files \nmust\n be in WEBVTT format. Captions accept \nWEBVTT\n, \nSRT\n, and \nDFXP\n format, though JW Player strongly suggests using \nWEBVTT\n if possible.\n\n\n\n\n\n\n\n\nConfig\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaylist[\nindex\n].tracks[].file\n\n\nString\n\n\nURL to the captions, chapters or thumbnails text track file. See \nAdding Closed Captions\n for an example setup.\n\n\n-\n\n\n\n\n\n\nplaylist[\nindex\n].tracks[].kind\n\n\nString\n\n\nThe kind of text track. \n \n\"captions\":\n Captions that display during video playback\n\"chapters\":\n Places markers on the video er, displaying different sections\n\"thumbnails\":\n A list of thumbnails that appear when the mouse cursor hovers on the timeslider\n\n\n\"captions\"\n\n\n\n\n\n\nplaylist[\nindex\n].tracks[].label\n\n\nString\n\n\nLabel of the text track. Is only used in setups with multiple captions, where the label is displayed in the CC selection menu.\n\n\nindex\n\n\n\n\n\n\nplaylist[\nindex\n].tracks[].default\n\n\nBoolean\n\n\nOnly for \ncaptions\n. Set this to \ntrue\n if you want a captions track to display by default\n\n\n-\n\n\n\n\n\n\n\n\nWhen using the playlist to load an RSS feed, these options are set in the feed. See the \nMedia Formats Reference\n for an mapping of all playlist options to RSS format.\n\n\n\n\n\n!!!important\nVideo ad insertion requires a JW Player Enterprise license. Please \ncontact our team\n to upgrade your account.\n!!!\n\n\nplaylist[\nindex\n].adschedule\n\n\nThe \nplaylist[\nindex\n].adschedule\n block is used for scheduling ad breaks throughout specific playlist items. Each \nadbreak\n should be given a unique name, and needs to be nested inside of an \nadschedule\n block.\n\n\n\n\n\n\n\n\nConfig\n\n\nType\n\n\nInformation\n\n\n\n\n\n\n\n\n\n\nplaylist[\nindex\n].adschedule.\nadbreak\n.offset\n\n\nString or Number\n\n\nSpecifies when the included tag should play during content. Can be \npre\n for a preroll, \npost\n for a postroll, or a \n%\n or \nnumber\n(In seconds), for a midroll\n\n\n\n\n\n\nplaylist[\nindex\n].adschedule.\nadbreak\n.tag\n\n\nString\n\n\nThis is used to set the ad tag for each adbreak within the ad schedule of a playlist item.\n\n\n\n\n\n\n\n\njwplayer(\nmyElement\n).setup({\n  \nplaylist\n: [{\n  \ntitle\n:\nOne Media Item\n,\n  \ndescription\n:\nOnly One media item in a playlist!\n,\n  \nfile\n: \nmyFile.mp4\n,\n  \nmediaid\n: \nddrx3v2\n,\n  \nimage\n: \nmyImage.png\n,\n    \nadschedule\n: {\n      \nmyPreroll\n: {\n      \noffset\n: \npre\n,\n      \ntag\n: \nmyAdTag.xml\n\n      },\n    \nmyMidroll\n: {\n      \noffset\n: 10,\n      \ntag\n: \nmyMidroll.xml\n\n      }\n    }\n  }]\n});\n\n\n\n\nSee our \nAdvertising\n section for more articles and examples\n\n\n\n\n\n\nSkin\n\n\nJW8 comes with 11 new skin configuration options out of the box. With such granular control over brand identity, it\u2019s easier than ever to customize the player.\n\n\nColor Customization\n\n\nColor can be specified as a \nhex value\n, \nRGBA color value\n, or \ncolor name\n.\n8.0+\n\n\n\n\n\n\n\n\nConfig\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nskin.controlbar.text\n\n\nString\n\n\nThe color of any plain text in the control bar, such as the time.\n\n\n\"#FFFFFF\"\n\n\n\n\n\n\nskin.controlbar.icons\n\n\nString\n\n\nThe default, inactive color of all icons in the control bar. This option also controls the color of the play, pause, and replay icons in the inactive and complete states.\n\n\n\"rgba(255,255,255,0.8)\"\n\n\n\n\n\n\nskin.controlbar.iconsActive\n\n\nString\n\n\nThe color of hovered or selected icons in the control bar.\n\n\n\"#FFFFFF\"\n\n\n\n\n\n\nskin.controlbar.background\n\n\nString\n\n\nTThe background color of the control bar and the volume slider. The default background is transparent.\n\n\n\"rgba(0,0,0,0)\"\n\n\n\n\n\n\nskin.timeslider.progress\n\n\nString\n\n\nThe color of the bar in the time slider filled in from the beginning of the video through the current position. The buffer region of the control bar is 50% of the opacity of this color. The color of the volume slider is also controlled by this option.\n\n\n\"#F2F2F2\"\n\n\n\n\n\n\nskin.timeslider.rail\n\n\nString\n\n\nThe color of the base of the timeslider, known as the rail.\n\n\n\"rgba(255,255,255,0.3)\"\n\n\n\n\n\n\nskin.menus.text\n\n\nString\n\n\nThe color of inactive, default text in menus and the Next Up overlay.\n\n\n\"rgba(255,255,255,0.8)\"\n\n\n\n\n\n\nskin.menus.textActive\n\n\nString\n\n\nThe color of hovered or selected text in menus. This option also controls the text color in the Discover overlay and the hover state text color in the Next Up overlay.\n\n\n\"#FFFFFF\"\n\n\n\n\n\n\nskin.menus.background\n\n\nString\n\n\nThe background color of menus and the Next Up overlay.\n\n\n\"#333333\"\n\n\n\n\n\n\nskin.tooltips.text\n\n\nString\n\n\nThe text color of tooltips.\n\n\n\"#000000\"\n\n\n\n\n\n\nskin.tooltips.background\n\n\nString\n\n\nThe background color of tooltips.\n\n\n\"#FFFFFF\"\n\n\n\n\n\n\n\n\n\n\nBackward Compatability\n\n\nJW8 continues to support the three \ncolor customization options\n from 7.x, \nskin.active\n, \nskin.inactive\n, \nskin.background\n, though the colors may map slightly differently in the new major version. \n\n\nThe table below shows how the three JW7 customization options map to the new JW8 options. You can use both JW7 and JW8 options in an 8 player, with the more specific JW8 configurations overriding JW7 ones when both apply to the same element. Note that there\u2019s no JW7 mapping to the new \nskin.timeslider.rail\n option.\n\n\n\n\n\n\n\n\nNew JW8 Config\n\n\nskin.active\n\n\nskin.inactive\n\n\nskin.background\n\n\n\n\n\n\n\n\n\n\nskin.controlbar.iconsActive\n\n\nX\n\n\n\n\n\n\n\n\n\n\nskin.timeslider.progress\n\n\nX\n\n\n\n\n\n\n\n\n\n\nskin.menus.textActive\n\n\nX\n\n\n\n\n\n\n\n\n\n\nskin.controlbar.text\n\n\n\n\nX\n\n\n\n\n\n\n\n\nskin.controlbar.icons\n\n\n\n\nX\n\n\n\n\n\n\n\n\nskin.menus.text\n\n\n\n\nX\n\n\n\n\n\n\n\n\nskin.tooltips.text\n\n\n\n\nX\n\n\n\n\n\n\n\n\nskin.tooltips.background\n\n\n\n\n\n\nX\n\n\n\n\n\n\nskin.controlbar.background\n\n\n\n\n\n\nX\n\n\n\n\n\n\nskin.menus.background\n\n\n\n\n\n\nX\n\n\n\n\n\n\nskin.timeslider.rail\n\n\ndoes not map\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustom Skins\n\n\nFor more information regarding custom skins, see: \nCreating a Skin for JW Player\n.\n\n\n\n\n\n\n\n\nConfig\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nskin.url\n\n\nString\n\n\nIf using an external CSS file to style your player, this must be specified here.\n\n\n-\n\n\n\n\n\n\nskin.name\n\n\nString\n\n\nThe name of your custom skin to use for styling the player. If you are specifying \nskin.url\n, you must specify \nskin.name\n, which must match the class name in your CSS file.\n\n\n-\n\n\n\n\n\n\n\n\n!!!\nThe nine skins available in JW7 have been deprecated.\n8.0+\n\n!!!\n\n\n\n\n\n\nCaptions\n\n\nThis options block configures the styling of closed captions in the player for desktop browsers. On iOS/Android, a system settings menu provides exactly the same settings, as these are mandated by the FCC.\n\n\n\n\n\n\n\n\nConfig\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nrenderCaptionsNatively\n\n\nBoolean\n\n\nIf true, captions render using the browser's renderer. If false, the player's renderer will be used in all browsers, except for Safari. \nNote:\n This configuration is not contained within the captions block.\n\n\nfalse\n 8.0.1+\n\n\n\n\n\n\ncaptions.color\n\n\nString\n\n\nHex color of the captions text\n\n\n\"#ffffff\"\n\n\n\n\n\n\ncaptions.fontSize\n\n\nNumber\n\n\nSize of the captions text (Will not affect text size when rendering captions via browser)\n\n\n15\n\n\n\n\n\n\ncaptions.fontFamily\n\n\nString\n\n\nFont Family\n of the captions text\n\n\n\"sans\"\n\n\n\n\n\n\ncaptions.fontOpacity\n\n\nNumber\n\n\nAlpha percentage of the captions text\n\n\n100\n\n\n\n\n\n\ncaptions.backgroundColor\n\n\nString\n\n\nHex color of the caption characters background\n\n\n\"#000000\"\n\n\n\n\n\n\ncaptions.backgroundOpacity\n\n\nNumber\n\n\nAlpha percentage of the caption characters background\n\n\n75\n\n\n\n\n\n\ncaptions.edgeStyle\n\n\nString\n\n\nMethod by which the captions characters are separated from their background\n\n\n\"none\"\n\n\n\n\n\n\ncaptions.windowColor\n\n\nString\n\n\nHex color of the background of the entire captions area\n\n\n\"#000000\"\n\n\n\n\n\n\ncaptions.windowOpacity\n\n\nNumber\n\n\nAlpha percentage of the background of the entire captions area\n\n\n0\n\n\n\n\n\n\n\n\n!!!\nWhen setting caption styles, color \nmust\n be specified as a \nhex value\n.\n!!!\n\n\nSee \nStyling Captions for FCC Compliance\n for more information.\n\n\n\n\n\n\nRTMP\n\n\n!!!\nThe RTMP format was deprecated in JW8.\n8.0+\n For 7.x players, see the \nJW7 RTMP Configuration Reference\n documentation.\n!!!\n\n\n\n\n\n\nLogo\n\n\nThis options block configures a clickable watermark that is overlayed on the video.\n\n\n\n\n\n\n\n\nConfig\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nlogo.file\n\n\nString\n\n\nThe URL of an external JPG, PNG or GIF image to be used as watermark (e.g. /assets/logo.png). We recommend using 24 bit PNG images with transparency\n\n\n-\n\n\n\n\n\n\nlogo.hide\n\n\nBoolean\n\n\nWhen this option is set to true, the logo will automatically show and hide along with the other player controls\n\n\nfalse\n\n\n\n\n\n\nlogo.link\n\n\nString\n\n\nThe URL to visit when the watermark image is clicked. Clicking a logo will have no affect unless this is configured\n\n\n-\n\n\n\n\n\n\nlogo.margin\n\n\nNumber\n\n\nThe distance, in pixels, of the logo from the edges of the display\n\n\n20\n\n\n\n\n\n\nlogo.position\n\n\nString\n\n\nThis sets the corner in which to display the watermark. \n\"control-bar\"\n adds the logo as the leftmost icon in the right grouping of buttons in the control bar.\n8.0+\n \n \n\"top-left\" \n \"top-right\" \n\"bottom-left\"\n \"bottom-right\" \n \"control-bar\"\n\n\n\"top-right\"\n\n\n\n\n\n\n\n\nSee \nBranding Your Player\n for more information.\n\n\n\n\n\n\nSharing\n\n\nThis options block controls a settings submenu with social sharing options: copy embed code, copy video link and share video to social networks.\n\n\nSetting an empty \n\"sharing\":{}\n options block will enable the social sharing menu and icon in the control bar. Without the nested config options, it will show the page URL link with default sharing sites, but no embed code.\n\n\n\n\n\n\n\n\nConfig\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nsharing.link\n\n\nString\n\n\nURL to display in the video link field\n\n\nURL of the current page\n\n\n\n\n\n\nsharing.code\n\n\nString\n\n\nEmbed code to display in the embed code field. If no code is set, the field is not shown\n\n\n-\n\n\n\n\n\n\nsharing.heading\n\n\nString\n\n\nShort, instructive text to display at the top of the sharing screen\n\n\n\"Share Video\"\n\n\n\n\n\n\nsharing.sites\n\n\nArray\n\n\nAllows for the customization of social icons\n\n\n[\"facebook\",\"twitter\",\"email\"]\n\n\n\n\n\n\n\n\n\n\nAvailable Built-In Social Networks\n\n\n\n\n\n\n\n\nSocial Network\n\n\nConfiguration Value\n\n\n\n\nSocial Network\n\n\nConfiguration Value\n\n\n\n\n\n\n\n\n\n\nFacebook\n\n\n\"facebook\"\n\n\n\n\nTumblr\n\n\n\"tumblr\"\n\n\n\n\n\n\nTwitter\n\n\n\"twitter\"\n\n\n\n\nGoogle Plus\n\n\n\"googleplus\"\n\n\n\n\n\n\nPinterest\n\n\n\"interest\"\n\n\n\n\nReddit\n\n\n\"reddit\"\n\n\n\n\n\n\nEmail\n\n\n\"email\"\n\n\n\n\nLinkedIn\n\n\n\"linkedin\"\n\n\n\n\n\n\n\n\nExample\n\n\njwplayer(\nmyElement\n).setup({\n  \nfile\n: \nhttp://example.com/myVideo.mp4\n,\n  \nsharing\n: {\n    \nsites\n: [\nreddit\n,\nfacebook\n,\ntwitter\n]\n  }\n});\n\n\n\n\nSee our \nSocial Sharing\n support article for more information.\n\n\n\n\n\n\nGoogle Analytics (ga)\n\n\nThis options block configures the built-in integration with Google Analytics.\n\n\n\n\n\n\n\n\nConfig\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nga.label\n\n\nString\n\n\nSend another playlist property, like \"title\" or \"mediaid\", as your event label in Google Analytics\n\n\n\"file\"\n\n\n\n\n\n\n\n\nGoogle's separate \nanalytics.js\n JavaScript library and config needs to be included in your page's head in order to send events with JW Player. Setting an empty \n\"ga\":{}\n options block will enable basic Google Analytics integration. No additional nested config options are required.\n\n\nSee \nConnecting Google Analytics\n for more information.\n\n\n\n\n\n\nRelated\n\n\nThis options block controls an overlay with related videos.\n\n\n\n\n\n\n\n\nConfig\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nrelated.file\n\n\nString\n\n\n(Required)\n Location of an RSS or JSON file containing a feed of related videos\n\n\n-\n\n\n\n\n\n\nrelated.oncomplete\n\n\nString\n\n\nThe behavior of our related videos overlay when a single video or playlist is completed \n \n\"hide\"\n: Replay button and related icon will appear \n \n\"show\"\n: Display the related overlay \n \n\"autoplay\"\n: automatically play the next video in your related feed after 10 seconds. Automatically sets onclick behavior to \n\"play\"\n\n\n\"show\"\n\n\n\n\n\n\nrelated.onclick\n\n\nString\n\n\nThe behavior when a related video is selected.\n \n\"play\":\n Plays the next video within the current player. \n \n\"link\":\n  Redirects the page to the url specified in the link field in \nrelated.file\n.\n\n\n\"play\"\n\n\n\n\n\n\nrelated.autoplaytimer\n\n\nNumber\n\n\nThe number of seconds to wait before playing the next related video in your content list. Set to 0 to have your next related content to play immediately\n\n\n10\n\n\n\n\n\n\nrelated.autoplaymessage\n\n\nString\n\n\nA custom message that appears during autoplay. \n \nxx\n will be replaced by the countdown timer\n \n__title__\n will be replaced by the next title in the related feed.\n\n\n\"\n_title__ will play in xx seconds\"\n\n\n\n\n\n\n\n\n\n\n\nSee \nDisplay Related Videos\n for more information.\n\n\n\n\n\n\nAdvertising\n\n\n!!!important\nVideo ad insertion requires a JW Player Enterprise license. Please \ncontact our team\n to upgrade your account.\n!!!\n\n\nThis options block configures the video advertising capabilities of JW Player. If no \nschedule\n is specified, the ad will play as a preroll by default.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nadvertising.client\n\n\nString\n\n\n(Required for Advertising)\n Chooses the ad client that will be used to display advertisements:\n\"vast\":\n Use the JW Player VAST client \n \n\"googima\"\n: Use the Google IMA SDK - Required for certain ad tags \n \n\"freewheel\"\n: Use the FreeWheel client\n\n\n-\n\n\n\n\n\n\nadvertising.tag\n\n\nString\n\n\nThe URL of the VAST tag to display, or custom string of the FreeWheel tag to display\n\n\n-\n\n\n\n\n\n\nadvertising.admessage\n\n\nString\n\n\nText that displays during ad playback\n\n\n\"The ad will end in xx seconds\"\n\n\n\n\n\n\nadvertising.skipoffset\n\n\nNumber\n\n\nIf not present in the VAST file, adds a skip offset to static VAST ads\n\n\n-\n\n\n\n\n\n\nadvertising.cuetext\n\n\nString\n\n\nSpecify the text that appears when a user mouses over a scheduled advertisement\n\n\n\"Advertisement\"\n\n\n\n\n\n\nadvertising.skipmessage\n\n\nString\n\n\nThis is used to provide a customized countdown message\n\n\n\"Skip ad in xx\"\n\n\n\n\n\n\nadvertising.skiptext\n\n\nString\n\n\nThis sets the text of the Skip button after the countdown is over\n\n\n\"Skip\"\n\n\n\n\n\n\nadvertising.vpaidmode\n\n\nString\n\n\nUsed exclusively for \nGoogle IMA VPAID ads\n\"disabled\":\n VPAID ads will not play and an error will be returned if VPAID is requested \n \n\"enabled\"\n: VPAID is enabled using a cross domain iframe. The VPAID ad cannot access the site. VPAID ads that depend on friendly iframe access may not play\n\"insecure\":\n The VPAID ad will load in a friendly iframe. This allows the ad access to the site via javascript \n Not supported in FreeWheel\n\n\n\"insecure\"\n\n\n\n\n\n\nadvertising.schedule\n\n\nString or Object\n\n\nLoad an ad schedule from an external VMAP XML or JSON block. \nadvertising.tag\n is ignored if this option is set\n\n\n-\n\n\n\n\n\n\nadvertising.companiondiv\n\n\nObject\n\n\nGives information to the player related to which div(s) to populate with companion ads. \n Not supported in FreeWheel\n\n\n-\n\n\n\n\n\n\nadvertising.autoplayadsmuted\n\n\nBoolean\n\n\nFor inline players that start muted when viewed on mobile devices, allows ads to play muted\n\n\n-\n\n\n\n\n\n\nadvertising.enablepreloading\n\n\nBoolean\n\n\nFor disabling ad preloading when using IMA\n\n\n-\n\n\n\n\n\n\nadvertising.vpaidcontrols\n\n\nBoolean\n\n\nFor forcing controls to show for VPAID ads. If the VPAID creative has built-in controls, showing the controls may be redundant\n\n\n-\n\n\n\n\n\n\nadvertising.forceNonLinearFullSlot\n\n\nBoolean\n\n\n(Only supported when using IMA) For forcing nonlinear ads to be fullsot ads rather than overlays.\n\n\n-\n\n\n\n\n\n\nadvertising.setLocale\n\n\nString\n\n\n(Only supported when using IMA) Two-letter language code for localization of skip-button language. Two-letter language code must be valid.\n\n\n-\n\n\n\n\n\n\nadvertising.creativeTimeout\n\n\nString\n\n\n(Only supported when using VAST) In milliseconds, the time between the VAST XML being returned and the adstart event.\n\n\n15000\n\n\n\n\n\n\nadvertising.requestTimeout\n\n\nString\n\n\n(Only supported when using VAST) In milliseconds, the time between the ad request and a returned VAST file.\n\n\n5000\n\n\n\n\n\n\n\n\n\n\n\n\nadvertising.schedule\n\n\nUse this option to load an entire advertising schedule to JW Player, containing multiple ad breaks. The option can be a URL to a VMAP schedule or an inline JSON block with ads. This schedule will then be applied to each playlist item. For scheduling ads for individual playlist items, see \nscheduling ads for playlist items\n.\n\n\nAd Schedules with VMAP Files\n\n\nIf you are planning on using a VMAP file, simply link to a VMAP .xml file within the advertising block.\n\n\njwplayer(\nmyElement\n).setup({\n  \nfile\n: \nhttp://example.com/myVideo.mp4\n,\n  \nadvertising\n: {\n    \nclient\n: \nvast\n,\n    \nschedule\n: \nmyvmap.xml\n\n  }\n});\n\n\n\n\nThe VMAP schedule will then be applied to each playlist item. See our article about VMAP schedules for more information.\n\n\nEmbedded Ad Schedules with JSON\n\n\nIn order to use a JSON-formatted schedule, you'll need at least one \nad break\n configured inside of an \nadvertising\n block. Each ad break is required to have a unique name, and should include a tag and offset.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nadvertising.schedule.\nadbreak\n.tag\n\n\nString\n\n\nThe ad tag that is called during the configured ad break\n\n\n-\n\n\n\n\n\n\nadvertising.schedule.\nadbreak\n.offset\n\n\nString or Number\n\n\nWhen to play the configured ad tag\n\"pre\":\n Ad plays as a preroll \n\"post\":\n Ad plays as a postroll\n\"xx%\":\n Ad plays after xx% of the content\nnumber:\n Ad plays after the specified number of seconds\n\n\n\"pre\"\n\n\n\n\n\n\n\n\njwplayer(\nmyElement\n).setup({\n  \nfile\n: \nhttp://example.com/myVideo.mp4\n,\n  \nadvertising\n: {\n    \nclient\n: \nvast\n,\n    \nschedule\n: {\n      \nadbreak-preroll\n:{\n        \ntag\n: \nmyPreroll.xml\n,\n        \noffset\n: \npre\n\n      },\n      \nadbreak-midroll\n:{\n        \ntag\n: \nmyMidroll.xml\n,\n        \noffset\n: \n50%\n\n      }\n    }\n  }\n});\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nadvertising.schedule.\nadbreak\n.custParams\n\n\nObject\n\n\nAllows for passing custom parameters to an ad break, which then pass through to the URL requested from the ad server\n\n\n-\n\n\n\n\n\n\n\n\nadvertising\n: {\n        \nclient\n: \ngoogima\n,\n        \nadscheduleid\n: \n12345\n,\n        \nschedule\n: {\n            \npreroll\n: {\n                \ncustParams\n: {\n                    \ntestkey1\n: \ntestval1\n,\n                    \ntestkey2\n: \ntestval2\n\n                },\n                \ntag\n: \nmyPreroll.xml\n,\n                \noffset\n: \npre\n\n            }\n        }\n    }\n\n\n\n\n\n\n\n\nadvertising.companiondiv\n\n\nThis is a configuration block object with 3 properties: id, width and height. Set these to have JW Player load a companion ad from your VAST/IMA tag into a div on your page. See \nCompanion Ads\n for more info.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nadvertising.companiondiv.height\n\n\nNumber\n\n\nThe targeted desired height of a companion ad that exists in a VAST ad\n\n\n\n\n\n\nadvertising.companiondiv.width\n\n\nNumber\n\n\nThe targeted desired width of a companion ad that exists in a VAST ad\n\n\n\n\n\n\nadvertising.companiondiv.id\n\n\nString\n\n\nThe ID of the div to replace with a companion ad\n\n\n\n\n\n\n\n\nFor an overview of JW Player's advertising capabilities, see its dedicated \nVideo Ads section\n.\n\n\n\n\n\n\nDRM\n\n\n!!!important\nVideo content protection requires a JW Player Enterprise license. Please \ncontact our team\n to upgrade your account.\n!!!\n\n\nConfiguration options related to DRM for MPEG DASH (Playready, Widevine, Clearkey) and HLS streams (Fairplay).\n\n\nJW Player includes the ability to add DRM to a specific playlist source. Using this method will allow your browser to choose the correct DRM method when multiple DRM types are configured. We \nhighly\n suggest updating any configurations to use this new method.\n\n\n!!!\nHTTPS is required for all DRM-protected content.\n!!!\n\n\nFor more information regarding DRM, and for examples, please view our \nsupport article\n.\n\n\ndrm.playready\n\n\nPlayready DRM is specific to Internet Explorer 11 and Edge on Windows 8.1 or higher operating systems.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndrm.playready.url\n\n\nString\n\n\n(Required)\n The URL of the PlayReady license server\n\n\n-\n\n\n\n\n\n\ndrm.playready.headers\n\n\nArray\n\n\nSpecifies the custom http headers to send to your playready license server. See \nheaders\n for more information\n\n\n-\n\n\n\n\n\n\n\n\n\n\ndrm.widevine\n\n\nWidevine DRM is specific to Google Chrome on non-iOS devices. Widevine will also function on Firefox browsers for desktop systems.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndrm.widevine.url\n\n\nString\n\n\n(Required)\n The URL of the WideVine license server\n\n\n-\n\n\n\n\n\n\ndrm.widevine.serverCertificateUrl\n\n\nString\n\n\n(Required)\n The URL of the WideVine service certificate\n\n\n-\n\n\n\n\n\n\ndrm.widevine.headers\n\n\nArray\n\n\nSpecifies the custom http headers to send to your widevine license server requests. See \nheaders\n for more information\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\ndrm.[widevine/playready].headers\n\n\nAdding customized HTTP header data to license requests is possible with the \"headers\" configuration. This replaces the static \"customData\" configuration option in both widevine and playready scenarios. It is also possible to add multiple custom http headers by including multiple objects in the \"headers\" array.\n\n\nDRM can be configured in the following way:\n\n\ndrm\n: {\n  \nplayready\n: {\n  \nurl\n: \nmydrmserver.com\n\n  \nheaders\n: [{\n    \nname\n: \ncustomData\n,\n    \nvalue\n: \nhereismycustomdatastring\n\n    }]\n  }\n}\n\n\n\n\nIn previous versions, adding \"customData\" would look like the following:\n\n\ndrm\n: {\n  \nplayready\n: {\n  \nurl\n: \nmydrmserver.com\n\n  \ncustomData\n: \nhereismycustomdatastring\n\n  }\n}\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nheaders.name\n\n\nString\n\n\nThe name of the http header that will be included\n\n\n\n\n\n\nheaders.value\n\n\nString\n\n\nThe value of the http header that will be included\n\n\n\n\n\n\n\n\n\n\ndrm.fairplay\n\n\nJW Player includes configuration options for custom Fairplay integrations. For more information and examples regarding custom Fairplay DRM integrations, please view our \nsupport article\n.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndrm.fairplay.certificateUrl\n\n\nString\n\n\n(Required)\n The path to the certificate which is part of the session data used to initialize the keySession.certificateUrl\n\n\n\n\n\n\ndrm.fairplay.processSpcUrl\n\n\nString or Function\n\n\n(Required)\n The path to the license server (server playback context) which provides the ckc. Expects a direct url to the server. If the url needs to be constructed dynamically, a custom function can be passed to this configuration option which returns the url\n\n\n\n\n\n\ndrm.fairplay.extractContentId\n\n\nFunction\n\n\nExpects a function that receives the initData uri (converted to a string) from the needkey event, and returns the contentId which is part of the session data used to initialize the keySession\n\n\n\n\n\n\ndrm.fairplay.licenseRequestHeaders\n\n\nArray\n\n\nExpects an Array of Objects containing header \u201cname\u201d and \u201cvalue\u201d properties to be included in the request to the license server\n\n\n\n\n\n\ndrm.fairplay.licenseResponseType\n\n\nString\n\n\nSpecifies the data type returned by the XHR request to the license server. The default value is 'arraybuffer'. Other options include 'blob', 'json', and 'text'. This option impacts how \u201clicenseRequestMessage\u201d will be processed\n\n\n\n\n\n\ndrm.fairplay.licenseRequestMessage\n\n\nFunction\n\n\nExpects a function that receives the license key message and returns the message to be sent to the license server. With the default \u201clicenseResponseType\u201d of ArrayBuffer this function passes through keymessage event message property without any changes\n\n\n\n\n\n\ndrm.fairplay.extractKey\n\n\nFunction\n\n\nExpects a function that receives the ckc returned by the license server and returns the key used to update the active key session. If the key can only be extracted asynchronously (for example reading bytes from a \u2018blob\u2019 response), this function can return a promise\n\n\n\n\n\n\n\n\n\n\ndrm.clearkey\n\n\nA basic form of DRM that lists a decryption key inside of your player configuration. This is the least secure form of DRM, though it is the simplest to implement across browsers. There are no additional server resources required to decrypt content with this method. Clearkey is supported in both Chrome and Firefox browsers.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndrm.clearkey.key\n\n\nString\n\n\n(Required)\n The key required to decrypt DRM content\n\n\n\n\n\n\ndrm.clearkey.keyId\n\n\nString\n\n\n(Required)\n The key ID specified in the mpd's \ndefault_KID\n value\n\n\n\n\n\n\n\n\n\n\n\n\nLocalization\n\n\nUsing the localization block in a player configuration allows you to configure certain words and phrases in the JW Player Next Up interface. The available options are below.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nlocalization.airplay\n\n\nString\n\n\nTitle of the tooltip for the Airplay icon in the control bar\n\n\n\"Airplay\"\n\n\n\n\n\n\nlocalization.audioTracks\n\n\nString\n\n\nTitle of the tooltip for the audio track menu\n\n\n\"Audio tracks\"\n\n\n\n\n\n\nlocalization.buffer\n\n\nString\n\n\nTitle of the buffer state\n\n\n\"Loading\"\n\n\n\n\n\n\nlocalization.cast \n\n\nString\n\n\nTitle of the tooltip for the Chromecast icon in the control bar\n\n\n\"Chromecast\"\n\n\n\n\n\n\nlocalization.cc\n\n\nString\n\n\nTitle of the tooltip for the captions menu\n\n\n\"Closed captions\"\n\n\n\n\n\n\nlocalization.close\n\n\nString\n\n\nTitle of tooltip on close icon in Related mode\n\n\n\"Close\"\n\n\n\n\n\n\nlocalization.fullscreen\n\n\nString\n\n\nTitle of tooltip to enter fullscreen mode\n\n\n\"Fullscreen\"\n\n\n\n\n\n\nlocalization.hd \n\n\nString\n\n\nTitle of the tooltip for the quality menu\n\n\n\"Quality\"\n\n\n\n\n\n\nlocalization.liveBroadcast\n\n\nString\n\n\nOverride for the state of a live stream\n\n\n\"Live broadcast\"\n\n\n\n\n\n\nlocalization.loadingAd\n\n\nString\n\n\nOverride for the text shown when an ad is loading\n\n\n\"Loading ad\"\n\n\n\n\n\n\nlocalization.more\n\n\nString\n\n\nOverride for uses of a prompt to load addition items\n\n\n\"More\"\n\n\n\n\n\n\nlocalization.next\n\n\nString\n\n\nTitle of the right arrow in paginated overlays\n\n\n\"Next\"\n\n\n\n\n\n\nlocalization.nextUp\n\n\nString\n\n\nOverride for the \"Next Up\" prompt\n\n\n\"Next Up\"\n\n\n\n\n\n\nlocalization.nextUpClose\n\n\nString\n\n\nTitle of the tooltip to close the \"Next Up\" prompt\n\n\n\"Next Up Close\"\n\n\n\n\n\n\nlocalization.pause\n\n\nString\n\n\nTooltip for the pause button\n\n\n\"Pause\"\n\n\n\n\n\n\nlocalization.play\n\n\nString\n\n\nTooltip for the play button\n\n\n\"Play\"\n\n\n\n\n\n\nlocalization.playback\n\n\nString\n\n\nOverride for the play button in an idle state\n\n\n\"Start playback\"\n\n\n\n\n\n\nlocalization.playbackRates\n\n\nString\n\n\nTitle of the tooltip for the playback rate controls menu\n\n\n\"Playback rates\"\n\n\n\n\n\n\nlocalization.player\n\n\nString\n\n\nOverride for the player application\n\n\n\"Video Player\"\n\n\n\n\n\n\nlocalization.playlist\n\n\nString\n\n\nTitle of the Next Up tooltip in Playlist mode\n\n\n\"Playlist\"\n\n\n\n\n\n\nlocalization.prev\n\n\nString\n\n\nTitle of the left arrow in paginated overlays\n\n\n\"Previous\"\n\n\n\n\n\n\nlocalization.related\n\n\nString\n\n\nTitle of the Next Up tooltip in Related mode\n\n\n\"Discover\"\n\n\n\n\n\n\nlocalization.replay\n\n\nString\n\n\nTitle of the tooltip for the replay button shown on completion\n\n\n\"Replay\"\n\n\n\n\n\n\nlocalization.rewind\n\n\nString\n\n\nTitle of tooltip for the rewind button in the control bar\n\n\n\"Rewind 10s\"\n\n\n\n\n\n\nlocalization.volume\n\n\nString\n\n\nTooltip for the volume controls\n\n\n\"Volume\"", 
            "title": "Configuration Reference"
        }, 
        {
            "location": "/customization/configuration-reference/#jw-player-configuration-reference", 
            "text": "This article acts a reference to all configuration options JW Player supports. Configuration options tell a player instance which media to play and how to layout and behave on your page.  !!!important\nCertain JW Player features may require a specific license. Please  contact our team  to upgrade your account.\n!!!     Table Of Contents        Setup Options  The Playlist  Skin    Captions  RTMP  Logo    Sharing  Google Analytics  Related    Advertising  DRM  Localization", 
            "title": "JW Player Configuration Reference"
        }, 
        {
            "location": "/customization/configuration-reference/#introduction", 
            "text": "JW Player contains a large number of features and options that can be configured inside of the player setup.  Some options, like  width  or  mute , are directly placed into the setup. Other, more advanced options, are grouped into nested blocks, like  skin  or  advertising .  Here is an example setup that contains both  setup  options and specific  advertising  options:  jwplayer( myElement ).setup({\n   file :  https://example.com/myVideo.mp4 ,\n   height : 360,\n   width : 640,\n   autostart :  viewable ,\n   advertising : {\n         client :  vast ,\n         tag :  http://adserver.com/vastTag.xml \n    }\n});  Web developers will recognize the JavaScript Object Notation ( JSON ) syntax of these setup blocks. While configuring player setups, beware of common JSON requirements, like the need for a comma after all but the last element in a list.", 
            "title": "Introduction"
        }, 
        {
            "location": "/customization/configuration-reference/#setup-options", 
            "text": "These are the options for configuring the layout and playback behavior of a player. Each is placed directly into the  setup  of the player.  The following properties are related to media that is loaded into the player.  If only a single playlist item is used, this information can either be configured directly inside of  setup . If you are planning on using multiple media items, these can also be used inside of a  playlist  array.", 
            "title": "Setup Options"
        }, 
        {
            "location": "/customization/configuration-reference/#media", 
            "text": "Setting  Type  Description  Default      file  String  (Required)  URL to a single video file, audio file, or live stream to play. Can also be configured inside of a  sources  array  -    image  String  URL to a poster image to display before playback starts.  -    title  String  The title of your video or audio item  -    description  String  A description of your video or audio item  -    mediaid  String  Unique identifier of this item. Used by advertising, analytics and discovery services  -     !!!\nYouTube and RTMP media formats are no longer supported. 8.0+ \n!!!", 
            "title": "Media"
        }, 
        {
            "location": "/customization/configuration-reference/#behavior", 
            "text": "Setting  Type  Description  Default      mute  Boolean  Configures if the player should be muted during playback  false    autostart  String  Whether the player will attempt to begin playback automatically when a page is loaded. Set to 'viewable' to have player autostart if 50% is viewable.  false    nextupoffset  Number  Configures when the Next Up card displays when transitioning between playlist items. A positive value is an offset from the start of the video. A negative number is an offset from the end of the video  -10    repeat  Boolean  Configures if the player should loop content after a playlist completes  false    abouttext  String  Custom text to display in the right-click menu  -    aboutlink  String  Custom URL to link to when clicking the right-click menu  \"https://www.jwplayer.com/learn-more\"    playbackRateControls  Boolean  Whether to display a settings menu to adjust playback speed. If true, the pre-defined options available in the menu are 0.5x, 1x, 1.25x, 1.5x, and 2x. An array can be passed to customize the menu options using  playbackRates .  Note:  This feature is not currently supported in Android with HLS streams.  false    playbackRates   8.0+  Array of Numbers  (Optional) Custom playback rate options to display in the settings menu.  [0.25, 0.75, 1, 1.25]", 
            "title": "Behavior"
        }, 
        {
            "location": "/customization/configuration-reference/#appearance", 
            "text": "Setting  Type  Description  Default      controls  Boolean  Whether to display the video controls (control bar and display icons)  true    localization  Object  Changes text for the player in certain locations  -    aspectratio  String  Maintains proportions when width is a percentage. Will not be used if the player is a static size.    Must be entered in ratio \"x:y\" format.  -    height  Number  The desired height of your video player (In pixels). Can be omitted when aspectratio is configured  360    width  Number or String  The desired height of your video player (In pixels or percentage)  640    displaytitle  Boolean  Configures if the title of a media file should be displayed  true    displaydescription  Boolean  Configures if the description title of a media file should be displayed  true    stretching  String  Resize images and video to fit player dimensions. See graphic below for examples    \"uniform\"  \u2014 Fits JW Player dimensions while maintaining aspect ratio    \"exactfit\":  Will fit JW Player dimensions without maintaining aspect ratio  \"fill\" \u2014 Will zoom and crop video\u00a0to fill dimensions,\u00a0maintaining aspect ratio    \"none\"  \u2014 Displays the actual size of the video file. (Black borders)  \"uniform\"    nextUpDisplay  Boolean  Configures whether the Next Up modal is displayed  -    qualityLabels  Array  By default, the JW Player will set video quality levels using information from the manifest files. Use this configuration option to apply a custom quality label to a desired bandwidth in kbps, works for HLS and DASH. For example: \"qualityLabels\":{\"2500\":\"High\",\"1000\":\"Medium\"}  -     !!! timeSliderAbove , which configures whether the timeslider dynamically appears above the control bar, has been deprecated.  8.0+ \n!!!", 
            "title": "Appearance"
        }, 
        {
            "location": "/customization/configuration-reference/#stretching-examples", 
            "text": "", 
            "title": "Stretching Examples"
        }, 
        {
            "location": "/customization/configuration-reference/#rendering-and-loading", 
            "text": "Setting  Type  Description  Default      base  String  Configures an alternate base path for skins and providers  \"/\"    preload  String  Tells the player if content should be loaded prior to playback. Useful for faster playback speed or if certain metadata should be loaded prior to playback:  \"none\"  \u2014 Player will explicitly  not  preload content.  (Recommended if you are concerned about excess content usage.) \"metadata\"  \u2014 Loads the manifest and buffers a maximum of one segment of media for HLS and Dash streams.   \"auto\"  \u2014 Loads the manifest and buffers approximately 30 seconds worth of media segments.  \"metadata\"    flashplayer  String  Specifies an alternate directory of  jwplayer.flash.swf  \"/\"     !!! primary , which set the default player rendering mode, has been deprecated. 8.0+  Flash is no longer supported in JW Player except to play HLS streams in IE11 on Windows 7.  \nThe default  preload  configuration has been updated to \"metadata\", and the  metadata  and  auto  settings have been redefined. 8.0+ \n!!!", 
            "title": "Rendering and Loading"
        }, 
        {
            "location": "/customization/configuration-reference/#playlist", 
            "text": "The playlist is a powerful feature of JW Player, used to play multiple video or audio files.  A playlist can be either a  string , referring to the URL of an RSS feed or JSON file, or an  array  of media objects.", 
            "title": "Playlist"
        }, 
        {
            "location": "/customization/configuration-reference/#configuring-playlist-as-a-string", 
            "text": "jwplayer( myElement ).setup({\n   playlist :  http://example.com/myPlaylist.json \n});", 
            "title": "Configuring Playlist as a String"
        }, 
        {
            "location": "/customization/configuration-reference/#configuring-playlist-as-an-array", 
            "text": "jwplayer( myElement ).setup({\n     playlist : [{\n         file :  /assets/sintel.mp4 ,\n         image :  /assets/sintel.jpg ,\n         title :  Sintel Trailer ,\n         mediaid :  ddra573 \n    },{\n         file :  /assets/bigbuckbunny.mp4 ,\n         image :  /assets/bigbuckbunny.jpg ,\n         title :  Big Buck Bunny Trailer ,\n         mediaid :  ddrx3v2 \n    }]\n});     Setting  Type  Description      playlist[ index ].file  String  (Required)  If no file is specified in your setup or sources, this is a required configuration option    playlist[ index ].withCredentials  Boolean  If true, \"withCredentials\" will be used to request a media file rather than CORS    playlist[ index ].title  String  Title of the item. This is displayed inside of the player prior to playback, as well as in the visual playlist. This can be hidden with the displaytitle option    playlist[ index ].description  String  Short description of the item. It is displayed below the title. This can be hidden with the displaydescription option.    playlist[ index ].image  String  Poster image URL. Displayed before and after playback.    playlist[ index ].mediaid  String  Unique identifier of this item. Used by advertising, analytics and discovery services    playlist[ index ].recommendations  String  URL to a feed that contains related items for a particular playlist item    playlist[ index ].minDvrWindow  Number  HLS-only  In seconds, the minimum amount of content in an M3U8 required to trigger DVR mode. Set to 0 to always display DVR mode.(Defaults to  120 )    playlist[index].stereomode  String  Used for playback of a spherical 360 Video. \"Monoscopic\" is the value supported at this time.    playlist index .sources  Array  Used for quality toggling and alternate sources    playlist index .tracks  Array  Include  captions ,  chapters , and  thumbnails  for media    playlist index .adschedule  Object  Schedule advertising for a specific media file     In addition to standard media information, (\"title\", \"description\", \"mediaid\") it is also possible to insert additional metadata, using custom properties. This information  must  be entered inside of a playlist, and cannot be set directly inside of a setup block.", 
            "title": "Configuring Playlist as an Array"
        }, 
        {
            "location": "/customization/configuration-reference/#playlistindexsources", 
            "text": "Sources are inserted into playlist objects and are lists of files. Sources serve a dual purpose, depending on the files used:   Use different file types:  Alternate \"fallback\" media sources  Use the same file type:  Toggle quality with static video files", 
            "title": "playlist[index].sources[]"
        }, 
        {
            "location": "/customization/configuration-reference/#alternate-media-sources", 
            "text": "If using different file types, sources prioritizes which file to play only in the case when a provider (HTML5, HLS, or DASH) fails to load. If there is an error with a stream, the player will not failover to the next provider. In the example below, the player will attempt to play myVideo.m3u8 as a first choice.   In the event that a browser cannot play an m3u8, the player is intelligent enough to choose myVideo.mp4 instead. In the event that an mp4 cannot be played, the player will attempt the webm format before producing an error.   jwplayer( myElement ).setup({\n   playlist : [{\n     title : One Playlist Item With Multiple Sources ,\n     description : Three Sources - One Playlist Item ,\n     image :  myImage.png ,\n     mediaid :  ddrx3v2 ,\n     sources : [{\n       file :  myVideo.m3u8 \n    },{\n       file :  myVideo.mp4 \n    },{\n       file :  myVideo.webm \n    }]\n  }]\n});", 
            "title": "Alternate Media Sources"
        }, 
        {
            "location": "/customization/configuration-reference/#sources-with-drm", 
            "text": "When using DRM, we highly suggest placing the drm block inside of the appropriate media source. This ensures the correct media and DRM pair gets chosen for the appropriate browser. For example:     sources : [{\n       file :  myFairplayStream.m3u8 ,\n       drm : {\n         fairplay : {\n           certificateUrl :  http://myfairplay.com/fairplay/cert ,\n           processSpcUrl :  http://myfairplay.com/fairplay/ckc \n        }\n      }\n    },{\n       file :  myWidevineStream.mpd ,\n       drm : {\n         widevine : {\n           url :  http://mywidevineurl.com/drm \n          }\n      }\n    },{\n       file :  myPlayreadyStream.mpd ,\n       drm : {\n         playready : {\n           url :  http://myplayreadyurl.com/drm \n          }\n      },{\n       file :  myClearkeyStream.mpd ,\n       drm : {\n         clearkey : {\n           key :  1234clear5678key ,\n           keyId :  fefde00d-efde-adbf-eff1-baadf01dd11d \n          }\n      }\n    }]  See our  drm  section for more information.", 
            "title": "Sources with DRM"
        }, 
        {
            "location": "/customization/configuration-reference/#quality-settings-for-video-files", 
            "text": "In the event that a streaming technology like HLS or DASH cannot be used, listing video files of different qualities will enable a quality selection settings menu in the player. Compared to other streaming methods, it has the following drawbacks:   No automatic switching, based on bandwidth or download speed  Changing qualities may cause playback stuttering  Pseudostreaming  may need to be configured in cases where Flash is used   jwplayer( myElement ).setup({\n   playlist : [{\n     title : One Playlist Item With Multiple Qualities ,\n     description : Two Qualities - One Playlist Item ,\n     sources : [{\n       file :  myVideo-720p.mp4 ,\n       label :  HD \n    },{\n     file :  myVideo-480p.mp4 ,\n     label :  SD \n    }]\n  }]\n});     Config  Type  Description      playlist[ index ].sources[].file  String  URL to the video file, audio file, YouTube video or live stream of this playlist item source.    playlist[ index ].sources[].label  String  Label of the media source, displayed in the manual quality selection menu. Set this if you have more than 2 qualities of your video.    playlist[ index ].sources[].type  String  Forces a media type. Only required when a file extension is missing or not recognized (Using .php or certain tokens, for example    playlist[ index ].sources[].default  Boolean  Set this to  true  for the media source you want to play on startup. If this isn't set for any source, the first one is used    playlist[ index ].sources[].drm  Object  An object containing DRM information for a particular source", 
            "title": "Quality Settings for Video Files"
        }, 
        {
            "location": "/customization/configuration-reference/#playlistindextracks", 
            "text": "Tracks can be attached to media for three possible reasons:  captions ,  thumbnails , or  chapters . Thumbnail and chapter files  must  be in WEBVTT format. Captions accept  WEBVTT ,  SRT , and  DFXP  format, though JW Player strongly suggests using  WEBVTT  if possible.     Config  Type  Description  Default      playlist[ index ].tracks[].file  String  URL to the captions, chapters or thumbnails text track file. See  Adding Closed Captions  for an example setup.  -    playlist[ index ].tracks[].kind  String  The kind of text track.    \"captions\":  Captions that display during video playback \"chapters\":  Places markers on the video er, displaying different sections \"thumbnails\":  A list of thumbnails that appear when the mouse cursor hovers on the timeslider  \"captions\"    playlist[ index ].tracks[].label  String  Label of the text track. Is only used in setups with multiple captions, where the label is displayed in the CC selection menu.  index    playlist[ index ].tracks[].default  Boolean  Only for  captions . Set this to  true  if you want a captions track to display by default  -     When using the playlist to load an RSS feed, these options are set in the feed. See the  Media Formats Reference  for an mapping of all playlist options to RSS format.   \n!!!important\nVideo ad insertion requires a JW Player Enterprise license. Please  contact our team  to upgrade your account.\n!!!", 
            "title": "playlist[index].tracks[]"
        }, 
        {
            "location": "/customization/configuration-reference/#playlistindexadschedule", 
            "text": "The  playlist[ index ].adschedule  block is used for scheduling ad breaks throughout specific playlist items. Each  adbreak  should be given a unique name, and needs to be nested inside of an  adschedule  block.     Config  Type  Information      playlist[ index ].adschedule. adbreak .offset  String or Number  Specifies when the included tag should play during content. Can be  pre  for a preroll,  post  for a postroll, or a  %  or  number (In seconds), for a midroll    playlist[ index ].adschedule. adbreak .tag  String  This is used to set the ad tag for each adbreak within the ad schedule of a playlist item.     jwplayer( myElement ).setup({\n   playlist : [{\n   title : One Media Item ,\n   description : Only One media item in a playlist! ,\n   file :  myFile.mp4 ,\n   mediaid :  ddrx3v2 ,\n   image :  myImage.png ,\n     adschedule : {\n       myPreroll : {\n       offset :  pre ,\n       tag :  myAdTag.xml \n      },\n     myMidroll : {\n       offset : 10,\n       tag :  myMidroll.xml \n      }\n    }\n  }]\n});  See our  Advertising  section for more articles and examples", 
            "title": "playlist[index].adschedule"
        }, 
        {
            "location": "/customization/configuration-reference/#skin", 
            "text": "JW8 comes with 11 new skin configuration options out of the box. With such granular control over brand identity, it\u2019s easier than ever to customize the player.", 
            "title": "Skin"
        }, 
        {
            "location": "/customization/configuration-reference/#color-customization", 
            "text": "Color can be specified as a  hex value ,  RGBA color value , or  color name . 8.0+     Config  Type  Description  Default      skin.controlbar.text  String  The color of any plain text in the control bar, such as the time.  \"#FFFFFF\"    skin.controlbar.icons  String  The default, inactive color of all icons in the control bar. This option also controls the color of the play, pause, and replay icons in the inactive and complete states.  \"rgba(255,255,255,0.8)\"    skin.controlbar.iconsActive  String  The color of hovered or selected icons in the control bar.  \"#FFFFFF\"    skin.controlbar.background  String  TThe background color of the control bar and the volume slider. The default background is transparent.  \"rgba(0,0,0,0)\"    skin.timeslider.progress  String  The color of the bar in the time slider filled in from the beginning of the video through the current position. The buffer region of the control bar is 50% of the opacity of this color. The color of the volume slider is also controlled by this option.  \"#F2F2F2\"    skin.timeslider.rail  String  The color of the base of the timeslider, known as the rail.  \"rgba(255,255,255,0.3)\"    skin.menus.text  String  The color of inactive, default text in menus and the Next Up overlay.  \"rgba(255,255,255,0.8)\"    skin.menus.textActive  String  The color of hovered or selected text in menus. This option also controls the text color in the Discover overlay and the hover state text color in the Next Up overlay.  \"#FFFFFF\"    skin.menus.background  String  The background color of menus and the Next Up overlay.  \"#333333\"    skin.tooltips.text  String  The text color of tooltips.  \"#000000\"    skin.tooltips.background  String  The background color of tooltips.  \"#FFFFFF\"", 
            "title": "Color Customization"
        }, 
        {
            "location": "/customization/configuration-reference/#backward-compatability", 
            "text": "JW8 continues to support the three  color customization options  from 7.x,  skin.active ,  skin.inactive ,  skin.background , though the colors may map slightly differently in the new major version.   The table below shows how the three JW7 customization options map to the new JW8 options. You can use both JW7 and JW8 options in an 8 player, with the more specific JW8 configurations overriding JW7 ones when both apply to the same element. Note that there\u2019s no JW7 mapping to the new  skin.timeslider.rail  option.     New JW8 Config  skin.active  skin.inactive  skin.background      skin.controlbar.iconsActive  X      skin.timeslider.progress  X      skin.menus.textActive  X      skin.controlbar.text   X     skin.controlbar.icons   X     skin.menus.text   X     skin.tooltips.text   X     skin.tooltips.background    X    skin.controlbar.background    X    skin.menus.background    X    skin.timeslider.rail  does not map", 
            "title": "Backward Compatability"
        }, 
        {
            "location": "/customization/configuration-reference/#custom-skins", 
            "text": "For more information regarding custom skins, see:  Creating a Skin for JW Player .     Config  Type  Description  Default      skin.url  String  If using an external CSS file to style your player, this must be specified here.  -    skin.name  String  The name of your custom skin to use for styling the player. If you are specifying  skin.url , you must specify  skin.name , which must match the class name in your CSS file.  -     !!!\nThe nine skins available in JW7 have been deprecated. 8.0+ \n!!!", 
            "title": "Custom Skins"
        }, 
        {
            "location": "/customization/configuration-reference/#captions", 
            "text": "This options block configures the styling of closed captions in the player for desktop browsers. On iOS/Android, a system settings menu provides exactly the same settings, as these are mandated by the FCC.     Config  Type  Description  Default      renderCaptionsNatively  Boolean  If true, captions render using the browser's renderer. If false, the player's renderer will be used in all browsers, except for Safari.  Note:  This configuration is not contained within the captions block.  false  8.0.1+    captions.color  String  Hex color of the captions text  \"#ffffff\"    captions.fontSize  Number  Size of the captions text (Will not affect text size when rendering captions via browser)  15    captions.fontFamily  String  Font Family  of the captions text  \"sans\"    captions.fontOpacity  Number  Alpha percentage of the captions text  100    captions.backgroundColor  String  Hex color of the caption characters background  \"#000000\"    captions.backgroundOpacity  Number  Alpha percentage of the caption characters background  75    captions.edgeStyle  String  Method by which the captions characters are separated from their background  \"none\"    captions.windowColor  String  Hex color of the background of the entire captions area  \"#000000\"    captions.windowOpacity  Number  Alpha percentage of the background of the entire captions area  0     !!!\nWhen setting caption styles, color  must  be specified as a  hex value .\n!!!  See  Styling Captions for FCC Compliance  for more information.", 
            "title": "Captions"
        }, 
        {
            "location": "/customization/configuration-reference/#rtmp", 
            "text": "!!!\nThe RTMP format was deprecated in JW8. 8.0+  For 7.x players, see the  JW7 RTMP Configuration Reference  documentation.\n!!!", 
            "title": "RTMP"
        }, 
        {
            "location": "/customization/configuration-reference/#logo", 
            "text": "This options block configures a clickable watermark that is overlayed on the video.     Config  Type  Description  Default      logo.file  String  The URL of an external JPG, PNG or GIF image to be used as watermark (e.g. /assets/logo.png). We recommend using 24 bit PNG images with transparency  -    logo.hide  Boolean  When this option is set to true, the logo will automatically show and hide along with the other player controls  false    logo.link  String  The URL to visit when the watermark image is clicked. Clicking a logo will have no affect unless this is configured  -    logo.margin  Number  The distance, in pixels, of the logo from the edges of the display  20    logo.position  String  This sets the corner in which to display the watermark.  \"control-bar\"  adds the logo as the leftmost icon in the right grouping of buttons in the control bar. 8.0+     \"top-left\"   \"top-right\"  \"bottom-left\"  \"bottom-right\"   \"control-bar\"  \"top-right\"     See  Branding Your Player  for more information.", 
            "title": "Logo"
        }, 
        {
            "location": "/customization/configuration-reference/#sharing", 
            "text": "This options block controls a settings submenu with social sharing options: copy embed code, copy video link and share video to social networks.  Setting an empty  \"sharing\":{}  options block will enable the social sharing menu and icon in the control bar. Without the nested config options, it will show the page URL link with default sharing sites, but no embed code.     Config  Type  Description  Default      sharing.link  String  URL to display in the video link field  URL of the current page    sharing.code  String  Embed code to display in the embed code field. If no code is set, the field is not shown  -    sharing.heading  String  Short, instructive text to display at the top of the sharing screen  \"Share Video\"    sharing.sites  Array  Allows for the customization of social icons  [\"facebook\",\"twitter\",\"email\"]", 
            "title": "Sharing"
        }, 
        {
            "location": "/customization/configuration-reference/#available-built-in-social-networks", 
            "text": "Social Network  Configuration Value   Social Network  Configuration Value      Facebook  \"facebook\"   Tumblr  \"tumblr\"    Twitter  \"twitter\"   Google Plus  \"googleplus\"    Pinterest  \"interest\"   Reddit  \"reddit\"    Email  \"email\"   LinkedIn  \"linkedin\"", 
            "title": "Available Built-In Social Networks"
        }, 
        {
            "location": "/customization/configuration-reference/#example", 
            "text": "jwplayer( myElement ).setup({\n   file :  http://example.com/myVideo.mp4 ,\n   sharing : {\n     sites : [ reddit , facebook , twitter ]\n  }\n});  See our  Social Sharing  support article for more information.", 
            "title": "Example"
        }, 
        {
            "location": "/customization/configuration-reference/#google-analytics-ga", 
            "text": "This options block configures the built-in integration with Google Analytics.     Config  Type  Description  Default      ga.label  String  Send another playlist property, like \"title\" or \"mediaid\", as your event label in Google Analytics  \"file\"     Google's separate  analytics.js  JavaScript library and config needs to be included in your page's head in order to send events with JW Player. Setting an empty  \"ga\":{}  options block will enable basic Google Analytics integration. No additional nested config options are required.  See  Connecting Google Analytics  for more information.", 
            "title": "Google Analytics (ga)"
        }, 
        {
            "location": "/customization/configuration-reference/#related", 
            "text": "This options block controls an overlay with related videos.     Config  Type  Description  Default      related.file  String  (Required)  Location of an RSS or JSON file containing a feed of related videos  -    related.oncomplete  String  The behavior of our related videos overlay when a single video or playlist is completed    \"hide\" : Replay button and related icon will appear    \"show\" : Display the related overlay    \"autoplay\" : automatically play the next video in your related feed after 10 seconds. Automatically sets onclick behavior to  \"play\"  \"show\"    related.onclick  String  The behavior when a related video is selected.   \"play\":  Plays the next video within the current player.    \"link\":   Redirects the page to the url specified in the link field in  related.file .  \"play\"    related.autoplaytimer  Number  The number of seconds to wait before playing the next related video in your content list. Set to 0 to have your next related content to play immediately  10    related.autoplaymessage  String  A custom message that appears during autoplay.    xx  will be replaced by the countdown timer   __title__  will be replaced by the next title in the related feed.  \" _title__ will play in xx seconds\"      See  Display Related Videos  for more information.", 
            "title": "Related"
        }, 
        {
            "location": "/customization/configuration-reference/#advertising", 
            "text": "!!!important\nVideo ad insertion requires a JW Player Enterprise license. Please  contact our team  to upgrade your account.\n!!!  This options block configures the video advertising capabilities of JW Player. If no  schedule  is specified, the ad will play as a preroll by default.     Option  Type  Description  Default      advertising.client  String  (Required for Advertising)  Chooses the ad client that will be used to display advertisements: \"vast\":  Use the JW Player VAST client    \"googima\" : Use the Google IMA SDK - Required for certain ad tags    \"freewheel\" : Use the FreeWheel client  -    advertising.tag  String  The URL of the VAST tag to display, or custom string of the FreeWheel tag to display  -    advertising.admessage  String  Text that displays during ad playback  \"The ad will end in xx seconds\"    advertising.skipoffset  Number  If not present in the VAST file, adds a skip offset to static VAST ads  -    advertising.cuetext  String  Specify the text that appears when a user mouses over a scheduled advertisement  \"Advertisement\"    advertising.skipmessage  String  This is used to provide a customized countdown message  \"Skip ad in xx\"    advertising.skiptext  String  This sets the text of the Skip button after the countdown is over  \"Skip\"    advertising.vpaidmode  String  Used exclusively for  Google IMA VPAID ads \"disabled\":  VPAID ads will not play and an error will be returned if VPAID is requested    \"enabled\" : VPAID is enabled using a cross domain iframe. The VPAID ad cannot access the site. VPAID ads that depend on friendly iframe access may not play \"insecure\":  The VPAID ad will load in a friendly iframe. This allows the ad access to the site via javascript   Not supported in FreeWheel  \"insecure\"    advertising.schedule  String or Object  Load an ad schedule from an external VMAP XML or JSON block.  advertising.tag  is ignored if this option is set  -    advertising.companiondiv  Object  Gives information to the player related to which div(s) to populate with companion ads.   Not supported in FreeWheel  -    advertising.autoplayadsmuted  Boolean  For inline players that start muted when viewed on mobile devices, allows ads to play muted  -    advertising.enablepreloading  Boolean  For disabling ad preloading when using IMA  -    advertising.vpaidcontrols  Boolean  For forcing controls to show for VPAID ads. If the VPAID creative has built-in controls, showing the controls may be redundant  -    advertising.forceNonLinearFullSlot  Boolean  (Only supported when using IMA) For forcing nonlinear ads to be fullsot ads rather than overlays.  -    advertising.setLocale  String  (Only supported when using IMA) Two-letter language code for localization of skip-button language. Two-letter language code must be valid.  -    advertising.creativeTimeout  String  (Only supported when using VAST) In milliseconds, the time between the VAST XML being returned and the adstart event.  15000    advertising.requestTimeout  String  (Only supported when using VAST) In milliseconds, the time between the ad request and a returned VAST file.  5000", 
            "title": "Advertising"
        }, 
        {
            "location": "/customization/configuration-reference/#advertisingschedule", 
            "text": "Use this option to load an entire advertising schedule to JW Player, containing multiple ad breaks. The option can be a URL to a VMAP schedule or an inline JSON block with ads. This schedule will then be applied to each playlist item. For scheduling ads for individual playlist items, see  scheduling ads for playlist items .", 
            "title": "advertising.schedule"
        }, 
        {
            "location": "/customization/configuration-reference/#ad-schedules-with-vmap-files", 
            "text": "If you are planning on using a VMAP file, simply link to a VMAP .xml file within the advertising block.  jwplayer( myElement ).setup({\n   file :  http://example.com/myVideo.mp4 ,\n   advertising : {\n     client :  vast ,\n     schedule :  myvmap.xml \n  }\n});  The VMAP schedule will then be applied to each playlist item. See our article about VMAP schedules for more information.", 
            "title": "Ad Schedules with VMAP Files"
        }, 
        {
            "location": "/customization/configuration-reference/#embedded-ad-schedules-with-json", 
            "text": "In order to use a JSON-formatted schedule, you'll need at least one  ad break  configured inside of an  advertising  block. Each ad break is required to have a unique name, and should include a tag and offset.     Option  Type  Description  Default      advertising.schedule. adbreak .tag  String  The ad tag that is called during the configured ad break  -    advertising.schedule. adbreak .offset  String or Number  When to play the configured ad tag \"pre\":  Ad plays as a preroll  \"post\":  Ad plays as a postroll \"xx%\":  Ad plays after xx% of the content number:  Ad plays after the specified number of seconds  \"pre\"     jwplayer( myElement ).setup({\n   file :  http://example.com/myVideo.mp4 ,\n   advertising : {\n     client :  vast ,\n     schedule : {\n       adbreak-preroll :{\n         tag :  myPreroll.xml ,\n         offset :  pre \n      },\n       adbreak-midroll :{\n         tag :  myMidroll.xml ,\n         offset :  50% \n      }\n    }\n  }\n});     Option  Type  Description  Default      advertising.schedule. adbreak .custParams  Object  Allows for passing custom parameters to an ad break, which then pass through to the URL requested from the ad server  -     advertising : {\n         client :  googima ,\n         adscheduleid :  12345 ,\n         schedule : {\n             preroll : {\n                 custParams : {\n                     testkey1 :  testval1 ,\n                     testkey2 :  testval2 \n                },\n                 tag :  myPreroll.xml ,\n                 offset :  pre \n            }\n        }\n    }", 
            "title": "Embedded Ad Schedules with JSON"
        }, 
        {
            "location": "/customization/configuration-reference/#advertisingcompaniondiv", 
            "text": "This is a configuration block object with 3 properties: id, width and height. Set these to have JW Player load a companion ad from your VAST/IMA tag into a div on your page. See  Companion Ads  for more info.     Option  Type  Description      advertising.companiondiv.height  Number  The targeted desired height of a companion ad that exists in a VAST ad    advertising.companiondiv.width  Number  The targeted desired width of a companion ad that exists in a VAST ad    advertising.companiondiv.id  String  The ID of the div to replace with a companion ad     For an overview of JW Player's advertising capabilities, see its dedicated  Video Ads section .", 
            "title": "advertising.companiondiv"
        }, 
        {
            "location": "/customization/configuration-reference/#drm", 
            "text": "!!!important\nVideo content protection requires a JW Player Enterprise license. Please  contact our team  to upgrade your account.\n!!!  Configuration options related to DRM for MPEG DASH (Playready, Widevine, Clearkey) and HLS streams (Fairplay).  JW Player includes the ability to add DRM to a specific playlist source. Using this method will allow your browser to choose the correct DRM method when multiple DRM types are configured. We  highly  suggest updating any configurations to use this new method.  !!!\nHTTPS is required for all DRM-protected content.\n!!!  For more information regarding DRM, and for examples, please view our  support article .", 
            "title": "DRM"
        }, 
        {
            "location": "/customization/configuration-reference/#drmplayready", 
            "text": "Playready DRM is specific to Internet Explorer 11 and Edge on Windows 8.1 or higher operating systems.     Option  Type  Description  Default      drm.playready.url  String  (Required)  The URL of the PlayReady license server  -    drm.playready.headers  Array  Specifies the custom http headers to send to your playready license server. See  headers  for more information  -", 
            "title": "drm.playready"
        }, 
        {
            "location": "/customization/configuration-reference/#drmwidevine", 
            "text": "Widevine DRM is specific to Google Chrome on non-iOS devices. Widevine will also function on Firefox browsers for desktop systems.     Option  Type  Description  Default      drm.widevine.url  String  (Required)  The URL of the WideVine license server  -    drm.widevine.serverCertificateUrl  String  (Required)  The URL of the WideVine service certificate  -    drm.widevine.headers  Array  Specifies the custom http headers to send to your widevine license server requests. See  headers  for more information  -", 
            "title": "drm.widevine"
        }, 
        {
            "location": "/customization/configuration-reference/#drmwidevineplayreadyheaders", 
            "text": "Adding customized HTTP header data to license requests is possible with the \"headers\" configuration. This replaces the static \"customData\" configuration option in both widevine and playready scenarios. It is also possible to add multiple custom http headers by including multiple objects in the \"headers\" array.  DRM can be configured in the following way:  drm : {\n   playready : {\n   url :  mydrmserver.com \n   headers : [{\n     name :  customData ,\n     value :  hereismycustomdatastring \n    }]\n  }\n}  In previous versions, adding \"customData\" would look like the following:  drm : {\n   playready : {\n   url :  mydrmserver.com \n   customData :  hereismycustomdatastring \n  }\n}     Option  Type  Description      headers.name  String  The name of the http header that will be included    headers.value  String  The value of the http header that will be included", 
            "title": "drm.[widevine/playready].headers"
        }, 
        {
            "location": "/customization/configuration-reference/#drmfairplay", 
            "text": "JW Player includes configuration options for custom Fairplay integrations. For more information and examples regarding custom Fairplay DRM integrations, please view our  support article .     Option  Type  Description      drm.fairplay.certificateUrl  String  (Required)  The path to the certificate which is part of the session data used to initialize the keySession.certificateUrl    drm.fairplay.processSpcUrl  String or Function  (Required)  The path to the license server (server playback context) which provides the ckc. Expects a direct url to the server. If the url needs to be constructed dynamically, a custom function can be passed to this configuration option which returns the url    drm.fairplay.extractContentId  Function  Expects a function that receives the initData uri (converted to a string) from the needkey event, and returns the contentId which is part of the session data used to initialize the keySession    drm.fairplay.licenseRequestHeaders  Array  Expects an Array of Objects containing header \u201cname\u201d and \u201cvalue\u201d properties to be included in the request to the license server    drm.fairplay.licenseResponseType  String  Specifies the data type returned by the XHR request to the license server. The default value is 'arraybuffer'. Other options include 'blob', 'json', and 'text'. This option impacts how \u201clicenseRequestMessage\u201d will be processed    drm.fairplay.licenseRequestMessage  Function  Expects a function that receives the license key message and returns the message to be sent to the license server. With the default \u201clicenseResponseType\u201d of ArrayBuffer this function passes through keymessage event message property without any changes    drm.fairplay.extractKey  Function  Expects a function that receives the ckc returned by the license server and returns the key used to update the active key session. If the key can only be extracted asynchronously (for example reading bytes from a \u2018blob\u2019 response), this function can return a promise", 
            "title": "drm.fairplay"
        }, 
        {
            "location": "/customization/configuration-reference/#drmclearkey", 
            "text": "A basic form of DRM that lists a decryption key inside of your player configuration. This is the least secure form of DRM, though it is the simplest to implement across browsers. There are no additional server resources required to decrypt content with this method. Clearkey is supported in both Chrome and Firefox browsers.     Option  Type  Description      drm.clearkey.key  String  (Required)  The key required to decrypt DRM content    drm.clearkey.keyId  String  (Required)  The key ID specified in the mpd's  default_KID  value", 
            "title": "drm.clearkey"
        }, 
        {
            "location": "/customization/configuration-reference/#localization", 
            "text": "Using the localization block in a player configuration allows you to configure certain words and phrases in the JW Player Next Up interface. The available options are below.     Option  Type  Description  Default      localization.airplay  String  Title of the tooltip for the Airplay icon in the control bar  \"Airplay\"    localization.audioTracks  String  Title of the tooltip for the audio track menu  \"Audio tracks\"    localization.buffer  String  Title of the buffer state  \"Loading\"    localization.cast   String  Title of the tooltip for the Chromecast icon in the control bar  \"Chromecast\"    localization.cc  String  Title of the tooltip for the captions menu  \"Closed captions\"    localization.close  String  Title of tooltip on close icon in Related mode  \"Close\"    localization.fullscreen  String  Title of tooltip to enter fullscreen mode  \"Fullscreen\"    localization.hd   String  Title of the tooltip for the quality menu  \"Quality\"    localization.liveBroadcast  String  Override for the state of a live stream  \"Live broadcast\"    localization.loadingAd  String  Override for the text shown when an ad is loading  \"Loading ad\"    localization.more  String  Override for uses of a prompt to load addition items  \"More\"    localization.next  String  Title of the right arrow in paginated overlays  \"Next\"    localization.nextUp  String  Override for the \"Next Up\" prompt  \"Next Up\"    localization.nextUpClose  String  Title of the tooltip to close the \"Next Up\" prompt  \"Next Up Close\"    localization.pause  String  Tooltip for the pause button  \"Pause\"    localization.play  String  Tooltip for the play button  \"Play\"    localization.playback  String  Override for the play button in an idle state  \"Start playback\"    localization.playbackRates  String  Title of the tooltip for the playback rate controls menu  \"Playback rates\"    localization.player  String  Override for the player application  \"Video Player\"    localization.playlist  String  Title of the Next Up tooltip in Playlist mode  \"Playlist\"    localization.prev  String  Title of the left arrow in paginated overlays  \"Previous\"    localization.related  String  Title of the Next Up tooltip in Related mode  \"Discover\"    localization.replay  String  Title of the tooltip for the replay button shown on completion  \"Replay\"    localization.rewind  String  Title of tooltip for the rewind button in the control bar  \"Rewind 10s\"    localization.volume  String  Tooltip for the volume controls  \"Volume\"", 
            "title": "Localization"
        }, 
        {
            "location": "/release_notes/release_channels/", 
            "text": "Using JW Player Release Channels\n\n\nJW Player supports two release channels. Each channel is automatically updated with the latest player versions available.\n\n\n\n\n\n\nProduction channel:\n This is the default and recommended channel for most customers. The production channel always hosts is the latest stable and tested version. The release has passed our QA team's rigorous manual and automated tests and was already live on the beta channel for a period of time.\n\n\n\n\n\n\nBeta channel:\n This channel has passed our automated tests, but has not been fully verified by the JW Player QA team yet. The beta channel is the place to be if you're interested in previewing releases before they're available to everyone, since the vast majority of players are set to use the the production channel.\n\n\n\n\n\n\nSign up for our \nrelease candidate\n mailing list to get notified when we update the beta channel with a new minor or major release, so you can test and verify new functionality. We don't want to overload your inbox, so we don't send out emails for patch releases.\u200b\n\n\nReleases\n\n\nHere is an outline of what our releases contain and approximately how often they occur.\n\n\n\n\n\n\n\n\nType\n\n\nRelease frequency\n\n\nTime on beta channel before production\n\n\nContents\n\n\nExample version\n\n\n\n\n\n\n\n\n\n\nMajor release\n\n\nEvery 1-2 years\n\n\n4-8 weeks\n\n\nInnovative new features, breaking changes\n\n\n8.0.0\n\n\n\n\n\n\nMinor release\n\n\nEvery 4-8 weeks\n\n\n1-2 weeks\n\n\nImproved and new features, bug fixes\n\n\n8.1.0\n\n\n\n\n\n\nPatch release\n\n\nEvery 1-4 weeks\n\n\n1-3 days\n\n\nQuick, generally urgent bug fixes with no new functionality\n\n\n8.1.1\n\n\n\n\n\n\n\n\nSelecting a Channel\n\n\nChannels can easily be set at the player level directly within the Player Builder.\n\n\nUsing JW8:\n\n\n\n\nNavigate to your Players.\n\n\nCreate or edit an existing player.\n\n\nSelect a channel beneath the player preview on the right side.\n\n\n\n\n\n\nUsing JW7:\n\n\n\n\nNavigate to your Players.\n\n\nCreate or edit an existing player.\n\n\nSelect a channel under the Advanced tab.\n\n\n\n\n\n\nYou can also use our \nPlatform API\n to set the channel for a particular player.", 
            "title": "Using Release Channels"
        }, 
        {
            "location": "/release_notes/release_channels/#using-jw-player-release-channels", 
            "text": "JW Player supports two release channels. Each channel is automatically updated with the latest player versions available.    Production channel:  This is the default and recommended channel for most customers. The production channel always hosts is the latest stable and tested version. The release has passed our QA team's rigorous manual and automated tests and was already live on the beta channel for a period of time.    Beta channel:  This channel has passed our automated tests, but has not been fully verified by the JW Player QA team yet. The beta channel is the place to be if you're interested in previewing releases before they're available to everyone, since the vast majority of players are set to use the the production channel.    Sign up for our  release candidate  mailing list to get notified when we update the beta channel with a new minor or major release, so you can test and verify new functionality. We don't want to overload your inbox, so we don't send out emails for patch releases.\u200b", 
            "title": "Using JW Player Release Channels"
        }, 
        {
            "location": "/release_notes/release_channels/#releases", 
            "text": "Here is an outline of what our releases contain and approximately how often they occur.     Type  Release frequency  Time on beta channel before production  Contents  Example version      Major release  Every 1-2 years  4-8 weeks  Innovative new features, breaking changes  8.0.0    Minor release  Every 4-8 weeks  1-2 weeks  Improved and new features, bug fixes  8.1.0    Patch release  Every 1-4 weeks  1-3 days  Quick, generally urgent bug fixes with no new functionality  8.1.1", 
            "title": "Releases"
        }, 
        {
            "location": "/release_notes/release_channels/#selecting-a-channel", 
            "text": "Channels can easily be set at the player level directly within the Player Builder.  Using JW8:   Navigate to your Players.  Create or edit an existing player.  Select a channel beneath the player preview on the right side.    Using JW7:   Navigate to your Players.  Create or edit an existing player.  Select a channel under the Advanced tab.    You can also use our  Platform API  to set the channel for a particular player.", 
            "title": "Selecting a Channel"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/", 
            "text": "!!!\nThis page has been updated for JW Player 8. Click here to go to the \nJW7 CSS Skinning Reference\n.\n!!!\n\n\nCSS Skinning Reference\n\n\nThis article acts as a reference for styling all interface components of JW Player 8. This skinning model uses CSS, and all controls are overlaid on top of the player with HTML. JW8 uses inline SVGs for all icons.\n\n\nWhen styling these elements, there are a few conventions to keep in mind. All internal classes are prefixed with \njw-\n in order to protect the player from external stylesheets. The original DOM element that we initialize is called the Main Div.\n\n\nA \nJW Player skin\n CSS file contains classes that are grouped into functional elements. This reference provides an elaborate overview the classes used. For additional information, check out a reference css file.\n\n\n\n\nMain Div\n\n\nThe main div will be given a class \njwplayer\n. It is strongly advised to \nnot\n add any additional inline styling on this div besides what is included in your skin css file.\n\n\n\n\nPlayer States\n\n\nThe state of the player is reflected in the DOM by a class on the main div. It will always contain one of the following:\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-state-playing\n\n\nWhile content is playing\n\n\n\n\n\n\n.jw-state-paused\n\n\nWhile content is paused\n\n\n\n\n\n\n.jw-state-buffering\n\n\nWhile content is buffering\n\n\n\n\n\n\n.jw-state-idle\n\n\nBefore pressing play\n\n\n\n\n\n\n.jw-state-complete\n\n\nAfter playlist completes\n\n\n\n\n\n\n\n\nFlags\n\n\nSometimes the player needs to signify certain modes of the playback. These flags will be present on the main div and can be:\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-flag-fullscreen\n\n\nWhen the player is in fullscreen\n\n\n\n\n\n\n.jw-flag-live\n\n\nWhen the player is playing back live video\n\n\n\n\n\n\n.jw-flag-user-inactive\n\n\nAdded after a few minutes of inactivity\n\n\n\n\n\n\n.jw-flag-controlbar-only\n\n\nPlayer is less than 30 pixels tall\n\n\n\n\n\n\n.jw-flag-media-audio\n\n\nContent being played is an audio file\n\n\n\n\n\n\n.jw-flag-dragging\n\n\nMouse down with cursor over control bar\n\n\n\n\n\n\n.jw-flag-aspect-mode\n\n\nEnable a padding to create an aspect ratio\n\n\n\n\n\n\n\n\n\n\nColors\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-background-color\n\n\nThis is a class that will add a set of style to all interface elements without having to change it for each individual class.\n\n\n\n\n\n\n\n\nWe advise only using \n.jw-background-color\n for color and not other CSS properties. The player will add this class to the following elements:\n\n\n\n\n.jw-display-icon-container\n\n\n.jw-controlbar\n\n\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-button-color\n\n\nThis is a class that player will add to specific elements when color is overridden from within the player configuration setup. You can also use this to easily change all button colors in your skin. The player will add this class all icons.\n\n\n\n\n\n\n.jw-button-color:hover\n\n\nThis will adjust the color of all buttons when they are hovered on.\n\n\n\n\n\n\n\n\n\n\nPoster Images\n\n\nThese define how the poster image will be stretched to fill the space given. Internally this state is used to stretch the player using JS.\n\n\n\n\n.jw-stretch-none\n\n\n.jw-stretch-uniform\n\n\n.jw-stretch-fill\n\n\n.jw-stretch-exactfit\n\n\n\n\n\n\nControls\n\n\nAll player controls are within the \n.jw-controls\n class. When JW Player is set to \ncontrols: false\n, this entire class has a visibility of hidden. To not include a specific item in your skin, you will need to override the style with a visibility or display of none.\n\n\n\n\n\n\n\n\nGroup\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nDisplay\n\n\nThe set of icons in the center of the player\n\n\n\n\n\n\nControlbar\n\n\nThe playback controls for the player\n\n\n\n\n\n\nMenus\n\n\nExtensions of the controlbar that display additional information\n\n\n\n\n\n\nLogo\n\n\nA logo displayed for branding purposes\n\n\n\n\n\n\nPreview\n\n\nThe video's poster image\n\n\n\n\n\n\n\n\nDisplay\n\n\nThe display component contains the main element container for the (re)play, buffer and error icons in the middle of the screen. To add styles to these containers based on states you will need to add the state classes in your stylesheet.\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-display-icon-container\n\n\nUsed to style the container in which the display icons are.\n\n\n\n\n\n\n.jw-icon-display\n\n\nUsed to style icons that appear in the display container. The icon that is rendered depends on the state the player is in.\n\n\n\n\n\n\n\n\nControlbar\n\n\nThe controlbar component contains all elements for the video controls at the bottom of the player. All elements are contained within the \n.jw-controlbar\n parent class and broken out into two groups, \n.jw-slider-time\n and \n.jw-button-container\n.\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-slider-time\n\n\nUsed to position the player timeslider above playback controls\n\n\n\n\n\n\n.jw-button-container\n\n\nUsed to group and position specific playback controls\n\n\n\n\n\n\n\n\nSlider Time\n\n\nThe center group contains the elements that make up the player's timeslider.\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-slider-horizontal .jw-slider-container\n\n\nThe containers that hold the timeslider elements\n\n\n\n\n\n\n.jw-rail\n\n\nSets the style for the base layer of the slider\n\n\n\n\n\n\n.jw-buffer\n\n\nSets the style for the how much of video has been buffered, which is layered on top of \n.jw-rail\n\n\n\n\n\n\n.jw-progress\n\n\nSets the style for the elapsed video, which is layered on top of \n.jw-buffer\n\n\n\n\n\n\n.jw-knob\n\n\nThis marks the tip of the progress rail, used to indicate where playback is currently\n\n\n\n\n\n\n.jw-slider-horizontal .jw-cue\n\n\nThis class is used for timeslider cuepoints, like chapters and ad breaks\n\n\n\n\n\n\n\n\nButton Container\n\n\nThe button container contains playback controls, elapsed and duration time, and the settings menu:\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-icon-playback\n\n\nContainer that holds the play/pause icons. This icon will toggle depending on the state of the player\n\n\n\n\n\n\n.jw-icon-rewind\n\n\nContainer that holds the \"rewind\" icon\n\n\n\n\n\n\n.jw-icon-next\n\n\nPlayback control to advance to the next playlist item.\n\n\n\n\n\n\n.jw-icon-volume\n\n\nContainer that holds the volume icon. The player will automatically add an overlay to the hover state of this div that contains the slider volume.\n\n\n\n\n\n\n.jw-icon-volume .jw-off\n\n\nWhen the player is muted the .jw-off class gets added to toggle the volume off icon.\n\n\n\n\n\n\n.jw-icon-live\n\n\nContainer for live and dvr icons. This icon will toggle depending on the state of the player.\n\n\n\n\n\n\n.jw-text-elapsed\n\n\nContainer for the elapsed video time.\n\n\n\n\n\n\n.jw-text-duration\n\n\nContainer for the total duration of the media file.\n\n\n\n\n\n\n.jw-settings-sharing\n\n\nContainer for the sharing icon. This will only show when sharing is enabled.\n\n\n\n\n\n\n.jw-playlist-btn\n\n\nContainer for playlist icon. This icon represents the player using a manual playlist for related content.\n\n\n\n\n\n\n.jw-related-btn\n\n\nContainer for discover icon. This icon represents the player using recommendations for related content based on the mediaID.\n\n\n\n\n\n\n.jw-icon-cc\n\n\nContainer for the closed-caption CC icon. This icon will toggle to an on and off state depending on whether closed captions are enabled or not.\n\n\n\n\n\n\n.jw-icon-cast\n\n\nThis container will display the Chromecast or Airplay icon depending on which feature is available.\n\n\n\n\n\n\n.jw-icon-settings\n\n\nContainer for the settings menu icon.\n\n\n\n\n\n\n.jw-icon-fullscreen\n\n\nContainer for enter and exit fullscreen icons. This icon will toggle between fullscreen on and off depending on the state of the player.\n\n\n\n\n\n\n\n\n\n\nBreak Points\n\n\nBreakpoint classes are added to the player element based on the width of the player, not the device or browser. Because JW Player instances are embedded via an iframe, the usual @media query will not work for defining CSS declarations to make elements responsive. Breakpoints are global classes that can be used to make responsive CSS declarations for any customizable player element.\n\n\n\n\n\n\n\n\nBreak Point\n\n\nWidth Intervals (px)\n\n\n\n\n\n\n\n\n\n\n.jw-breakpoint-0\n\n\nPlayer width: 0-319\n\n\n\n\n\n\n.jw-breakpoint-1\n\n\nPlayer width: 320-419\n\n\n\n\n\n\n.jw-breakpoint-2\n\n\nPlayer width: 420-539\n\n\n\n\n\n\n.jw-breakpoint-3\n\n\nPlayer width: 540-639\n\n\n\n\n\n\n.jw-breakpoint-4\n\n\nPlayer width: 640-799\n\n\n\n\n\n\n.jw-breakpoint-5\n\n\nPlayer width: 800-959\n\n\n\n\n\n\n.jw-breakpoint-6\n\n\nPlayer width: 960-1279\n\n\n\n\n\n\n.jw-breakpoint-7\n\n\nPlayer width: 1280+\n\n\n\n\n\n\n\n\nExamples\n\n\nMake font size smaller only when player width is under 420px wide:\n\n\n.jw-breakpoint-0 .jw-related-item-description {\nfont-size: 11px;\n}\n\n\n\n\nFor medium-sized player widths, make the font size bigger:\n\n\n.jw-breakpoint-3 .jw-related-item-description,\n.jw-breakpoint-4 .jw-related-item-description {\n  font-size: 16px;\n}\n\n\n\n\n\n\nSettings Menu and Submenus\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-settings-menu\n\n\nThis container creates a menu based on what playback features are enabled for the player.\n\n\n\n\n\n\n.jw-settings-submenu\n\n\nA submenu is created to list available options for each menu feature.\n\n\n\n\n\n\n.jw-settings-content-item\n\n\nThis container is populated with the options related to each submenu.\n\n\n\n\n\n\n\n\nTooltips and Overlays\n\n\nJW Player will automatically populate overlay divs on mouseover/touch of certain interface elements. These include the timeslider thumbnail preview, volume slider and on-hover tooltips for controlbar icons.\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-overlay\n\n\nAll overlays are wrapped in this class. It is not advised to modify this class but rather the containers within this class. This class when appended to the parent controlbar class will position the overlays.\n\n\n\n\n\n\n.jw-tooltip\n\n\nOn-hover tooltips containning labels for controlbar icons.\n\n\n\n\n\n\n\n\nTitle and Preview Image\n\n\nThe title and description configuration options are displayed in their own classes overlaid on the player.\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-title\n\n\nThis is the wrapper class the text overlays.\n\n\n\n\n\n\n.jw-title-primary\n\n\nThis class is populated with content from the title configuration option from the player setup.\n\n\n\n\n\n\n.jw-title-secondary\n\n\nThis class is populated with content from the description configuration option in the player setup per-playlist item.\n\n\n\n\n\n\n.jw-preview\n\n\nThis class styles the preview image from the image configuration option in the player setup per-playlist item.\n\n\n\n\n\n\n\n\nDiscovery Overlay\n\n\nThe discovery overlay displays recommended content related to the current media file. The overlay uses \nbreakpoints\n to select the proper format and amount of items to display.\n\n\nCustomization\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-plugin-related\n\n\nCustomize the background color of the related overlay\n\n\n\n\n\n\n.jw-related-item-content\n\n\nCustomize the background and border color of related items\n\n\n\n\n\n\n.jw-related-item-content:hover\n\n\nCustomize the background and border color of related items when hovering\n\n\n\n\n\n\n.jw-related-item-duration\n\n\nCustomize the next-up related item duration text\n\n\n\n\n\n\n.jw-related-item-play\n\n\nCustomize the next-up related item play button\n\n\n\n\n\n\n.jw-related-item-title strong\n\n\nCustomize the next-up related item \"Next Up\" text\n\n\n\n\n\n\n.jw-related-item-title span\n\n\nCustomize related item title text\n\n\n\n\n\n\n.jw-related-item-title .jw-item-index-text em\n\n\nCustomize related item title (for playlists) text\n\n\n\n\n\n\n.jw-related-item-description\n\n\nCustomize related item description text (Auto-advance only)\n\n\n\n\n\n\n.jw-related-autoplay-frame\n\n\nCustomize related item autoplay progress (Auto-advance only)\n\n\n\n\n\n\n.jw-related-autoplay-frame-progress\n\n\nCustomize related item autoplay progress (Auto-advance only)\n\n\n\n\n\n\n.jw-related-item-content:hover .jw-related-autoplay-frame-progress\n\n\nCustomize elements in hover state (falls under .jw-related-item-content:hover)\n\n\n\n\n\n\n\n\nSelectors\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-plugin-related\n\n\nParent container for related overlay plugin that covers the player viewport when visible.\n\n\n\n\n\n\n.jw-related-close\n\n\nRelated overlay close icon button\n\n\n\n\n\n\n.jw-related-item-content\n\n\nItem content area\n\n\n\n\n\n\n.jw-related-item-poster\n\n\nPoster image container (poster image is set via inline style background image on this element)\n\n\n\n\n\n\n.jw-related-item-duration\n\n\nItem duration text\n\n\n\n\n\n\n.jw-related-item-play\n\n\nNext-up item play button container\n\n\n\n\n\n\n.jw-related-item-play .jw-display-icon\n\n\nNext-up item play button icon\n\n\n\n\n\n\n.jw-related-item-title-content\n\n\nTitle text\n\n\n\n\n\n\n.jw-related-item-description-content\n\n\nDescription text\n\n\n\n\n\n\n.jw-related-autoplay-frame\n\n\nItem autoplay border\n\n\n\n\n\n\n.jw-related-autoplay-frame-progress\n\n\nItem autoplay progress border\n\n\n\n\n\n\n\n\nNext Up Card\n\n\nThe next up card displays prior to a video's completion, showing information about the following media item.\n\n\nCustomization\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-nextup-header\n\n\nCustomize the top bar with \"Next Up\" label\n\n\n\n\n\n\n.jw-nextup-body\n\n\nCustomize the thumbnail/title group container\n\n\n\n\n\n\n.jw-nextup-thumbnail\n\n\nCustomize the next up item thumbnail\n\n\n\n\n\n\n.jw-nextup-title\n\n\nCustomize the next up item title\n\n\n\n\n\n\n.jw-nextup-close\n\n\nCustomize the close button\n\n\n\n\n\n\n.jw-nextup-close:hover\n\n\nCustomize the close button hover state\n\n\n\n\n\n\n\n\nSelectors\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\nType\n\n\n\n\n\n\n\n\n\n\n.jw-nextup-container\n\n\nParent container for next up (hidden by default) that positions the next up display in the player.\n\n\ndefault\n\n\n\n\n\n\n.jw-nextup-container-visible\n\n\nAdd-on class for next up parent container that transitions the next up display to visible state.\n\n\nstate\n\n\n\n\n\n\n.jw-nextup\n\n\nSecond container element for next up with \nposition: relative\n CSS property set to enable absolute positioning of the close button.\n\n\ndefault\n\n\n\n\n\n\n.jw-nextup-header\n\n\nTop bar element for next up that contains the \"Next Up\" label text.\n\n\ndefault\n\n\n\n\n\n\n.jw-nextup-body\n\n\nGrouping container element for the next up thumbnail and title.\n\n\ndefault\n\n\n\n\n\n\n.jw-nextup-thumbnail\n\n\nThumbnail element for next up display (hidden by default). Element uses inline style \nbackground-image: url(thumbnail.jpg);\n in addition to \nbackground-size: cover\n to accommodate displaying any thumbnail size in an elegant way.\n\n\ndefault\n\n\n\n\n\n\n.jw-nextup-thumbnail-visible\n\n\nModifier class that makes the next up thumbnail element visible (set when next up item has a thumbnail).\n\n\nstate\n\n\n\n\n\n\n.jw-nextup-title\n\n\nTitle text element for next up display.\n\n\ndefault\n\n\n\n\n\n\n.jw-nextup-close\n\n\nClose button for next up (hidden by default) which hides the display when clicked.\n\n\ndefault\n\n\n\n\n\n\n.jw-nextup-sticky .jw-nextup-close\n\n\nState to show close button for next up display (shown when nearing end of current video).\n\n\nstate", 
            "title": "CSS Skinning Reference"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#css-skinning-reference", 
            "text": "This article acts as a reference for styling all interface components of JW Player 8. This skinning model uses CSS, and all controls are overlaid on top of the player with HTML. JW8 uses inline SVGs for all icons.  When styling these elements, there are a few conventions to keep in mind. All internal classes are prefixed with  jw-  in order to protect the player from external stylesheets. The original DOM element that we initialize is called the Main Div.  A  JW Player skin  CSS file contains classes that are grouped into functional elements. This reference provides an elaborate overview the classes used. For additional information, check out a reference css file.", 
            "title": "CSS Skinning Reference"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#main-div", 
            "text": "The main div will be given a class  jwplayer . It is strongly advised to  not  add any additional inline styling on this div besides what is included in your skin css file.", 
            "title": "Main Div"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#player-states", 
            "text": "The state of the player is reflected in the DOM by a class on the main div. It will always contain one of the following:     CSS Class  Definition      .jw-state-playing  While content is playing    .jw-state-paused  While content is paused    .jw-state-buffering  While content is buffering    .jw-state-idle  Before pressing play    .jw-state-complete  After playlist completes", 
            "title": "Player States"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#flags", 
            "text": "Sometimes the player needs to signify certain modes of the playback. These flags will be present on the main div and can be:     CSS Class  Definition      .jw-flag-fullscreen  When the player is in fullscreen    .jw-flag-live  When the player is playing back live video    .jw-flag-user-inactive  Added after a few minutes of inactivity    .jw-flag-controlbar-only  Player is less than 30 pixels tall    .jw-flag-media-audio  Content being played is an audio file    .jw-flag-dragging  Mouse down with cursor over control bar    .jw-flag-aspect-mode  Enable a padding to create an aspect ratio", 
            "title": "Flags"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#colors", 
            "text": "CSS Class  Definition      .jw-background-color  This is a class that will add a set of style to all interface elements without having to change it for each individual class.     We advise only using  .jw-background-color  for color and not other CSS properties. The player will add this class to the following elements:   .jw-display-icon-container  .jw-controlbar      CSS Class  Definition      .jw-button-color  This is a class that player will add to specific elements when color is overridden from within the player configuration setup. You can also use this to easily change all button colors in your skin. The player will add this class all icons.    .jw-button-color:hover  This will adjust the color of all buttons when they are hovered on.", 
            "title": "Colors"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#poster-images", 
            "text": "These define how the poster image will be stretched to fill the space given. Internally this state is used to stretch the player using JS.   .jw-stretch-none  .jw-stretch-uniform  .jw-stretch-fill  .jw-stretch-exactfit", 
            "title": "Poster Images"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#controls", 
            "text": "All player controls are within the  .jw-controls  class. When JW Player is set to  controls: false , this entire class has a visibility of hidden. To not include a specific item in your skin, you will need to override the style with a visibility or display of none.     Group  Definition      Display  The set of icons in the center of the player    Controlbar  The playback controls for the player    Menus  Extensions of the controlbar that display additional information    Logo  A logo displayed for branding purposes    Preview  The video's poster image", 
            "title": "Controls"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#display", 
            "text": "The display component contains the main element container for the (re)play, buffer and error icons in the middle of the screen. To add styles to these containers based on states you will need to add the state classes in your stylesheet.     CSS Class  Definition      .jw-display-icon-container  Used to style the container in which the display icons are.    .jw-icon-display  Used to style icons that appear in the display container. The icon that is rendered depends on the state the player is in.", 
            "title": "Display"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#controlbar", 
            "text": "The controlbar component contains all elements for the video controls at the bottom of the player. All elements are contained within the  .jw-controlbar  parent class and broken out into two groups,  .jw-slider-time  and  .jw-button-container .     CSS Class  Definition      .jw-slider-time  Used to position the player timeslider above playback controls    .jw-button-container  Used to group and position specific playback controls", 
            "title": "Controlbar"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#slider-time", 
            "text": "The center group contains the elements that make up the player's timeslider.     CSS Class  Definition      .jw-slider-horizontal .jw-slider-container  The containers that hold the timeslider elements    .jw-rail  Sets the style for the base layer of the slider    .jw-buffer  Sets the style for the how much of video has been buffered, which is layered on top of  .jw-rail    .jw-progress  Sets the style for the elapsed video, which is layered on top of  .jw-buffer    .jw-knob  This marks the tip of the progress rail, used to indicate where playback is currently    .jw-slider-horizontal .jw-cue  This class is used for timeslider cuepoints, like chapters and ad breaks", 
            "title": "Slider Time"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#button-container", 
            "text": "The button container contains playback controls, elapsed and duration time, and the settings menu:     CSS Class  Definition      .jw-icon-playback  Container that holds the play/pause icons. This icon will toggle depending on the state of the player    .jw-icon-rewind  Container that holds the \"rewind\" icon    .jw-icon-next  Playback control to advance to the next playlist item.    .jw-icon-volume  Container that holds the volume icon. The player will automatically add an overlay to the hover state of this div that contains the slider volume.    .jw-icon-volume .jw-off  When the player is muted the .jw-off class gets added to toggle the volume off icon.    .jw-icon-live  Container for live and dvr icons. This icon will toggle depending on the state of the player.    .jw-text-elapsed  Container for the elapsed video time.    .jw-text-duration  Container for the total duration of the media file.    .jw-settings-sharing  Container for the sharing icon. This will only show when sharing is enabled.    .jw-playlist-btn  Container for playlist icon. This icon represents the player using a manual playlist for related content.    .jw-related-btn  Container for discover icon. This icon represents the player using recommendations for related content based on the mediaID.    .jw-icon-cc  Container for the closed-caption CC icon. This icon will toggle to an on and off state depending on whether closed captions are enabled or not.    .jw-icon-cast  This container will display the Chromecast or Airplay icon depending on which feature is available.    .jw-icon-settings  Container for the settings menu icon.    .jw-icon-fullscreen  Container for enter and exit fullscreen icons. This icon will toggle between fullscreen on and off depending on the state of the player.", 
            "title": "Button Container"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#break-points", 
            "text": "Breakpoint classes are added to the player element based on the width of the player, not the device or browser. Because JW Player instances are embedded via an iframe, the usual @media query will not work for defining CSS declarations to make elements responsive. Breakpoints are global classes that can be used to make responsive CSS declarations for any customizable player element.     Break Point  Width Intervals (px)      .jw-breakpoint-0  Player width: 0-319    .jw-breakpoint-1  Player width: 320-419    .jw-breakpoint-2  Player width: 420-539    .jw-breakpoint-3  Player width: 540-639    .jw-breakpoint-4  Player width: 640-799    .jw-breakpoint-5  Player width: 800-959    .jw-breakpoint-6  Player width: 960-1279    .jw-breakpoint-7  Player width: 1280+", 
            "title": "Break Points"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#examples", 
            "text": "Make font size smaller only when player width is under 420px wide:  .jw-breakpoint-0 .jw-related-item-description {\nfont-size: 11px;\n}  For medium-sized player widths, make the font size bigger:  .jw-breakpoint-3 .jw-related-item-description,\n.jw-breakpoint-4 .jw-related-item-description {\n  font-size: 16px;\n}", 
            "title": "Examples"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#settings-menu-and-submenus", 
            "text": "CSS Class  Definition      .jw-settings-menu  This container creates a menu based on what playback features are enabled for the player.    .jw-settings-submenu  A submenu is created to list available options for each menu feature.    .jw-settings-content-item  This container is populated with the options related to each submenu.", 
            "title": "Settings Menu and Submenus"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#tooltips-and-overlays", 
            "text": "JW Player will automatically populate overlay divs on mouseover/touch of certain interface elements. These include the timeslider thumbnail preview, volume slider and on-hover tooltips for controlbar icons.     CSS Class  Definition      .jw-overlay  All overlays are wrapped in this class. It is not advised to modify this class but rather the containers within this class. This class when appended to the parent controlbar class will position the overlays.    .jw-tooltip  On-hover tooltips containning labels for controlbar icons.", 
            "title": "Tooltips and Overlays"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#title-and-preview-image", 
            "text": "The title and description configuration options are displayed in their own classes overlaid on the player.     CSS Class  Definition      .jw-title  This is the wrapper class the text overlays.    .jw-title-primary  This class is populated with content from the title configuration option from the player setup.    .jw-title-secondary  This class is populated with content from the description configuration option in the player setup per-playlist item.    .jw-preview  This class styles the preview image from the image configuration option in the player setup per-playlist item.", 
            "title": "Title and Preview Image"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#discovery-overlay", 
            "text": "The discovery overlay displays recommended content related to the current media file. The overlay uses  breakpoints  to select the proper format and amount of items to display.", 
            "title": "Discovery Overlay"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#customization", 
            "text": "CSS Class  Definition      .jw-plugin-related  Customize the background color of the related overlay    .jw-related-item-content  Customize the background and border color of related items    .jw-related-item-content:hover  Customize the background and border color of related items when hovering    .jw-related-item-duration  Customize the next-up related item duration text    .jw-related-item-play  Customize the next-up related item play button    .jw-related-item-title strong  Customize the next-up related item \"Next Up\" text    .jw-related-item-title span  Customize related item title text    .jw-related-item-title .jw-item-index-text em  Customize related item title (for playlists) text    .jw-related-item-description  Customize related item description text (Auto-advance only)    .jw-related-autoplay-frame  Customize related item autoplay progress (Auto-advance only)    .jw-related-autoplay-frame-progress  Customize related item autoplay progress (Auto-advance only)    .jw-related-item-content:hover .jw-related-autoplay-frame-progress  Customize elements in hover state (falls under .jw-related-item-content:hover)", 
            "title": "Customization"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#selectors", 
            "text": "CSS Class  Definition      .jw-plugin-related  Parent container for related overlay plugin that covers the player viewport when visible.    .jw-related-close  Related overlay close icon button    .jw-related-item-content  Item content area    .jw-related-item-poster  Poster image container (poster image is set via inline style background image on this element)    .jw-related-item-duration  Item duration text    .jw-related-item-play  Next-up item play button container    .jw-related-item-play .jw-display-icon  Next-up item play button icon    .jw-related-item-title-content  Title text    .jw-related-item-description-content  Description text    .jw-related-autoplay-frame  Item autoplay border    .jw-related-autoplay-frame-progress  Item autoplay progress border", 
            "title": "Selectors"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#next-up-card", 
            "text": "The next up card displays prior to a video's completion, showing information about the following media item.", 
            "title": "Next Up Card"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#customization_1", 
            "text": "CSS Class  Definition      .jw-nextup-header  Customize the top bar with \"Next Up\" label    .jw-nextup-body  Customize the thumbnail/title group container    .jw-nextup-thumbnail  Customize the next up item thumbnail    .jw-nextup-title  Customize the next up item title    .jw-nextup-close  Customize the close button    .jw-nextup-close:hover  Customize the close button hover state", 
            "title": "Customization"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#selectors_1", 
            "text": "CSS Class  Definition  Type      .jw-nextup-container  Parent container for next up (hidden by default) that positions the next up display in the player.  default    .jw-nextup-container-visible  Add-on class for next up parent container that transitions the next up display to visible state.  state    .jw-nextup  Second container element for next up with  position: relative  CSS property set to enable absolute positioning of the close button.  default    .jw-nextup-header  Top bar element for next up that contains the \"Next Up\" label text.  default    .jw-nextup-body  Grouping container element for the next up thumbnail and title.  default    .jw-nextup-thumbnail  Thumbnail element for next up display (hidden by default). Element uses inline style  background-image: url(thumbnail.jpg);  in addition to  background-size: cover  to accommodate displaying any thumbnail size in an elegant way.  default    .jw-nextup-thumbnail-visible  Modifier class that makes the next up thumbnail element visible (set when next up item has a thumbnail).  state    .jw-nextup-title  Title text element for next up display.  default    .jw-nextup-close  Close button for next up (hidden by default) which hides the display when clicked.  default    .jw-nextup-sticky .jw-nextup-close  State to show close button for next up display (shown when nearing end of current video).  state", 
            "title": "Selectors"
        }, 
        {
            "location": "/customization/css-skinning-model/", 
            "text": "", 
            "title": "CSS Skinning Model"
        }, 
        {
            "location": "/customization/css-skinning/skins_creating/", 
            "text": "!!!\nThis page has been updated for JW Player 8. Click here to go to the \nJW7 Custom Skins reference\n.\n!!!\n\n\nCustom Skins\n\n\nThe nine complimentary skins offered in JW7 have been deprecated in JW8, but customizing JW Player is easy with JW Player 8's CSS-based skinning model. \n\n\nTo configure colors only, our \n11 skin color configuration options\n, which can be defined inside the player setup, may be sufficient. For more advanced users, the rest of this page will explain how to create your own custom skin and load it into your JW Player.\n\n\nCreating your Style\n\n\nFirst, you will need to give your custom skin a name, which will be used to enable it within a player. The given name will be added into the jwplayer element and can be used to overwrite styles. The actual skin name should be appeneded to the \n.jw-skin-\n prefix. Our below example is altering our display icon container, and is going to be called \nmyskin\n:\n\n\n.jwplayer.jw-skin-myskin .jw-display-icon-container {\n    border-style: solid;\n    border-width: medium;\n    border-radius: 50%;\n    padding: 1em;\n}\n\n\n\n\nUpon embedding the player, you \nmust\n ensure to set your \"skin\" configuration option to the name specified in your skin. Read more in our \nconfiguration options reference\n. \n\n\nImplementing your CSS\n\n\nThere are currently \ntwo\n options to implement the above CSS modifications with JW8. One of these methods is \nmuch\n preferred to maintain optimal rendering performance.\n\n\nOption 1: Referencing the CSS on the page itself (Best Practice)\n\n\nDirectly embedding your CSS allows for your styles to load at the same time as your page. If we've placed the above CSS into a file (Which we'll call \nmyskinfile.css\n), we can reference our .css file by placing the following in our HTML page's head:\n\n\nlink rel=\nstylesheet\n type=\ntext/css\n href=\n//yoursite.com/yourstyles/myskinfile.css\n \n/link\n\n\n\n\n\nOnce the above is loaded, your player configuration will still need to reference the style appended to \n.jw-skin-\n within the \nskin.name\n configuration. In this case, we've called this \nmyskin\n\n\njwplayer('myElement')setup({\n    \nskin\n: {\n        \nname\n: \nmyskin\n\n    }\n});\n\n\n\n\nOption 2: Configuring the CSS URL within \nskin.url\n\n\nIt is possible to reference your CSS file's \nurl\n within the \nskin\n block of your JW Player embed. This is less preferred, as it requires the player to load your CSS file during setup. Because of this, the rendering of your player may slow down.\n\n\njwplayer('myElement').setup({\n    \nskin\n : {\n        \nurl\n:\n//yoursite.com/yourstyles/myskinfile.css\n,\n        \nname\n: \nmyskin\n\n    }\n});\n\n\n\n\nDue to possibly impacting rendering speed, option 2 should only be used if you do not have access to the HTML on the page where your player will be rendered.\n\n\nFor a complete list of class names that are able to be overridden, please see our \nCSS Skin Reference\n.", 
            "title": "Custom Skins"
        }, 
        {
            "location": "/customization/css-skinning/skins_creating/#custom-skins", 
            "text": "The nine complimentary skins offered in JW7 have been deprecated in JW8, but customizing JW Player is easy with JW Player 8's CSS-based skinning model.   To configure colors only, our  11 skin color configuration options , which can be defined inside the player setup, may be sufficient. For more advanced users, the rest of this page will explain how to create your own custom skin and load it into your JW Player.", 
            "title": "Custom Skins"
        }, 
        {
            "location": "/customization/css-skinning/skins_creating/#creating-your-style", 
            "text": "First, you will need to give your custom skin a name, which will be used to enable it within a player. The given name will be added into the jwplayer element and can be used to overwrite styles. The actual skin name should be appeneded to the  .jw-skin-  prefix. Our below example is altering our display icon container, and is going to be called  myskin :  .jwplayer.jw-skin-myskin .jw-display-icon-container {\n    border-style: solid;\n    border-width: medium;\n    border-radius: 50%;\n    padding: 1em;\n}  Upon embedding the player, you  must  ensure to set your \"skin\" configuration option to the name specified in your skin. Read more in our  configuration options reference .", 
            "title": "Creating your Style"
        }, 
        {
            "location": "/customization/css-skinning/skins_creating/#implementing-your-css", 
            "text": "There are currently  two  options to implement the above CSS modifications with JW8. One of these methods is  much  preferred to maintain optimal rendering performance.", 
            "title": "Implementing your CSS"
        }, 
        {
            "location": "/customization/css-skinning/skins_creating/#option-1-referencing-the-css-on-the-page-itself-best-practice", 
            "text": "Directly embedding your CSS allows for your styles to load at the same time as your page. If we've placed the above CSS into a file (Which we'll call  myskinfile.css ), we can reference our .css file by placing the following in our HTML page's head:  link rel= stylesheet  type= text/css  href= //yoursite.com/yourstyles/myskinfile.css   /link   Once the above is loaded, your player configuration will still need to reference the style appended to  .jw-skin-  within the  skin.name  configuration. In this case, we've called this  myskin  jwplayer('myElement')setup({\n     skin : {\n         name :  myskin \n    }\n});", 
            "title": "Option 1: Referencing the CSS on the page itself (Best Practice)"
        }, 
        {
            "location": "/customization/css-skinning/skins_creating/#option-2-configuring-the-css-url-within-skinurl", 
            "text": "It is possible to reference your CSS file's  url  within the  skin  block of your JW Player embed. This is less preferred, as it requires the player to load your CSS file during setup. Because of this, the rendering of your player may slow down.  jwplayer('myElement').setup({\n     skin  : {\n         url : //yoursite.com/yourstyles/myskinfile.css ,\n         name :  myskin \n    }\n});  Due to possibly impacting rendering speed, option 2 should only be used if you do not have access to the HTML on the page where your player will be rendered.  For a complete list of class names that are able to be overridden, please see our  CSS Skin Reference .", 
            "title": "Option 2: Configuring the CSS URL within skin.url"
        }, 
        {
            "location": "/customization/css-skinning/skins_example/", 
            "text": "Example CSS File\n\n\nHere is an example CSS file for a skin used to customize\u00a0the player UI in JW8. You can use this skin as a reference for building out your own custom CSS. Check out our \ndemo\n of this custom skin in action.\n\n\nCreating Your Own CSS\n\n\n\n\nDuplicate the CSS from this reference.\n\n\nReplace all mentions of \"alaska\" with your custom skin name.\n\n\nMake any changes and customizations that you require.\n\n\nHost your CSS file on your web server.\n\n\nInclude your CSS in the head of your page or provide JW Player with the URL in setup.\n\n\nUpdate your player embed to include the name of your custom skin.\n\n\n\n\nSample Skin\n\n\n\n/* Set the idle overlay to transparent white */\n.jwplayer.jw-skin-alaska.jw-state-idle .jw-controls {\n  background: rgba(255, 255, 255, .7);\n}\n\n/* Hide titles on complete */\n.jwplayer.jw-skin-alaska.jw-state-complete .jw-title .jw-title-primary,\n.jwplayer.jw-skin-alaska.jw-state-complete .jw-title .jw-title-secondary {\n  display: none;\n}\n\n/* Round, white play \n restart buttons with black icons */\n.jwplayer.jw-skin-alaska .jw-display-controls .jw-display-icon-container,\n.jwplayer.jw-skin-alaska .jw-display-controls .jw-display-icon-container {\n  background-color: white;\n  border-radius: 50%;\n  width: 100px;\n  height: 100px;\n}\n\n.jwplayer.jw-skin-alaska .jw-display-controls .jw-display-icon-container .jw-icon,\n.jwplayer.jw-skin-alaska .jw-display-controls .jw-display-icon-container .jw-icon {\n  color: #1E1E1E;\n  width: 60px;\n  height: 60px;\n  padding: 20px;\n}\n\n/* Change play button colors on idle state, handle hover transitions */\n.jwplayer.jw-skin-alaska.jw-state-idle .jw-display-controls .jw-display-icon-container {\n  background-color: #e5322c;\n  height: 80px;\n  width: 80px;\n  -webkit-transition: -webkit-transform 0.35s;\n  transition: transform 0.35s;\n}\n\n.jwplayer.jw-skin-alaska.jw-state-idle .jw-display-controls .jw-display-icon-container .jw-icon {\n  color: #fff;\n  height: 40px;\n  width: 40px;\n  padding: 20px;\n}\n\n\n/* Shrink play button on smaller breakpoints */\n.jwplayer.jw-skin-alaska.jw-state-idle.jw-breakpoint-3 .jw-display-controls .jw-display-icon-container,\n.jwplayer.jw-skin-alaska.jw-state-idle.jw-breakpoint-2 .jw-display-controls .jw-display-icon-container  {\n  height: 60px;\n  width: 60px;\n}\n\n.jwplayer.jw-skin-alaska.jw-state-idle.jw-breakpoint-1 .jw-display-controls .jw-display-icon-container,\n.jwplayer.jw-skin-alaska.jw-state-idle.jw-breakpoint-0 .jw-display-controls .jw-display-icon-container {\n  height: 40px;\n  width: 40px;\n}\n\n.jwplayer.jw-skin-alaska.jw-state-idle.jw-breakpoint-3 .jw-display-controls .jw-display-icon-container .jw-icon,\n.jwplayer.jw-skin-alaska.jw-state-idle.jw-breakpoint-2 .jw-display-controls .jw-display-icon-container .jw-icon {\n  height: 40px;\n  width: 40px;\n  padding: 10px;\n}\n\n.jwplayer.jw-skin-alaska.jw-state-idle.jw-breakpoint-1 .jw-display-controls .jw-display-icon-container .jw-icon,\n.jwplayer.jw-skin-alaska.jw-state-idle.jw-breakpoint-0 .jw-display-controls .jw-display-icon-container .jw-icon {\n  height: 20px;\n  width: 20px;\n  padding: 10px;\n}\n\n.jwplayer.jw-skin-alaska.jw-state-idle .jw-display-controls .jw-display-icon-container:hover {\n   background-color: #92DCE5;\n}\n\n.jwplayer.jw-skin-alaska.jw-state-idle .jw-display-controls .jw-display-icon-container .jw-icon:hover {\n  color: #fff;\n}\n\n.jwplayer.jw-skin-alaska.jw-state-paused .jw-controls {\n  background-color: rgba(147, 221, 230, .3);\n}\n\n\n/* Customize font style and positioning for titles */\n.jwplayer.jw-skin-alaska.jw-state-idle .jw-title {\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n}\n\n/* Apply new styles to video title and description, handle transitions */\n.jwplayer.jw-skin-alaska .jw-title-primary {\n  font-size: 48px;\n  padding: 30px;\n  color: #1E1E1E;\n  text-align: center;\n  text-transform: uppercase;\n  font-family: 'Oswald', sans-serif;\n  font-weight: 500;\n  padding-bottom: 15px;\n  -webkit-transition: -webkit-transform 0.35s;\n  transition: transform 0.35s;\n}\n\n/* Apple new styles to video description */\n.jwplayer.jw-skin-alaska .jw-title-secondary {\n  font-size: 18px;\n  max-width: 70%;\n  font-weight: 500;\n  opacity: 0;\n  margin: 0 auto;\n  color: #1E1E1E;\n  text-align: center;\n  font-family: 'Merriweather', serif;\n  white-space: normal;\n  line-height: 1.3;\n  -webkit-transition: opacity 0.2s, -webkit-transform 0.35s;\n  transition: opacity 0.2s, transform 0.35s;\n  -webkit-transition-delay: 0.08s;\n  transition-delay: 0.08s;\n  -webkit-transition-duration: 0.35s;\n  transition-duration: 0.35s;\n}\n\n/* Decrease font size on medium-small breakpoints */\n.jwplayer.jw-skin-alaska.jw-breakpoint-3 .jw-title-primary,\n.jwplayer.jw-skin-alaska.jw-breakpoint-2 .jw-title-primary,\n.jwplayer.jw-skin-alaska.jw-breakpoint-1 .jw-title-primary,\n.jwplayer.jw-skin-alaska.jw-breakpoint-0 .jw-title-primary {\n  font-size: 22px;\n}\n\n.jwplayer.jw-skin-alaska.jw-breakpoint-3 .jw-title-secondary,\n.jwplayer.jw-skin-alaska.jw-breakpoint-2 .jw-title-secondary {\n  font-size: 14px;\n}\n\n/* Hide the description on smallest breakpoints */\n.jwplayer.jw-skin-alaska.jw-breakpoint-1 .jw-title-secondary,\n.jwplayer.jw-skin-alaska.jw-breakpoint-0 .jw-title-secondary {\n  display: none;\n}\n\n/* Change colors and remove gradient shadow for control bar, change icon color on pause */\n.jwplayer.jw-skin-alaska .jw-display {\n  padding-bottom: 45px;\n}\n\n.jwplayer.jw-skin-alaska .jw-controlbar {\n  background-color: #fff;\n}\n\n.jwplayer.jw-skin-alaska .jw-controlbar .jw-button-container .jw-button-color {\n  color: #1E1E1E;\n}\n\n.jwplayer.jw-skin-alaska.jw-state-paused .jw-controlbar .jw-button-container .jw-button-color {\n  color: #e5322c;\n}\n\n.jwplayer.jw-skin-alaska .jw-controlbar .jw-button-container .jw-button-color:hover {\n  color: #92DCE5;\n}\n\n\n/* Move tooltips closer to control bar with inline timeslider, change colors, round corners, remove shadow */\n.jwplayer.jw-skin-alaska .jw-controlbar .jw-tooltip {\n  bottom: 70%;\n  box-shadow: none;\n}\n\n.jwplayer.jw-skin-alaska .jw-controlbar .jw-tooltip.jw-open {\n  border-radius: 5px;\n  color: #92DCE5;\n}\n\n.jwplayer.jw-skin-alaska .jw-controlbar .jw-tooltip .jw-text {\n  background-color: #92DCE5;\n  border-radius: 5px;\n  border: 0;\n}\n\n.jwplayer.jw-skin-alaska .jw-controlbar .jw-text {\n  color: #1E1E1E;\n}\n\n.jwplayer.jw-skin-alaska .jw-volume-tip,\n.jwplayer.jw-skin-alaska .jw-time-tip {\n  padding-bottom: 0;\n}\n\n\n/* Customize colors of volume control knob */\n.jwplayer.jw-skin-alaska .jw-overlay .jw-slider-volume .jw-slider-container .jw-knob {\n  background-color: #e5322c;\n}\n\n\n/* Customize colors of timeslider */\n.jwplayer.jw-skin-alaska .jw-controlbar .jw-slider-time .jw-slider-container .jw-rail {\n  background-color: #1E1E1E;\n}\n\n.jwplayer.jw-skin-alaska .jw-controlbar .jw-slider-time .jw-slider-container .jw-buffer {\n  background-color: #92DCE5;\n}\n\n.jwplayer.jw-skin-alaska .jw-controlbar .jw-slider-time .jw-slider-container .jw-progress {\n  background-color: #e5322c;\n}\n\n.jwplayer.jw-skin-alaska .jw-controlbar .jw-slider-time .jw-slider-container .jw-knob {\n  background-color: #e5322c;\n}\n\n\n/* Customize colors/opacity of the settings menu */\n.jwplayer.jw-skin-alaska .jw-settings-menu {\n  background-color: transparent;\n}\n\n.jwplayer.jw-skin-alaska .jw-settings-menu .jw-settings-topbar {\n  background-color: #92DCE5;\n}\n\n.jwplayer.jw-skin-alaska .jw-settings-menu .jw-settings-topbar .jw-icon:hover {\n  color: #1E1E1E;\n}\n\n.jwplayer.jw-skin-alaska .jw-settings-menu .jw-settings-submenu {\n  background-color: rgba(255, 255, 255, .65);\n}\n\n.jwplayer.jw-skin-alaska .jw-settings-menu .jw-settings-content-item {\n  color: #1E1E1E;\n}\n\n.jwplayer.jw-skin-alaska .jw-settings-menu .jw-settings-content-item:hover,\n.jwplayer.jw-skin-alaska .jw-settings-menu .jw-settings-item-active {\n  color: #e5322c;\n  font-weight: bold;\n}", 
            "title": "Example CSS File"
        }, 
        {
            "location": "/customization/css-skinning/skins_example/#example-css-file", 
            "text": "Here is an example CSS file for a skin used to customize\u00a0the player UI in JW8. You can use this skin as a reference for building out your own custom CSS. Check out our  demo  of this custom skin in action.", 
            "title": "Example CSS File"
        }, 
        {
            "location": "/customization/css-skinning/skins_example/#creating-your-own-css", 
            "text": "Duplicate the CSS from this reference.  Replace all mentions of \"alaska\" with your custom skin name.  Make any changes and customizations that you require.  Host your CSS file on your web server.  Include your CSS in the head of your page or provide JW Player with the URL in setup.  Update your player embed to include the name of your custom skin.", 
            "title": "Creating Your Own CSS"
        }, 
        {
            "location": "/customization/css-skinning/skins_example/#sample-skin", 
            "text": "/* Set the idle overlay to transparent white */\n.jwplayer.jw-skin-alaska.jw-state-idle .jw-controls {\n  background: rgba(255, 255, 255, .7);\n}\n\n/* Hide titles on complete */\n.jwplayer.jw-skin-alaska.jw-state-complete .jw-title .jw-title-primary,\n.jwplayer.jw-skin-alaska.jw-state-complete .jw-title .jw-title-secondary {\n  display: none;\n}\n\n/* Round, white play   restart buttons with black icons */\n.jwplayer.jw-skin-alaska .jw-display-controls .jw-display-icon-container,\n.jwplayer.jw-skin-alaska .jw-display-controls .jw-display-icon-container {\n  background-color: white;\n  border-radius: 50%;\n  width: 100px;\n  height: 100px;\n}\n\n.jwplayer.jw-skin-alaska .jw-display-controls .jw-display-icon-container .jw-icon,\n.jwplayer.jw-skin-alaska .jw-display-controls .jw-display-icon-container .jw-icon {\n  color: #1E1E1E;\n  width: 60px;\n  height: 60px;\n  padding: 20px;\n}\n\n/* Change play button colors on idle state, handle hover transitions */\n.jwplayer.jw-skin-alaska.jw-state-idle .jw-display-controls .jw-display-icon-container {\n  background-color: #e5322c;\n  height: 80px;\n  width: 80px;\n  -webkit-transition: -webkit-transform 0.35s;\n  transition: transform 0.35s;\n}\n\n.jwplayer.jw-skin-alaska.jw-state-idle .jw-display-controls .jw-display-icon-container .jw-icon {\n  color: #fff;\n  height: 40px;\n  width: 40px;\n  padding: 20px;\n}\n\n\n/* Shrink play button on smaller breakpoints */\n.jwplayer.jw-skin-alaska.jw-state-idle.jw-breakpoint-3 .jw-display-controls .jw-display-icon-container,\n.jwplayer.jw-skin-alaska.jw-state-idle.jw-breakpoint-2 .jw-display-controls .jw-display-icon-container  {\n  height: 60px;\n  width: 60px;\n}\n\n.jwplayer.jw-skin-alaska.jw-state-idle.jw-breakpoint-1 .jw-display-controls .jw-display-icon-container,\n.jwplayer.jw-skin-alaska.jw-state-idle.jw-breakpoint-0 .jw-display-controls .jw-display-icon-container {\n  height: 40px;\n  width: 40px;\n}\n\n.jwplayer.jw-skin-alaska.jw-state-idle.jw-breakpoint-3 .jw-display-controls .jw-display-icon-container .jw-icon,\n.jwplayer.jw-skin-alaska.jw-state-idle.jw-breakpoint-2 .jw-display-controls .jw-display-icon-container .jw-icon {\n  height: 40px;\n  width: 40px;\n  padding: 10px;\n}\n\n.jwplayer.jw-skin-alaska.jw-state-idle.jw-breakpoint-1 .jw-display-controls .jw-display-icon-container .jw-icon,\n.jwplayer.jw-skin-alaska.jw-state-idle.jw-breakpoint-0 .jw-display-controls .jw-display-icon-container .jw-icon {\n  height: 20px;\n  width: 20px;\n  padding: 10px;\n}\n\n.jwplayer.jw-skin-alaska.jw-state-idle .jw-display-controls .jw-display-icon-container:hover {\n   background-color: #92DCE5;\n}\n\n.jwplayer.jw-skin-alaska.jw-state-idle .jw-display-controls .jw-display-icon-container .jw-icon:hover {\n  color: #fff;\n}\n\n.jwplayer.jw-skin-alaska.jw-state-paused .jw-controls {\n  background-color: rgba(147, 221, 230, .3);\n}\n\n\n/* Customize font style and positioning for titles */\n.jwplayer.jw-skin-alaska.jw-state-idle .jw-title {\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n}\n\n/* Apply new styles to video title and description, handle transitions */\n.jwplayer.jw-skin-alaska .jw-title-primary {\n  font-size: 48px;\n  padding: 30px;\n  color: #1E1E1E;\n  text-align: center;\n  text-transform: uppercase;\n  font-family: 'Oswald', sans-serif;\n  font-weight: 500;\n  padding-bottom: 15px;\n  -webkit-transition: -webkit-transform 0.35s;\n  transition: transform 0.35s;\n}\n\n/* Apple new styles to video description */\n.jwplayer.jw-skin-alaska .jw-title-secondary {\n  font-size: 18px;\n  max-width: 70%;\n  font-weight: 500;\n  opacity: 0;\n  margin: 0 auto;\n  color: #1E1E1E;\n  text-align: center;\n  font-family: 'Merriweather', serif;\n  white-space: normal;\n  line-height: 1.3;\n  -webkit-transition: opacity 0.2s, -webkit-transform 0.35s;\n  transition: opacity 0.2s, transform 0.35s;\n  -webkit-transition-delay: 0.08s;\n  transition-delay: 0.08s;\n  -webkit-transition-duration: 0.35s;\n  transition-duration: 0.35s;\n}\n\n/* Decrease font size on medium-small breakpoints */\n.jwplayer.jw-skin-alaska.jw-breakpoint-3 .jw-title-primary,\n.jwplayer.jw-skin-alaska.jw-breakpoint-2 .jw-title-primary,\n.jwplayer.jw-skin-alaska.jw-breakpoint-1 .jw-title-primary,\n.jwplayer.jw-skin-alaska.jw-breakpoint-0 .jw-title-primary {\n  font-size: 22px;\n}\n\n.jwplayer.jw-skin-alaska.jw-breakpoint-3 .jw-title-secondary,\n.jwplayer.jw-skin-alaska.jw-breakpoint-2 .jw-title-secondary {\n  font-size: 14px;\n}\n\n/* Hide the description on smallest breakpoints */\n.jwplayer.jw-skin-alaska.jw-breakpoint-1 .jw-title-secondary,\n.jwplayer.jw-skin-alaska.jw-breakpoint-0 .jw-title-secondary {\n  display: none;\n}\n\n/* Change colors and remove gradient shadow for control bar, change icon color on pause */\n.jwplayer.jw-skin-alaska .jw-display {\n  padding-bottom: 45px;\n}\n\n.jwplayer.jw-skin-alaska .jw-controlbar {\n  background-color: #fff;\n}\n\n.jwplayer.jw-skin-alaska .jw-controlbar .jw-button-container .jw-button-color {\n  color: #1E1E1E;\n}\n\n.jwplayer.jw-skin-alaska.jw-state-paused .jw-controlbar .jw-button-container .jw-button-color {\n  color: #e5322c;\n}\n\n.jwplayer.jw-skin-alaska .jw-controlbar .jw-button-container .jw-button-color:hover {\n  color: #92DCE5;\n}\n\n\n/* Move tooltips closer to control bar with inline timeslider, change colors, round corners, remove shadow */\n.jwplayer.jw-skin-alaska .jw-controlbar .jw-tooltip {\n  bottom: 70%;\n  box-shadow: none;\n}\n\n.jwplayer.jw-skin-alaska .jw-controlbar .jw-tooltip.jw-open {\n  border-radius: 5px;\n  color: #92DCE5;\n}\n\n.jwplayer.jw-skin-alaska .jw-controlbar .jw-tooltip .jw-text {\n  background-color: #92DCE5;\n  border-radius: 5px;\n  border: 0;\n}\n\n.jwplayer.jw-skin-alaska .jw-controlbar .jw-text {\n  color: #1E1E1E;\n}\n\n.jwplayer.jw-skin-alaska .jw-volume-tip,\n.jwplayer.jw-skin-alaska .jw-time-tip {\n  padding-bottom: 0;\n}\n\n\n/* Customize colors of volume control knob */\n.jwplayer.jw-skin-alaska .jw-overlay .jw-slider-volume .jw-slider-container .jw-knob {\n  background-color: #e5322c;\n}\n\n\n/* Customize colors of timeslider */\n.jwplayer.jw-skin-alaska .jw-controlbar .jw-slider-time .jw-slider-container .jw-rail {\n  background-color: #1E1E1E;\n}\n\n.jwplayer.jw-skin-alaska .jw-controlbar .jw-slider-time .jw-slider-container .jw-buffer {\n  background-color: #92DCE5;\n}\n\n.jwplayer.jw-skin-alaska .jw-controlbar .jw-slider-time .jw-slider-container .jw-progress {\n  background-color: #e5322c;\n}\n\n.jwplayer.jw-skin-alaska .jw-controlbar .jw-slider-time .jw-slider-container .jw-knob {\n  background-color: #e5322c;\n}\n\n\n/* Customize colors/opacity of the settings menu */\n.jwplayer.jw-skin-alaska .jw-settings-menu {\n  background-color: transparent;\n}\n\n.jwplayer.jw-skin-alaska .jw-settings-menu .jw-settings-topbar {\n  background-color: #92DCE5;\n}\n\n.jwplayer.jw-skin-alaska .jw-settings-menu .jw-settings-topbar .jw-icon:hover {\n  color: #1E1E1E;\n}\n\n.jwplayer.jw-skin-alaska .jw-settings-menu .jw-settings-submenu {\n  background-color: rgba(255, 255, 255, .65);\n}\n\n.jwplayer.jw-skin-alaska .jw-settings-menu .jw-settings-content-item {\n  color: #1E1E1E;\n}\n\n.jwplayer.jw-skin-alaska .jw-settings-menu .jw-settings-content-item:hover,\n.jwplayer.jw-skin-alaska .jw-settings-menu .jw-settings-item-active {\n  color: #e5322c;\n  font-weight: bold;\n}", 
            "title": "Sample Skin"
        }, 
        {
            "location": "/customization/designer-kit/", 
            "text": "JW8 Designer Kit\n\n\nThe \nJW8 Designer Kit\n is a starting point for designing and building new skins. This photoshop template includes GUI elements found in the 8.0.0 release of JW8. The purpose of this kit is to encourage designers and developers to fully customize the player to create fully branded experiences for their content.\n\n\nThis Illustrator file includes well organized and labeled layers that correspond to css selectors in our skinning model for easy collaboration between designers and developers. All elements and shapes within the AI are fully editable.\n\n\nYou may also find our \nCSS Skinning Model\n documentation useful as you get started designing your new skin.\n\n\nDownload the JW8 Designer Kit\n\n\n\n\nBelow is a preview of what is included in the \nJW8 Designer Kit\n.\n\n\nPlayer State Idle\n\n\n\n\n\nPlayer State Playing\n\n\n\n\n\nPlayer State Complete", 
            "title": "JW8 Designer Kit"
        }, 
        {
            "location": "/customization/designer-kit/#jw8-designer-kit", 
            "text": "The  JW8 Designer Kit  is a starting point for designing and building new skins. This photoshop template includes GUI elements found in the 8.0.0 release of JW8. The purpose of this kit is to encourage designers and developers to fully customize the player to create fully branded experiences for their content.  This Illustrator file includes well organized and labeled layers that correspond to css selectors in our skinning model for easy collaboration between designers and developers. All elements and shapes within the AI are fully editable.  You may also find our  CSS Skinning Model  documentation useful as you get started designing your new skin.  Download the JW8 Designer Kit   Below is a preview of what is included in the  JW8 Designer Kit .", 
            "title": "JW8 Designer Kit"
        }, 
        {
            "location": "/analytics/integrations/", 
            "text": "Analytics System Integrations\n\n\nBy default, JW Player tracks only playback data with \nGoogle Analytics\n as an integrated solution. However, there are many more potential analytics services that can be used with our API. Provided that your analytics service is capable of sending this information via Javascript, all API events can hypothetically be tracked and measured.\n\n\nListening for Events\n\n\nA full introduction to our player's API can be found on our \nAPI Introduction\n page. In a nutshell, JW Player's API is capable of listening for specific changes, either initiated by user or by API, and then returning information about its use. A very basic example of detecting when a user initiates a mute would be:\n\n\njwplayer().on('mute',function(){\n    //I would fire my mute tracker here!\n    //What happens here would be dependent on your analytics product!\n});\n\n\n\n\n\u200bFor a full list of trackable player events grouped by category, please visit our \nAPI reference page\n.\n\n\nSending Events With Google Analytics\n\n\nNow that you're able to determine that an event occurred on a page, a ping will need to be sent to an analytics platform for tracking. If your analytics platform of choice is Google Analytics, you'll need to initiate a \nsend\n event. As mentioned in our previous article \nhere\n, you'll need to make sure that you are implementing the new analytics.js on your page, rather than the older ga.js.\n\n\nLet's assume that we have a single player on a page. If I would like track with our Google Analytics account when an error has occurred with our player (and the error itself), we can use the following code:\n\n\njwplayer().on('error', function(event) {\nga('send', 'event', 'JW Player Events', 'Errors', event.message);\n});\n\n\n\n\nOnce triggering an error state, we are able to check into our Google Analytics page and see our tracked event(Under realtime events). In this case, \nErrors\n will populate in the \nJW Player Events\n category, and the error itself will be listed under \nActions\n. The exact error message will be listed under the \nLabel\n section.  \n\n\nMore information about tracking events with the above code can be found \nhere\n in Google's own analytics documentation.\n\n\nSending Events With comScore\n\n\nMuch like a custom GA implementation, if you are utilizing comScore analytics, it is possible to create a setup similar to the above. The below table shows comScore events and their JW Player API equivalents:\n\n\n\n\n\n\n\n\nComscore Event\n\n\nJW Player API Event\n\n\n\n\n\n\n\n\n\n\nStreamSenseEventType.BUFFER\n\n\non('buffer');\n\n\n\n\n\n\nStreamSenseEventType.PAUSE\n\n\non('pause');\n\n\n\n\n\n\nStreamSenseEventType.PLAY\n\n\non('play');\n\n\n\n\n\n\nStreamSenseEventType.END\n\n\non('complete');\n\n\n\n\n\n\nFullscreen State\n\n\ngetFullscreen();\n\n\n\n\n\n\nVolume\n\n\ngetVolume();\n\n\n\n\n\n\nMedia Position\n\n\ngetPosition();\n\n\n\n\n\n\nVideo Source\n\n\ngetPlaylistItem().file\n\n\n\n\n\n\nCurrent Bitrate\n\n\ngetQualityLevels()[getCurrentQuality()].bitrate\n\n\n\n\n\n\n\n\nSending Events With Adobe Site Catalyst\n\n\nAs of JW7, integrated Site Catalyst support has been removed. Events can still be tracked using the JW Player API and Site Catalyst's event tracking pings. Further information can be found on Adobe's site:\n\n\n\n\nHTML5 Video Measurement\n\n\nMedia Monitoring Reference\n\n\nVideo Measurement Success\n\n\n\n\nAgain, the same API events listed above for other implementations can be utilized to send these SiteCatalyst measurement pings as well. The below table shows which JW Player events may correlate with their SiteCatalyst counterparts. Please note that some additional logic may need to be put in place to properly send the correct context for these events.\n\n\n\n\n\n\n\n\nSiteCatalyst Event\n\n\nJW Player API Event\n\n\n\n\n\n\n\n\n\n\ns.Media.stop\n\n\non('pause');\n\n\n\n\n\n\ns.Media.stop\n\n\non('buffer');\n\n\n\n\n\n\ns.Media.stop\n\n\non('idle');\n\n\n\n\n\n\ns.Media.close\n\n\non('complete');\n\n\n\n\n\n\ns.Media.play\n\n\non('play');\n\n\n\n\n\n\ns.Media.open\n\n\ngetPlaylist()[getPlaylistIndex()].\ninformation", 
            "title": "Analytics Integrations"
        }, 
        {
            "location": "/analytics/integrations/#analytics-system-integrations", 
            "text": "By default, JW Player tracks only playback data with  Google Analytics  as an integrated solution. However, there are many more potential analytics services that can be used with our API. Provided that your analytics service is capable of sending this information via Javascript, all API events can hypothetically be tracked and measured.", 
            "title": "Analytics System Integrations"
        }, 
        {
            "location": "/analytics/integrations/#listening-for-events", 
            "text": "A full introduction to our player's API can be found on our  API Introduction  page. In a nutshell, JW Player's API is capable of listening for specific changes, either initiated by user or by API, and then returning information about its use. A very basic example of detecting when a user initiates a mute would be:  jwplayer().on('mute',function(){\n    //I would fire my mute tracker here!\n    //What happens here would be dependent on your analytics product!\n});  \u200bFor a full list of trackable player events grouped by category, please visit our  API reference page .", 
            "title": "Listening for Events"
        }, 
        {
            "location": "/analytics/integrations/#sending-events-with-google-analytics", 
            "text": "Now that you're able to determine that an event occurred on a page, a ping will need to be sent to an analytics platform for tracking. If your analytics platform of choice is Google Analytics, you'll need to initiate a  send  event. As mentioned in our previous article  here , you'll need to make sure that you are implementing the new analytics.js on your page, rather than the older ga.js.  Let's assume that we have a single player on a page. If I would like track with our Google Analytics account when an error has occurred with our player (and the error itself), we can use the following code:  jwplayer().on('error', function(event) {\nga('send', 'event', 'JW Player Events', 'Errors', event.message);\n});  Once triggering an error state, we are able to check into our Google Analytics page and see our tracked event(Under realtime events). In this case,  Errors  will populate in the  JW Player Events  category, and the error itself will be listed under  Actions . The exact error message will be listed under the  Label  section.    More information about tracking events with the above code can be found  here  in Google's own analytics documentation.", 
            "title": "Sending Events With Google Analytics"
        }, 
        {
            "location": "/analytics/integrations/#sending-events-with-comscore", 
            "text": "Much like a custom GA implementation, if you are utilizing comScore analytics, it is possible to create a setup similar to the above. The below table shows comScore events and their JW Player API equivalents:     Comscore Event  JW Player API Event      StreamSenseEventType.BUFFER  on('buffer');    StreamSenseEventType.PAUSE  on('pause');    StreamSenseEventType.PLAY  on('play');    StreamSenseEventType.END  on('complete');    Fullscreen State  getFullscreen();    Volume  getVolume();    Media Position  getPosition();    Video Source  getPlaylistItem().file    Current Bitrate  getQualityLevels()[getCurrentQuality()].bitrate", 
            "title": "Sending Events With comScore"
        }, 
        {
            "location": "/analytics/integrations/#sending-events-with-adobe-site-catalyst", 
            "text": "As of JW7, integrated Site Catalyst support has been removed. Events can still be tracked using the JW Player API and Site Catalyst's event tracking pings. Further information can be found on Adobe's site:   HTML5 Video Measurement  Media Monitoring Reference  Video Measurement Success   Again, the same API events listed above for other implementations can be utilized to send these SiteCatalyst measurement pings as well. The below table shows which JW Player events may correlate with their SiteCatalyst counterparts. Please note that some additional logic may need to be put in place to properly send the correct context for these events.     SiteCatalyst Event  JW Player API Event      s.Media.stop  on('pause');    s.Media.stop  on('buffer');    s.Media.stop  on('idle');    s.Media.close  on('complete');    s.Media.play  on('play');    s.Media.open  getPlaylist()[getPlaylistIndex()]. information", 
            "title": "Sending Events With Adobe Site Catalyst"
        }, 
        {
            "location": "/jw7/javascript-api-reference/", 
            "text": "", 
            "title": "JW7 Javascript API"
        }, 
        {
            "location": "/jw7/configuration-reference/", 
            "text": "JW Player Configuration Reference\n\n\nThis article acts a reference to all configuration options JW Player supports. Configuration options tell a player instance which media to play and how to layout and behave on your page.\n\n\n!!!important\nCertain JW Player features may require a specific license. Please \ncontact our team\n to upgrade your account.\n!!!\n\n\n\n\n\n\n\n\nTable Of Contents\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSetup Options\n\n\nThe Playlist\n\n\nSkin\n\n\n\n\n\n\nCaptions\n\n\nRTMP\n\n\nLogo\n\n\n\n\n\n\nSharing\n\n\nGoogle Analytics\n\n\nRelated\n\n\n\n\n\n\nAdvertising\n\n\nDRM\n\n\nLocalization\n\n\n\n\n\n\n\n\nIntroduction\n\n\nJW Player contains a large number of features and options that can be configured inside of the player setup.  Some options, like \nwidth\n or \nmute\n, are directly placed into the setup. Other, more advanced options, are grouped into nested blocks, like \nskin\n or \nadvertising\n.\n\n\nHere is an example setup that contains both \nsetup\n options and specific \nadvertising\n options:\n\n\njwplayer(\nmyElement\n).setup({\n  \nfile\n: \nhttp://example.com/myVideo.mp4\n,\n  \nheight\n: 360,\n  \nwidth\n: 640,\n  \nautostart\n: true,\n  \nadvertising\n: {\n        \nclient\n: \nvast\n,\n        \ntag\n: \nhttp://adserver.com/vastTag.xml\n\n    }\n});\n\n\n\n\nWeb developers will recognize the JavaScript Object Notation (\nJSON\n) syntax of these setup blocks. While configuring player setups, beware of common JSON requirements, like the need for a comma after all but the last element in a list.\n\n\n\n\n\n\nSetup Options\n\n\nThese are the options for configuring the layout and playback behavior of a player. Each is placed directly into the \nsetup\n of the player\n\n\nThe following properties are related to media that is loaded into the player.\n\n\nIf only a single playlist item is used, this information can either be configured directly inside of \nsetup\n. If you are planning on using multiple media items, these can also be used inside of a \nplaylist\n array.\n\n\nMedia\n\n\n\n\n\n\n\n\nSetting\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nfile\n\n\nString\n\n\n(Required)\n URL to a single video file, audio file, YouTube video or live stream to play. Can also be configured inside of a \nsources\n array\n\n\n-\n\n\n\n\n\n\nimage\n\n\nString\n\n\nURL to a poster image to display before playback starts.\n\n\n-\n\n\n\n\n\n\ntitle\n\n\nString\n\n\nThe title of your video or audio item\n\n\n-\n\n\n\n\n\n\ndescription\n\n\nString\n\n\nA description of your video or audio item\n\n\n-\n\n\n\n\n\n\nmediaid\n\n\nString\n\n\nUnique identifier of this item. Used by advertising, analytics and discovery services\n\n\n-\n\n\n\n\n\n\n\n\n\n\nBehavior\n\n\n\n\n\n\n\n\nSetting\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nmute\n\n\nBoolean\n\n\nConfigures if the player should be muted during playback\n\n\nfalse\n\n\n\n\n\n\nautostart\n\n\nString\n\n\nWhether the player will attempt to begin playback automatically when a page is loaded. Set to 'viewable' to have player autostart if 50% is viewable.\n\n\nfalse\n\n\n\n\n\n\nnextupoffset\n7.7\n\n\nNumber\n\n\nConfigures when the Next Up card displays when transitioning between playlist items. A positive value is an offset from the start of the video. A negative number is an offset from the end of the video\n\n\n-10\n\n\n\n\n\n\nrepeat\n\n\nBoolean\n\n\nConfigures if the player should loop content after a playlist completes\n\n\nfalse\n\n\n\n\n\n\nabouttext\n\n\nString\n\n\nCustom text to display in the right-click menu\n\n\n-\n\n\n\n\n\n\naboutlink\n\n\nString\n\n\nCustom URL to link to when clicking the right-click menu\n\n\n\"https://www.jwplayer.com/learn-more\"\n\n\n\n\n\n\nplaybackRateControls\n7.12\n\n\nBoolean or Array of Numbers\n\n\nWhether to display a button in the controlbar to adjust playback speed. If true, the pre-defined options available in the menu are 0.5x, 1x, 1.25x, 1.5x, and 2x. Instead of true, an array can be passed to customize the menu options. For example: \"playbackRateControls\": [0.25, 0.75, 1, 1.25].\n\n\nfalse\n\n\n\n\n\n\n\n\n\n\nAppearance\n\n\n\n\n\n\n\n\nSetting\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncontrols\n\n\nBoolean\n\n\nWhether to display the video controls (controlbar, display icons and dock buttons)\n\n\ntrue\n\n\n\n\n\n\nlocalization\n7.7\n\n\nObject\n\n\nChanges text for the player in certain locations\n\n\n-\n\n\n\n\n\n\naspectratio\n\n\nString\n\n\nMaintains proportions when width is a percentage. Will not be used if the player is a static size. \n \nNote:\n Must be entered in ratio \"x:y\" format\n\n\n-\n\n\n\n\n\n\nheight\n\n\nNumber\n\n\nThe desired height of your video player (In pixels). Can be omitted when aspectratio is configured\n\n\n270\n\n\n\n\n\n\nwidth\n\n\nNumber or String\n\n\nThe desired height of your video player (In pixels or percentage)\n\n\n480\n\n\n\n\n\n\ndisplaytitle\n\n\nBoolean\n\n\nConfigures if the title of a media file should be displayed\n\n\ntrue\n\n\n\n\n\n\ndisplaydescription\n\n\nBoolean\n\n\nConfigures if the description title of a media file should be displayed\n\n\ntrue\n\n\n\n\n\n\nstretching\n\n\nString\n\n\nResize images and video to fit player dimensions. See graphic below for examples \n \n\"uniform\":\n Fits JW Player dimensions while maintaining aspect ratio \n \n\"exactfit\":\n Will fit JW Player dimensions without maintaining aspect ratio \n\"fill\":\n Will zoom and crop video\u00a0to fill dimensions,\u00a0maintaining aspect ratio \n \n\"none\":\n Displays the actual size of the video file. (Black borders)\n\n\n\"uniform\"\n\n\n\n\n\n\ntimeSliderAbove\n\n\nBoolean\n\n\nConfigures whether the timeslider is dynamic based on size, is always above, or never above\n\n\n-\n\n\n\n\n\n\nnextUpDisplay\n\n\nBoolean\n\n\nConfigures whether the Next Up modal is displayed\n\n\n-\n\n\n\n\n\n\nqualityLabels\n\n\nArray\n\n\nBy default, the JW Player will set video quality levels using information from the manifest files. Use this configuration option to apply a custom quality label to a desired bandwidth in kbps, works for HLS and DASH. For example: \"qualityLabels\":{\"2500\":\"High\",\"1000\":\"Medium\"}\n\n\n-\n\n\n\n\n\n\n\n\nStretching Examples:\n\n\n\n\n\n\nRendering and Loading\n\n\n\n\n\n\n\n\nSetting\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nprimary\n\n\nString\n\n\nSets the default player rendering mode.\n\"flash\":\n Player will attempt to render with Flash\n\"html5\":\n Player will attempt to render in HTML5\n\n\n\"html5\"\n\n\n\n\n\n\nflashplayer\n\n\nString\n\n\nSpecifies an alternate directory of \njwplayer.flash.swf\n\n\n\"/\"\n\n\n\n\n\n\nbase\n\n\nString\n\n\nConfigures an alternate base path for skins and providers\n\n\n\"/\"\n\n\n\n\n\n\npreload\n\n\nString\n\n\nTells the player if content should be loaded prior to playback. Useful for faster playback speed or if certain metadata should be loaded prior to playback: \n\"none\":\n Player will explicitly \nnot\n preload content \n\"metadata\":\n Only basic playback information will be loaded\n \n\"auto\":\n Browser attempts to load more of the video \nIf you are concerned about excess content usage, we suggest setting \n\"preload\":\"none\"\n\n\n*\n\n\n\n\n\n\n\n\n*If no preload option is selected in HTML5 mode, JW Player will rely on a browser's default \nvideo\n preload behavior\n\n\n\n\n\n\nPlaylist\n\n\nThe playlist is a powerful feature of JW Player, used to play multiple video or audio files.\n\n\nA playlist can be either a \nstring\n, referring to the URL of an RSS feed or JSON file, or an \narray\n of media objects.\n\n\nConfiguring Playlist as a String\n\n\njwplayer(\nmyElement\n).setup({\n  \nplaylist\n: \nhttp://example.com/myPlaylist.json\n\n});\n\n\n\n\nConfiguring Playlist as an Array\n\n\njwplayer(\nmyElement\n).setup({\n    \nplaylist\n: [{\n        \nfile\n: \n/assets/sintel.mp4\n,\n        \nimage\n: \n/assets/sintel.jpg\n,\n        \ntitle\n: \nSintel Trailer\n,\n        \nmediaid\n: \nddra573\n\n    },{\n        \nfile\n: \n/assets/bigbuckbunny.mp4\n,\n        \nimage\n: \n/assets/bigbuckbunny.jpg\n,\n        \ntitle\n: \nBig Buck Bunny Trailer\n,\n        \nmediaid\n: \nddrx3v2\n\n    }]\n});\n\n\n\n\n\n\n\n\n\n\nSetting\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nplaylist[\nindex\n].file\n\n\nString\n\n\n(Required)\n If no file is specified in your setup or sources, this is a required configuration option\n\n\n\n\n\n\nplaylist[\nindex\n].withCredentials\n7.5\n\n\nBoolean\n\n\nIf true, \"withCredentials\" will be used to request a media file rather than CORS\n\n\n\n\n\n\nplaylist[\nindex\n].title\n\n\nString\n\n\nTitle of the item. This is displayed inside of the player prior to playback, as well as in the visual playlist. This can be hidden with the displaytitle option\n\n\n\n\n\n\nplaylist[\nindex\n].description\n\n\nString\n\n\nShort description of the item. It is displayed below the title. This can be hidden with the displaydescription option.\n\n\n\n\n\n\nplaylist[\nindex\n].image\n\n\nString\n\n\nPoster image URL. Displayed before and after playback.\n\n\n\n\n\n\nplaylist[\nindex\n].mediaid\n\n\nString\n\n\nUnique identifier of this item. Used by advertising, analytics and discovery services\n\n\n\n\n\n\nplaylist[\nindex\n].recommendations\n7.6\n\n\nString\n\n\nURL to a feed that contains related items for a particular playlist item\n\n\n\n\n\n\nplaylist[\nindex\n].minDvrWindow\n7.7\n\n\nNumber\n\n\nHLS-only\n In seconds, the minimum amount of content in an M3U8 required to trigger DVR mode. Set to 0 to always display DVR mode.(Defaults to \n120\n)\n\n\n\n\n\n\nplaylist[index].stereomode\n\n\nString\n\n\nUsed for playback of a spherical 360 Video. \"Monoscopic\" is the value supported at this time.\n\n\n\n\n\n\nplaylist\nindex\n.sources\n\n\nArray\n\n\nUsed for quality toggling and alternate sources\n\n\n\n\n\n\nplaylist\nindex\n.tracks\n\n\nArray\n\n\nInclude \ncaptions\n, \nchapters\n, and \nthumbnails\n for media\n\n\n\n\n\n\nplaylist\nindex\n.adschedule\n\n\nObject\n\n\nSchedule advertising for a specific media file\n\n\n\n\n\n\n\n\nIn addition to standard media information, (\"title\", \"description\", \"mediaid\") it is also possible to insert additional metadata, using custom properties. This information \nmust\n be entered inside of a playlist, and cannot be set directly inside of a setup block.\n\n\n\n\n\n\nplaylist[\nindex\n].sources[]\n\n\nSources are inserted into playlist objects and are lists of files. Sources serve a dual purpose, depending on the files used:\n\n\n\n\nUse different file types:\n Alternate \"fallback\" media sources\n\n\nUse the same file type:\n Toggle quality with static video files\n\n\n\n\nAlternate Media Sources\n\n\nIf using different file types, sources prioritizes which file to play, based on order. For example, the player will attempt to play myVideo.m3u8 as a first choice. In the event that a browser cannot play an m3u8, the player is intelligent enough to choose myVideo.mp4 instead. In the event that an mp4 cannot be played, the player will attempt the webm format before producing an error.\n\n\njwplayer(\nmyElement\n).setup({\n  \nplaylist\n: [{\n    \ntitle\n:\nOne Playlist Item With Multiple Sources\n,\n    \ndescription\n:\nThree Sources - One Playlist Item\n,\n    \nimage\n: \nmyImage.png\n,\n    \nmediaid\n: \nddrx3v2\n,\n    \nsources\n: [{\n      \nfile\n: \nmyVideo.m3u8\n\n    },{\n      \nfile\n: \nmyVideo.mp4\n\n    },{\n      \nfile\n: \nmyVideo.webm\n\n    }]\n  }]\n});\n\n\n\n\nSources with DRM\n7.7\n\n\nWhen using DRM, we highly suggest placing the drm block inside of the appropriate media source. This ensures the correct media and DRM pair gets chosen for the appropriate browser. For example:\n\n\n  \nsources\n: [{\n      \nfile\n: \nmyFairplayStream.m3u8\n,\n      \ndrm\n: {\n        \nfairplay\n: {\n          \ncertificateUrl\n: \nhttp://myfairplay.com/fairplay/cert\n,\n          \nprocessSpcUrl\n: \nhttp://myfairplay.com/fairplay/ckc\n\n        }\n      }\n    },{\n      \nfile\n: \nmyWidevineStream.mpd\n,\n      \ndrm\n: {\n        \nwidevine\n: {\n          \nurl\n: \nhttp://mywidevineurl.com/drm\n\n          }\n      }\n    },{\n      \nfile\n: \nmyPlayreadyStream.mpd\n,\n      \ndrm\n: {\n        \nplayready\n: {\n          \nurl\n: \nhttp://myplayreadyurl.com/drm\n\n          }\n      },{\n      \nfile\n: \nmyClearkeyStream.mpd\n,\n      \ndrm\n: {\n        \nclearkey\n: {\n          \nkey\n: \n1234clear5678key\n,\n          \nkeyId\n: \nfefde00d-efde-adbf-eff1-baadf01dd11d\n\n          }\n      }\n    }]\n\n\n\n\nSee our \ndrm\n section for more information.\n\n\nQuality Toggle for Video Files\n\n\nIn the event that a streaming technology like HLS or DASH cannot be used, listing video files of different qualities will enable a quality selection menu in the player control bar. Compared to other streaming methods, it has the following drawbacks:\n\n\n\n\nNo automatic switching, based on bandwidth or download speed\n\n\nChanging qualities may cause playback stuttering\n\n\nPseudostreaming\n may need to be configured in cases where Flash is used\n\n\n\n\njwplayer(\nmyElement\n).setup({\n  \nplaylist\n: [{\n    \ntitle\n:\nOne Playlist Item With Multiple Qualities\n,\n    \ndescription\n:\nTwo Qualities - One Playlist Item\n,\n    \nsources\n: [{\n      \nfile\n: \nmyVideo-720p.mp4\n,\n      \nlabel\n: \nHD\n\n    },{\n    \nfile\n: \nmyVideo-480p.mp4\n,\n    \nlabel\n: \nSD\n\n    }]\n  }]\n});\n\n\n\n\nIn the above example, the player will add an \"HD\" button, allowing a user to toggle their desired video quality. If more than two sources are used, the player will instead overlay a quality selection menu, rather than a quality toggle.\n\n\n\n\n\n\n\n\nConfig\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nplaylist[\nindex\n].sources[].file\n\n\nString\n\n\nURL to the video file, audio file, YouTube video or live stream of this playlist item source.\n\n\n\n\n\n\nplaylist[\nindex\n].sources[].label\n\n\nString\n\n\nLabel of the media source, displayed in the manual HD selection menu. Set this if you have more than 2 qualities of your video.\n\n\n\n\n\n\nplaylist[\nindex\n].sources[].type\n\n\nString\n\n\nForces a media type. Only required when a file extension is missing or not recognized (Using .php or certain tokens, for example\n\n\n\n\n\n\nplaylist[\nindex\n].sources[].default\n\n\nBoolean\n\n\nSet this to \ntrue\n for the media source you want to play on startup. If this isn't set for any source, the first one is used\n\n\n\n\n\n\nplaylist[\nindex\n].sources[].drm\n7.7\n\n\nObject\n\n\nAn object containing DRM information for a particular source\n\n\n\n\n\n\n\n\n\n\n\n\nplaylist[\nindex\n].tracks[]\n\n\nTracks can be attached to media for three possible reasons: \ncaptions\n, \nthumbnails\n, or \nchapters\n. Thumbnail and chapter files \nmust\n be in WEBVTT format. Captions accept \nWEBVTT\n, \nSRT\n, and \nDFXP\n format, though JW Player strongly suggests using \nWEBVTT\n if possible.\n\n\n\n\n\n\n\n\nConfig\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaylist[\nindex\n].tracks[].file\n\n\nString\n\n\nURL to the captions, chapters or thumbnails text track file. See \nAdding Closed Captions\n for an example setup.\n\n\n-\n\n\n\n\n\n\nplaylist[\nindex\n].tracks[].kind\n\n\nString\n\n\nThe kind of text track. \n \n\"captions\":\n Captions that display during video playback\n\"chapters\":\n Places markers on the video control bar, displaying different sections\n\"thumbnails\":\n A list of thumbnails that appear when the mouse cursor hovers on the control bar\n\n\n\"captions\"\n\n\n\n\n\n\nplaylist[\nindex\n].tracks[].label\n\n\nString\n\n\nLabel of the text track. Is only used in setups with multiple captions, where the label is displayed in the CC selection menu.\n\n\nindex\n\n\n\n\n\n\nplaylist[\nindex\n].tracks[].default\n\n\nBoolean\n\n\nOnly for \ncaptions\n. Set this to \ntrue\n if you want a captions track to display by default\n\n\n-\n\n\n\n\n\n\n\n\nWhen using the playlist to load an RSS feed, these options are set in the feed. See the \nMedia Formats Reference\n for an mapping of all playlist options to RSS format.\n\n\n\n\n\n\n!!!important\nVideo ad insertion requires a JW Player Platinum or Enterprise license. Please \ncontact our team\n to upgrade your account.\n!!!\n\n\nplaylist[\nindex\n].adschedule\n\n\nThe \nplaylist[\nindex\n].adschedule\n block is used for scheduling ad breaks throughout specific playlist items. Each \nadbreak\n should be given a unique name, and needs to be nested inside of an \nadschedule\n block.\n\n\n\n\n\n\n\n\nConfig\n\n\nType\n\n\nInformation\n\n\n\n\n\n\n\n\n\n\nplaylist[\nindex\n].adschedule.\nadbreak\n.offset\n\n\nString or Number\n\n\nSpecifies when the included tag should play during content. Can be \npre\n for a preroll, \npost\n for a postroll, or a \n%\n or \nnumber\n(In seconds), for a midroll\n\n\n\n\n\n\nplaylist[\nindex\n].adschedule.\nadbreak\n.tag\n\n\nString\n\n\nThis is used to set the ad tag for each adbreak within the ad schedule of a playlist item.\n\n\n\n\n\n\n\n\njwplayer(\nmyElement\n).setup({\n  \nplaylist\n: [{\n  \ntitle\n:\nOne Media Item\n,\n  \ndescription\n:\nOnly One media item in a playlist!\n,\n  \nfile\n: \nmyFile.mp4\n,\n  \nmediaid\n: \nddrx3v2\n,\n  \nimage\n: \nmyImage.png\n,\n    \nadschedule\n: {\n      \nmyPreroll\n: {\n      \noffset\n: \npre\n,\n      \ntag\n: \nmyAdTag.xml\n\n      },\n    \nmyMidroll\n: {\n      \noffset\n: 10,\n      \ntag\n: \nmyMidroll.xml\n\n      }\n    }\n  }]\n});\n\n\n\n\nSee our \nAdvertising\n section for more articles and examples\n\n\n\n\n\n\nSkin\n\n\nUsed for configuring JW Player's skins. The below default color values assume that the default \n\"seven\"\n skin is being used\n\n\nNote: In these examples, color can be specified as \nhex value\n values or as a \ncolor name\n.\n\n\n\n\n\n\n\n\nConfig\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nskin.name\n\n\nString\n\n\nThe skin to use for styling the player. JW Player includes \n9 premade skins\n\n\n\"seven\"\n\n\n\n\n\n\nskin.active\n\n\nString\n\n\nThe color of \"active\" skin elements.\n\n\n\"#ff0046\"\n\n\n\n\n\n\nskin.inactive\n\n\nString\n\n\nThe color of \"inactive\" skin elements\n\n\n\"#ffffff\"\n\n\n\n\n\n\nskin.background\n\n\nString\n\n\nThe color of a skin's background portion\n\n\n\"#000000\"\n\n\n\n\n\n\nskin.url\n\n\nString\n\n\nIf using an external CSS file to style your player, this can be specified here*\n\n\n-\n\n\n\n\n\n\n\n\n*If you are specifying \nskin.url\n, you will still need to specify \nskin.name\n and it must match the name in your .css file\n\n\nMore information regarding skins, see the following articles:\n\n\n\n\nCreating a Skin for JW Player\n\n\nCreating your own Font with JW Player\n\n\n\n\n\n\n\n\nCaptions\n\n\nThis options block configures the styling of closed captions in the player for desktop browsers. On iOS/Android, a system settings menu provides exactly the same settings, as these are mandated by the FCC.\n\n\nNote: When setting caption styles, color \nmust\n be specified as a \nhex value\n\n\n\n\n\n\n\n\nConfig\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncaptions.color\n\n\nString\n\n\nHex color of the captions text\n\n\n\"#ffffff\"\n\n\n\n\n\n\ncaptions.fontSize\n\n\nNumber\n\n\nSize of the captions text (Will not affect text size when rendering captions via browser)\n\n\n15\n\n\n\n\n\n\ncaptions.fontFamily\n\n\nString\n\n\nFont Family\n of the captions text\n\n\n\"sans\"\n\n\n\n\n\n\ncaptions.fontOpacity\n\n\nNumber\n\n\nAlpha percentage of the captions text\n\n\n100\n\n\n\n\n\n\ncaptions.backgroundColor\n\n\nString\n\n\nHex color of the caption characters background\n\n\n\"#000000\"\n\n\n\n\n\n\ncaptions.backgroundOpacity\n\n\nNumber\n\n\nAlpha percentage of the caption characters background\n\n\n75\n\n\n\n\n\n\ncaptions.edgeStyle\n\n\nString\n\n\nMethod by which the captions characters are separated from their background\n\n\n\"none\"\n\n\n\n\n\n\ncaptions.windowColor\n\n\nString\n\n\nHex color of the background of the entire captions area\n\n\n\"#000000\"\n\n\n\n\n\n\ncaptions.windowOpacity\n\n\nNumber\n\n\nAlpha percentage of the background of the entire captions area\n\n\n0\n\n\n\n\n\n\n\n\nSee \nStyling Captions for FCC Compliance\n for more information.\n\n\n\n\n\n\nRTMP\n\n\nThis options block controls the \nspecific\n functions of the RTMP streaming protocol. These settings do not apply to HLS or DASH.\n\n\nNote: RTMP \nrequires\n the installation of \nAdobe Flash\n and will not work on mobile devices\n\n\n\n\n\n\n\n\nConfig\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nrtmp.bufferlength\n\n\nNumber\n\n\nThis option controls how much buffer, in seconds, to load before playing back. A small buffer means faster starts/seeks, but a higher chance of re-buffering.\n\n\n3\n\n\n\n\n\n\nrtmp.subscribe\n\n\nBoolean\n\n\nThis option enables the FC Subscribe mechanism use by older streaming servers to manage load balancing\n\n\nfalse\n\n\n\n\n\n\nrtmp.securetoken\n\n\nString\n\n\nThis option, supported for older Wowza instances, provides a security token to JW Player, which then amends this option to the RTMP application URL\n\n\n-\n\n\n\n\n\n\n\n\nSee \nUsing RTMP Streaming\n for more information.\n\n\n\n\n\n\nLogo\n\n\nThis options block configures a clickable watermark that is overlayed on the video.\n\n\n\n\n\n\n\n\nConfig\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nlogo.file\n\n\nString\n\n\nThe URL of an external JPG, PNG or GIF image to be used as watermark (e.g. /assets/logo.png). We recommend using 24 bit PNG images with transparency\n\n\n-\n\n\n\n\n\n\nlogo.hide\n\n\nBoolean\n\n\nWhen this option is set to true, the logo will automatically show and hide along with the other player controls\n\n\nfalse\n\n\n\n\n\n\nlogo.link\n\n\nString\n\n\nThe URL to visit when the watermark image is clicked. Clicking a logo will have no affect unless this is configured\n\n\n-\n\n\n\n\n\n\nlogo.margin\n\n\nNumber\n\n\nThe distance, in pixels, of the logo from the edges of the display\n\n\n8\n\n\n\n\n\n\nlogo.position\n\n\nString\n\n\nThis sets the corner in which to display the watermark. \n \n\"top-left\" \n \"top-right\" \n\"bottom-left\"\n \"bottom-right\"\n\n\n\"top-right\"\n\n\n\n\n\n\n\n\nSee \nBranding Your Player\n for more information.\n\n\n\n\n\n\nSharing\n\n\nThis options block controls an overlay with social sharing options: copy embed code, copy video link and share video to social networks.\n\n\nSetting an empty \n\"sharing\":{}\n options block will enable the social sharing overlay. Without the nested config options, it will show the page URL link with default sharing sites, but no embed code.\n\n\n\n\n\n\n\n\nConfig\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nsharing.link\n\n\nString\n\n\nURL to display in the video link field\n\n\nURL of the current page\n\n\n\n\n\n\nsharing.code\n\n\nString\n\n\nEmbed code to display in the embed code field. If no code is set, the field is not shown\n\n\n-\n\n\n\n\n\n\nsharing.heading\n\n\nString\n\n\nShort, instructive text to display at the top of the sharing screen\n\n\n\"Share Video\"\n\n\n\n\n\n\nsharing.sites\n\n\nArray\n\n\nAllows for the customization of social icons\n\n\n[\"facebook\",\"twitter\",\"email\"]\n\n\n\n\n\n\n\n\nAvailable Built-In Social Networks\n\n\n\n\n\n\n\n\nSocial Network\n\n\nConfiguration Value\n\n\n\n\nSocial Network\n\n\nConfiguration Value\n\n\n\n\n\n\n\n\n\n\nFacebook\n\n\n\"facebook\"\n\n\n\n\nTumblr\n\n\n\"tumblr\"\n\n\n\n\n\n\nTwitter\n\n\n\"twitter\"\n\n\n\n\nGoogle Plus\n\n\n\"googleplus\"\n\n\n\n\n\n\nPinterest\n\n\n\"interest\"\n\n\n\n\nReddit\n\n\n\"reddit\"\n\n\n\n\n\n\nEmail\n\n\n\"email\"\n\n\n\n\nLinkedIn\n\n\n\"linkedin\"\n\n\n\n\n\n\n\n\nExample:\n\n\njwplayer(\nmyElement\n).setup({\n  \nfile\n: \nhttp://example.com/myVideo.mp4\n,\n  \nsharing\n: {\n    \nsites\n: [\nreddit\n,\nfacebook\n,\ntwitter\n]\n  }\n});\n\n\n\n\nSee \nSocial Sharing Overlay\n for more information.\n\n\n\n\n\n\nGoogle Analytics (ga)\n\n\nThis options block configures the built-in integration with Google Analytics.\n\n\nNote: Google's separate \nanalytics.js\n JavaScript library and config needs to be included in your page's head in order to send events with JW Player.\n\n\nSetting an empty \n\"ga\":{}\n options block will enable basic Google Analytics integration. No additional nested config options are required.\n\n\n\n\n\n\n\n\nConfig\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nga.label\n\n\nString\n\n\nSend another playlist property, like \"title\" or \"mediaid\", as your event label in Google Analytics\n\n\n\"file\"\n\n\n\n\n\n\n\n\nSee \nConnecting Google Analytics\n for more information.\n\n\n\n\n\n\nRelated\n\n\nThis options block controls an overlay with related videos.\n\n\n\n\n\n\n\n\nConfig\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nrelated.file\n\n\nString\n\n\n(Required)\n Location of an RSS or JSON file containing a feed of related videos\n\n\n-\n\n\n\n\n\n\nrelated.oncomplete\n\n\nString\n\n\nThe behavior of our related videos overlay when a single video or playlist is completed \n \n\"hide\"\n: Replay button and related icon will appear \n \n\"show\"\n: Display the related overlay \n \n\"autoplay\"\n: automatically play the next video in your related feed after 10 seconds. Automatically sets onclick behavior to \n\"play\"\n\n\n\"show\"\n\n\n\n\n\n\nrelated.heading\n\n\nString\n\n\nSingle line heading displayed above the grid with related videos. Generally contains a short call-to-action\n\n\n\"Related Videos\"\n\n\n\n\n\n\nrelated.autoplaytimer\n\n\nNumber\n\n\nThe number of seconds to wait before playing the next related video in your content list. Set to 0 to have your next related content to play immediately\n\n\n10\n\n\n\n\n\n\nrelated.autoplaymessage\n\n\nString\n\n\nA custom message that appears during autoplay. \n \nNote:\n \nxx\n will be replaced by the countdown timer\n \nNote:\n \n__title__\n will be replaced by the next title in the related feed.\n\n\n\"\n_title__ will play in xx seconds\"\n\n\n\n\n\n\n\n\nSee \nDisplay Related Videos\n for more information.\n\n\n\n\n\n\nAdvertising\n\n\n!!!important\nVideo ad insertion requires a JW Player Platinum or Enterprise license. Please \ncontact our team\n to upgrade your account.\n!!!\n\n\nThis options block configures the video advertising capabilities of JW Player. If no \nschedule\n is specified, the ad will play as a preroll by default.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nadvertising.client\n\n\nString\n\n\n(Required for Advertising)\n Chooses the ad client that will be used to display advertisements:\n\"vast\":\n Use the JW Player VAST client \n \n\"googima\"\n: Use the Google IMA SDK - Required for certain ad tags \n \n\"freewheel\"\n: Use the FreeWheel client\n\n\n-\n\n\n\n\n\n\nadvertising.tag\n\n\nString\n\n\nThe URL of the VAST tag to display, or custom string of the FreeWheel tag to display\n\n\n-\n\n\n\n\n\n\nadvertising.admessage\n\n\nString\n\n\nText that displays during ad playback\n\n\n\"The ad will end in xx seconds\"\n\n\n\n\n\n\nadvertising.skipoffset\n\n\nNumber\n\n\nIf not present in the VAST file, adds a skip offset to static VAST ads\n\n\n-\n\n\n\n\n\n\nadvertising.cuetext\n\n\nString\n\n\nSpecify the text that appears when a user mouses over a scheduled advertisement\n\n\n\"Advertisement\"\n\n\n\n\n\n\nadvertising.skipmessage\n\n\nString\n\n\nThis is used to provide a customized countdown message\n\n\n\"Skip ad in xx\"\n\n\n\n\n\n\nadvertising.skiptext\n\n\nString\n\n\nThis sets the text of the Skip button after the countdown is over\n\n\n\"Skip\"\n\n\n\n\n\n\nadvertising.vpaidmode\n\n\nString\n\n\nUsed exclusively for \nGoogle IMA VPAID ads\n\"disabled\":\n VPAID ads will not play and an error will be returned if VPAID is requested \n \n\"enabled\"\n: VPAID is enabled using a cross domain iframe. The VPAID ad cannot access the site. VPAID ads that depend on friendly iframe access may not play\n\"insecure\":\n The VPAID ad will load in a friendly iframe. This allows the ad access to the site via javascript \n Not supported in FreeWheel\n\n\n\"insecure\"\n\n\n\n\n\n\nadvertising.schedule\n\n\nString or Object\n\n\nLoad an ad schedule from an external VMAP XML or JSON block. \nadvertising.tag\n is ignored if this option is set\n\n\n-\n\n\n\n\n\n\nadvertising.companiondiv\n\n\nObject\n\n\nGives information to the player related to which div(s) to populate with companion ads. \n Not supported in FreeWheel\n\n\n-\n\n\n\n\n\n\nadvertising.autoplayadsmuted\n\n\nBoolean\n\n\nFor inline players that start muted when viewed on mobile devices, allows ads to play muted\n\n\n-\n\n\n\n\n\n\nadvertising.enablepreloading\n\n\nBoolean\n\n\nFor disabling ad preloading when using IMA\n\n\n-\n\n\n\n\n\n\nadvertising.vpaidcontrols\n\n\nBoolean\n\n\nFor forcing controls to show for VPAID ads. Note: if the VPAID creative has built-in controls, showing the controls may be redundant\n\n\n-\n\n\n\n\n\n\nadvertising.forceNonLinearFullSlot\n\n\nBoolean\n\n\nFor forcing nonlinear ads to be fullsot ads rather than overlays. Note: only supported when using IMA\n\n\n-\n\n\n\n\n\n\nadvertising.setLocale\n\n\nString\n\n\nTwo-letter language code for localization of skip-button language. Two-letter language code must be valid. Note: only supported when using IMA\n\n\n-\n\n\n\n\n\n\nadvertising.creativeTimeout\n\n\nString\n\n\nIn milliseconds, the time between the VAST XML being returned and the adstart event. \n Note: only supported when using VAST\n\n\n15000\n\n\n\n\n\n\nadvertising.requestTimeout\n\n\nString\n\n\nIn milliseconds, the time between the ad request and a returned VAST file. \n Note: only supported when using VAST\n\n\n5000\n\n\n\n\n\n\n\n\n\n\n\n\nadvertising.schedule\n\n\nUse this option to load an entire advertising schedule to JW Player, containing multiple ad breaks. The option can be a URL to a VMAP schedule or an inline JSON block with ads. This schedule will then be applied to each playlist item. For scheduling ads for individual playlist items, see \nscheduling ads for playlist items\n\n\n\n\nAd Schedules with VMAP Files\n\n\nIf you are planning on using a VMAP file, simply link to a VMAP .xml file within the advertising block.\n\n\njwplayer(\nmyElement\n).setup({\n  \nfile\n: \nhttp://example.com/myVideo.mp4\n,\n  \nadvertising\n: {\n    \nclient\n: \nvast\n,\n    \nschedule\n: \nmyvmap.xml\n\n  }\n});\n\n\n\n\nThe VMAP schedule will then be applied to each playlist item. See our article about VMAP schedules for more information.\n\n\n\n\nEmbedded Ad Schedules with JSON\n\n\nIn order to use a JSON-formatted schedule, you'll need at least one \nad break\n configured inside of an \nadvertising\n block. Each ad break is required to have a unique name, and should include a tag and offset.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nadvertising.schedule.\nadbreak\n.tag\n\n\nString\n\n\nThe ad tag that is called during the configured ad break\n\n\n-\n\n\n\n\n\n\nadvertising.schedule.\nadbreak\n.offset\n\n\nString or Number\n\n\nWhen to play the configured ad tag\n\"pre\":\n Ad plays as a preroll \n\"post\":\n Ad plays as a postroll\n\"xx%\":\n Ad plays after xx% of the content\nnumber:\n Ad plays after the specified number of seconds\n\n\n\"pre\"\n\n\n\n\n\n\n\n\njwplayer(\nmyElement\n).setup({\n  \nfile\n: \nhttp://example.com/myVideo.mp4\n,\n  \nadvertising\n: {\n    \nclient\n: \nvast\n,\n    \nschedule\n: {\n      \nadbreak-preroll\n:{\n        \ntag\n: \nmyPreroll.xml\n,\n        \noffset\n: \npre\n\n      },\n      \nadbreak-midroll\n:{\n        \ntag\n: \nmyMidroll.xml\n,\n        \noffset\n: \n50%\n\n      }\n    }\n  }\n});\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nadvertising.schedule.\nadbreak\n.custParams\n\n\nObject\n\n\nAllows for passing custom parameters to an ad break, which then pass through to the URL requested from the ad server\n\n\n-\n\n\n\n\n\n\n\n\nadvertising\n: {\n        \nclient\n: \ngoogima\n,\n        \nadscheduleid\n: \n12345\n,\n        \nschedule\n: {\n            \npreroll\n: {\n                \ncustParams\n: {\n                    \ntestkey1\n: \ntestval1\n,\n                    \ntestkey2\n: \ntestval2\n\n                },\n                \ntag\n: \nmyPreroll.xml\n,\n                \noffset\n: \npre\n\n            }\n        }\n    }\n\n\n\n\n\n\n\n\nadvertising.companiondiv\n\n\nThis is a configuration block object with 3 properties: id, width and height. Set these to have JW Player load a companion ad from your VAST/IMA tag into a div on your page. See \nCompanion Ads\n for more info.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nadvertising.companiondiv.height\n\n\nNumber\n\n\nThe targeted desired height of a companion ad that exists in a VAST ad\n\n\n\n\n\n\nadvertising.companiondiv.width\n\n\nNumber\n\n\nThe targeted desired width of a companion ad that exists in a VAST ad\n\n\n\n\n\n\nadvertising.companiondiv.id\n\n\nString\n\n\nThe ID of the div to replace with a companion ad\n\n\n\n\n\n\n\n\nFor an overview of JW Player's advertising capabilities, see its dedicated \nVideo Ads section\n.\n\n\n\n\n\n\nDRM\n\n\n!!!important\nVideo content protection requires a JW Player Enterprise license. Please \ncontact our team\n to upgrade your account.\n!!!\n\n\nConfiguration options related to DRM for MPEG DASH (Playready, Widevine, Clearkey) and HLS streams (Fairplay).\n\n\nJW Player 7.7 includes the ability to add DRM to a specific playlist source. Using this method will allow your browser to choose the correct DRM method when multiple DRM types are configured. We \nhighly\n suggest updating any configurations to use this new method.\n\n\nFor more information regarding DRM, and for examples, please view our \nsupport article\n\n\ndrm.playready\n\n\nPlayready DRM is specific to Internet Explorer 11 and Edge on Windows 8.1 or higher operating systems\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndrm.playready.url\n\n\nString\n\n\n(Required)\n The URL of the PlayReady license server\n\n\n-\n\n\n\n\n\n\ndrm.playready.headers\n\n\nArray\n\n\nSpecifies the custom http headers to send to your playready license server. See \nheaders\n for more information\n\n\n-\n\n\n\n\n\n\n\n\n\n\ndrm.widevine\n\n\nWidevine DRM is specific to Google Chrome on non-iOS devices. Widevine will also function on Firefox browsers for desktop systems.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndrm.widevine.url\n\n\nString\n\n\n(Required)\n The URL of the WideVine license server\n\n\n-\n\n\n\n\n\n\ndrm.widevine.serverCertificateUrl\n\n\nString\n\n\n(Required)\n The URL of the WideVine service certificate\n\n\n-\n\n\n\n\n\n\ndrm.widevine.headers\n\n\nArray\n\n\nSpecifies the custom http headers to send to your widevine license server requests. See \nheaders\n for more information\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\ndrm.[widevine/playready].headers\n7.7\n\n\nAdding customized HTTP header data to license requests is possible in JW 7.7+ with the \"headers\" configuration. This replaces the static \"customData\" configuration option in both widevine and playready scenarios. It is also possible to add multiple custom http headers by including multiple objects in the \"headers\" array.\n\n\nIn JW 7.7+, this can be configured in the following way:\n\n\ndrm\n: {\n  \nplayready\n: {\n  \nurl\n: \nmydrmserver.com\n\n  \nheaders\n: [{\n    \nname\n: \ncustomData\n,\n    \nvalue\n: \nhereismycustomdatastring\n\n    }]\n  }\n}\n\n\n\n\nIn previous versions, adding \"customData\" would look like the following:\n\n\ndrm\n: {\n  \nplayready\n: {\n  \nurl\n: \nmydrmserver.com\n\n  \ncustomData\n: \nhereismycustomdatastring\n\n  }\n}\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nheaders.name\n\n\nString\n\n\nThe name of the http header that will be included\n\n\n\n\n\n\nheaders.value\n\n\nString\n\n\nThe value of the http header that will be included\n\n\n\n\n\n\n\n\n\n\ndrm.fairplay\n7.7\n\n\nJW Player 7.7 includes new configuration options for custom Fairplay integrations, replacing 'url' and 'keyUrl' options from 7.5. For more information and examples regarding custom Fairplay DRM integrations, please view our \nsupport article\n.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndrm.fairplay.certificateUrl\n\n\nString\n\n\n(Required)\n The path to the certificate which is part of the session data used to initialize the keySession.certificateUrl\n\n\n\n\n\n\ndrm.fairplay.processSpcUrl\n\n\nString or Function\n\n\n(Required)\n The path to the license server (server playback context) which provides the ckc. Expects a direct url to the server. If the url needs to be constructed dynamically, a custom function can be passed to this configuration option which returns the url\n\n\n\n\n\n\ndrm.fairplay.extractContentId\n\n\nFunction\n\n\nExpects a function that receives the initData uri (converted to a string) from the needkey event, and returns the contentId which is part of the session data used to initialize the keySession\n\n\n\n\n\n\ndrm.fairplay.licenseRequestHeaders\n\n\nArray\n\n\nExpects an Array of Objects containing header \u201cname\u201d and \u201cvalue\u201d properties to be included in the request to the license server\n\n\n\n\n\n\ndrm.fairplay.licenseResponseType\n\n\nString\n\n\nSpecifies the data type returned by the XHR request to the license server. The default value is 'arraybuffer'. Other options include 'blob', 'json', and 'text'. This option impacts how \u201clicenseRequestMessage\u201d will be processed\n\n\n\n\n\n\ndrm.fairplay.licenseRequestMessage\n\n\nFunction\n\n\nExpects a function that receives the license key message and returns the message to be sent to the license server. With the default \u201clicenseResponseType\u201d of ArrayBuffer this function passes through keymessage event message property without any changes\n\n\n\n\n\n\ndrm.fairplay.extractKey\n\n\nFunction\n\n\nExpects a function that receives the ckc returned by the license server and returns the key used to update the active key session. If the key can only be extracted asynchronously (for example reading bytes from a \u2018blob\u2019 response), this function can return a promise\n\n\n\n\n\n\n\n\n\n\ndrm.clearkey\n\n\nA basic form of DRM that lists a decryption key inside of your player configuration. This is the least secure form of DRM, though it is the simplest to implement across browsers. There are no additional server resources required to decrypt content with this method. Clearkey is supported in both Chrome and Firefox browsers.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndrm.clearkey.key\n\n\nString\n\n\n(Required)\n The key required to decrypt DRM content\n\n\n\n\n\n\ndrm.clearkey.keyId\n7.7\n\n\nString\n\n\n(Required in 7.7+)\n The key ID specified in the mpd's \ndefault_KID\n value\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLocalization\n7.7\n\n\nUsing the localization block in a player configuration allows you to configure certain words and phrases in the JW Player Next Up interface. The available options are below.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nlocalization.nextUp\n\n\nString\n\n\noverride for the \"Next Up\" prompt\n\n\n\"Next Up\"\n\n\n\n\n\n\nlocalization.playlist\n\n\nString\n\n\nTitle of the Next Up tooltip in Playlist mode\n\n\n\"Playlist\"\n\n\n\n\n\n\nlocalization.related\n\n\nString\n\n\nTitle of the Next Up tooltip in Related mode\n\n\n\"Related\"", 
            "title": "JW7 Configuration Reference"
        }, 
        {
            "location": "/jw7/configuration-reference/#jw-player-configuration-reference", 
            "text": "This article acts a reference to all configuration options JW Player supports. Configuration options tell a player instance which media to play and how to layout and behave on your page.  !!!important\nCertain JW Player features may require a specific license. Please  contact our team  to upgrade your account.\n!!!     Table Of Contents        Setup Options  The Playlist  Skin    Captions  RTMP  Logo    Sharing  Google Analytics  Related    Advertising  DRM  Localization", 
            "title": "JW Player Configuration Reference"
        }, 
        {
            "location": "/jw7/configuration-reference/#introduction", 
            "text": "JW Player contains a large number of features and options that can be configured inside of the player setup.  Some options, like  width  or  mute , are directly placed into the setup. Other, more advanced options, are grouped into nested blocks, like  skin  or  advertising .  Here is an example setup that contains both  setup  options and specific  advertising  options:  jwplayer( myElement ).setup({\n   file :  http://example.com/myVideo.mp4 ,\n   height : 360,\n   width : 640,\n   autostart : true,\n   advertising : {\n         client :  vast ,\n         tag :  http://adserver.com/vastTag.xml \n    }\n});  Web developers will recognize the JavaScript Object Notation ( JSON ) syntax of these setup blocks. While configuring player setups, beware of common JSON requirements, like the need for a comma after all but the last element in a list.", 
            "title": "Introduction"
        }, 
        {
            "location": "/jw7/configuration-reference/#setup-options", 
            "text": "These are the options for configuring the layout and playback behavior of a player. Each is placed directly into the  setup  of the player  The following properties are related to media that is loaded into the player.  If only a single playlist item is used, this information can either be configured directly inside of  setup . If you are planning on using multiple media items, these can also be used inside of a  playlist  array.", 
            "title": "Setup Options"
        }, 
        {
            "location": "/jw7/configuration-reference/#media", 
            "text": "Setting  Type  Description  Default      file  String  (Required)  URL to a single video file, audio file, YouTube video or live stream to play. Can also be configured inside of a  sources  array  -    image  String  URL to a poster image to display before playback starts.  -    title  String  The title of your video or audio item  -    description  String  A description of your video or audio item  -    mediaid  String  Unique identifier of this item. Used by advertising, analytics and discovery services  -", 
            "title": "Media"
        }, 
        {
            "location": "/jw7/configuration-reference/#behavior", 
            "text": "Setting  Type  Description  Default      mute  Boolean  Configures if the player should be muted during playback  false    autostart  String  Whether the player will attempt to begin playback automatically when a page is loaded. Set to 'viewable' to have player autostart if 50% is viewable.  false    nextupoffset 7.7  Number  Configures when the Next Up card displays when transitioning between playlist items. A positive value is an offset from the start of the video. A negative number is an offset from the end of the video  -10    repeat  Boolean  Configures if the player should loop content after a playlist completes  false    abouttext  String  Custom text to display in the right-click menu  -    aboutlink  String  Custom URL to link to when clicking the right-click menu  \"https://www.jwplayer.com/learn-more\"    playbackRateControls 7.12  Boolean or Array of Numbers  Whether to display a button in the controlbar to adjust playback speed. If true, the pre-defined options available in the menu are 0.5x, 1x, 1.25x, 1.5x, and 2x. Instead of true, an array can be passed to customize the menu options. For example: \"playbackRateControls\": [0.25, 0.75, 1, 1.25].  false", 
            "title": "Behavior"
        }, 
        {
            "location": "/jw7/configuration-reference/#appearance", 
            "text": "Setting  Type  Description  Default      controls  Boolean  Whether to display the video controls (controlbar, display icons and dock buttons)  true    localization 7.7  Object  Changes text for the player in certain locations  -    aspectratio  String  Maintains proportions when width is a percentage. Will not be used if the player is a static size.    Note:  Must be entered in ratio \"x:y\" format  -    height  Number  The desired height of your video player (In pixels). Can be omitted when aspectratio is configured  270    width  Number or String  The desired height of your video player (In pixels or percentage)  480    displaytitle  Boolean  Configures if the title of a media file should be displayed  true    displaydescription  Boolean  Configures if the description title of a media file should be displayed  true    stretching  String  Resize images and video to fit player dimensions. See graphic below for examples    \"uniform\":  Fits JW Player dimensions while maintaining aspect ratio    \"exactfit\":  Will fit JW Player dimensions without maintaining aspect ratio  \"fill\":  Will zoom and crop video\u00a0to fill dimensions,\u00a0maintaining aspect ratio    \"none\":  Displays the actual size of the video file. (Black borders)  \"uniform\"    timeSliderAbove  Boolean  Configures whether the timeslider is dynamic based on size, is always above, or never above  -    nextUpDisplay  Boolean  Configures whether the Next Up modal is displayed  -    qualityLabels  Array  By default, the JW Player will set video quality levels using information from the manifest files. Use this configuration option to apply a custom quality label to a desired bandwidth in kbps, works for HLS and DASH. For example: \"qualityLabels\":{\"2500\":\"High\",\"1000\":\"Medium\"}  -", 
            "title": "Appearance"
        }, 
        {
            "location": "/jw7/configuration-reference/#stretching-examples", 
            "text": "", 
            "title": "Stretching Examples:"
        }, 
        {
            "location": "/jw7/configuration-reference/#rendering-and-loading", 
            "text": "Setting  Type  Description  Default      primary  String  Sets the default player rendering mode. \"flash\":  Player will attempt to render with Flash \"html5\":  Player will attempt to render in HTML5  \"html5\"    flashplayer  String  Specifies an alternate directory of  jwplayer.flash.swf  \"/\"    base  String  Configures an alternate base path for skins and providers  \"/\"    preload  String  Tells the player if content should be loaded prior to playback. Useful for faster playback speed or if certain metadata should be loaded prior to playback:  \"none\":  Player will explicitly  not  preload content  \"metadata\":  Only basic playback information will be loaded   \"auto\":  Browser attempts to load more of the video  If you are concerned about excess content usage, we suggest setting  \"preload\":\"none\"  *", 
            "title": "Rendering and Loading"
        }, 
        {
            "location": "/jw7/configuration-reference/#if-no-preload-option-is-selected-in-html5-mode-jw-player-will-rely-on-a-browsers-default-video-preload-behavior", 
            "text": "", 
            "title": "*If no preload option is selected in HTML5 mode, JW Player will rely on a browser's default &lt;video&gt; preload behavior"
        }, 
        {
            "location": "/jw7/configuration-reference/#playlist", 
            "text": "The playlist is a powerful feature of JW Player, used to play multiple video or audio files.  A playlist can be either a  string , referring to the URL of an RSS feed or JSON file, or an  array  of media objects.", 
            "title": "Playlist"
        }, 
        {
            "location": "/jw7/configuration-reference/#configuring-playlist-as-a-string", 
            "text": "jwplayer( myElement ).setup({\n   playlist :  http://example.com/myPlaylist.json \n});", 
            "title": "Configuring Playlist as a String"
        }, 
        {
            "location": "/jw7/configuration-reference/#configuring-playlist-as-an-array", 
            "text": "jwplayer( myElement ).setup({\n     playlist : [{\n         file :  /assets/sintel.mp4 ,\n         image :  /assets/sintel.jpg ,\n         title :  Sintel Trailer ,\n         mediaid :  ddra573 \n    },{\n         file :  /assets/bigbuckbunny.mp4 ,\n         image :  /assets/bigbuckbunny.jpg ,\n         title :  Big Buck Bunny Trailer ,\n         mediaid :  ddrx3v2 \n    }]\n});     Setting  Type  Description      playlist[ index ].file  String  (Required)  If no file is specified in your setup or sources, this is a required configuration option    playlist[ index ].withCredentials 7.5  Boolean  If true, \"withCredentials\" will be used to request a media file rather than CORS    playlist[ index ].title  String  Title of the item. This is displayed inside of the player prior to playback, as well as in the visual playlist. This can be hidden with the displaytitle option    playlist[ index ].description  String  Short description of the item. It is displayed below the title. This can be hidden with the displaydescription option.    playlist[ index ].image  String  Poster image URL. Displayed before and after playback.    playlist[ index ].mediaid  String  Unique identifier of this item. Used by advertising, analytics and discovery services    playlist[ index ].recommendations 7.6  String  URL to a feed that contains related items for a particular playlist item    playlist[ index ].minDvrWindow 7.7  Number  HLS-only  In seconds, the minimum amount of content in an M3U8 required to trigger DVR mode. Set to 0 to always display DVR mode.(Defaults to  120 )    playlist[index].stereomode  String  Used for playback of a spherical 360 Video. \"Monoscopic\" is the value supported at this time.    playlist index .sources  Array  Used for quality toggling and alternate sources    playlist index .tracks  Array  Include  captions ,  chapters , and  thumbnails  for media    playlist index .adschedule  Object  Schedule advertising for a specific media file     In addition to standard media information, (\"title\", \"description\", \"mediaid\") it is also possible to insert additional metadata, using custom properties. This information  must  be entered inside of a playlist, and cannot be set directly inside of a setup block.", 
            "title": "Configuring Playlist as an Array"
        }, 
        {
            "location": "/jw7/configuration-reference/#playlistindexsources", 
            "text": "Sources are inserted into playlist objects and are lists of files. Sources serve a dual purpose, depending on the files used:   Use different file types:  Alternate \"fallback\" media sources  Use the same file type:  Toggle quality with static video files", 
            "title": "playlist[index].sources[]"
        }, 
        {
            "location": "/jw7/configuration-reference/#alternate-media-sources", 
            "text": "If using different file types, sources prioritizes which file to play, based on order. For example, the player will attempt to play myVideo.m3u8 as a first choice. In the event that a browser cannot play an m3u8, the player is intelligent enough to choose myVideo.mp4 instead. In the event that an mp4 cannot be played, the player will attempt the webm format before producing an error.  jwplayer( myElement ).setup({\n   playlist : [{\n     title : One Playlist Item With Multiple Sources ,\n     description : Three Sources - One Playlist Item ,\n     image :  myImage.png ,\n     mediaid :  ddrx3v2 ,\n     sources : [{\n       file :  myVideo.m3u8 \n    },{\n       file :  myVideo.mp4 \n    },{\n       file :  myVideo.webm \n    }]\n  }]\n});", 
            "title": "Alternate Media Sources"
        }, 
        {
            "location": "/jw7/configuration-reference/#sources-with-drm77", 
            "text": "When using DRM, we highly suggest placing the drm block inside of the appropriate media source. This ensures the correct media and DRM pair gets chosen for the appropriate browser. For example:     sources : [{\n       file :  myFairplayStream.m3u8 ,\n       drm : {\n         fairplay : {\n           certificateUrl :  http://myfairplay.com/fairplay/cert ,\n           processSpcUrl :  http://myfairplay.com/fairplay/ckc \n        }\n      }\n    },{\n       file :  myWidevineStream.mpd ,\n       drm : {\n         widevine : {\n           url :  http://mywidevineurl.com/drm \n          }\n      }\n    },{\n       file :  myPlayreadyStream.mpd ,\n       drm : {\n         playready : {\n           url :  http://myplayreadyurl.com/drm \n          }\n      },{\n       file :  myClearkeyStream.mpd ,\n       drm : {\n         clearkey : {\n           key :  1234clear5678key ,\n           keyId :  fefde00d-efde-adbf-eff1-baadf01dd11d \n          }\n      }\n    }]  See our  drm  section for more information.", 
            "title": "Sources with DRM7.7"
        }, 
        {
            "location": "/jw7/configuration-reference/#quality-toggle-for-video-files", 
            "text": "In the event that a streaming technology like HLS or DASH cannot be used, listing video files of different qualities will enable a quality selection menu in the player control bar. Compared to other streaming methods, it has the following drawbacks:   No automatic switching, based on bandwidth or download speed  Changing qualities may cause playback stuttering  Pseudostreaming  may need to be configured in cases where Flash is used   jwplayer( myElement ).setup({\n   playlist : [{\n     title : One Playlist Item With Multiple Qualities ,\n     description : Two Qualities - One Playlist Item ,\n     sources : [{\n       file :  myVideo-720p.mp4 ,\n       label :  HD \n    },{\n     file :  myVideo-480p.mp4 ,\n     label :  SD \n    }]\n  }]\n});  In the above example, the player will add an \"HD\" button, allowing a user to toggle their desired video quality. If more than two sources are used, the player will instead overlay a quality selection menu, rather than a quality toggle.     Config  Type  Description      playlist[ index ].sources[].file  String  URL to the video file, audio file, YouTube video or live stream of this playlist item source.    playlist[ index ].sources[].label  String  Label of the media source, displayed in the manual HD selection menu. Set this if you have more than 2 qualities of your video.    playlist[ index ].sources[].type  String  Forces a media type. Only required when a file extension is missing or not recognized (Using .php or certain tokens, for example    playlist[ index ].sources[].default  Boolean  Set this to  true  for the media source you want to play on startup. If this isn't set for any source, the first one is used    playlist[ index ].sources[].drm 7.7  Object  An object containing DRM information for a particular source", 
            "title": "Quality Toggle for Video Files"
        }, 
        {
            "location": "/jw7/configuration-reference/#playlistindextracks", 
            "text": "Tracks can be attached to media for three possible reasons:  captions ,  thumbnails , or  chapters . Thumbnail and chapter files  must  be in WEBVTT format. Captions accept  WEBVTT ,  SRT , and  DFXP  format, though JW Player strongly suggests using  WEBVTT  if possible.     Config  Type  Description  Default      playlist[ index ].tracks[].file  String  URL to the captions, chapters or thumbnails text track file. See  Adding Closed Captions  for an example setup.  -    playlist[ index ].tracks[].kind  String  The kind of text track.    \"captions\":  Captions that display during video playback \"chapters\":  Places markers on the video control bar, displaying different sections \"thumbnails\":  A list of thumbnails that appear when the mouse cursor hovers on the control bar  \"captions\"    playlist[ index ].tracks[].label  String  Label of the text track. Is only used in setups with multiple captions, where the label is displayed in the CC selection menu.  index    playlist[ index ].tracks[].default  Boolean  Only for  captions . Set this to  true  if you want a captions track to display by default  -     When using the playlist to load an RSS feed, these options are set in the feed. See the  Media Formats Reference  for an mapping of all playlist options to RSS format.    !!!important\nVideo ad insertion requires a JW Player Platinum or Enterprise license. Please  contact our team  to upgrade your account.\n!!!", 
            "title": "playlist[index].tracks[]"
        }, 
        {
            "location": "/jw7/configuration-reference/#playlistindexadschedule", 
            "text": "The  playlist[ index ].adschedule  block is used for scheduling ad breaks throughout specific playlist items. Each  adbreak  should be given a unique name, and needs to be nested inside of an  adschedule  block.     Config  Type  Information      playlist[ index ].adschedule. adbreak .offset  String or Number  Specifies when the included tag should play during content. Can be  pre  for a preroll,  post  for a postroll, or a  %  or  number (In seconds), for a midroll    playlist[ index ].adschedule. adbreak .tag  String  This is used to set the ad tag for each adbreak within the ad schedule of a playlist item.     jwplayer( myElement ).setup({\n   playlist : [{\n   title : One Media Item ,\n   description : Only One media item in a playlist! ,\n   file :  myFile.mp4 ,\n   mediaid :  ddrx3v2 ,\n   image :  myImage.png ,\n     adschedule : {\n       myPreroll : {\n       offset :  pre ,\n       tag :  myAdTag.xml \n      },\n     myMidroll : {\n       offset : 10,\n       tag :  myMidroll.xml \n      }\n    }\n  }]\n});  See our  Advertising  section for more articles and examples", 
            "title": "playlist[index].adschedule"
        }, 
        {
            "location": "/jw7/configuration-reference/#skin", 
            "text": "Used for configuring JW Player's skins. The below default color values assume that the default  \"seven\"  skin is being used", 
            "title": "Skin"
        }, 
        {
            "location": "/jw7/configuration-reference/#note-in-these-examples-color-can-be-specified-as-hex-value-values-or-as-a-color-name", 
            "text": "Config  Type  Description  Default      skin.name  String  The skin to use for styling the player. JW Player includes  9 premade skins  \"seven\"    skin.active  String  The color of \"active\" skin elements.  \"#ff0046\"    skin.inactive  String  The color of \"inactive\" skin elements  \"#ffffff\"    skin.background  String  The color of a skin's background portion  \"#000000\"    skin.url  String  If using an external CSS file to style your player, this can be specified here*  -     *If you are specifying  skin.url , you will still need to specify  skin.name  and it must match the name in your .css file  More information regarding skins, see the following articles:   Creating a Skin for JW Player  Creating your own Font with JW Player", 
            "title": "Note: In these examples, color can be specified as hex value values or as a color name."
        }, 
        {
            "location": "/jw7/configuration-reference/#captions", 
            "text": "This options block configures the styling of closed captions in the player for desktop browsers. On iOS/Android, a system settings menu provides exactly the same settings, as these are mandated by the FCC.", 
            "title": "Captions"
        }, 
        {
            "location": "/jw7/configuration-reference/#note-when-setting-caption-styles-color-must-be-specified-as-a-hex-value", 
            "text": "Config  Type  Description  Default      captions.color  String  Hex color of the captions text  \"#ffffff\"    captions.fontSize  Number  Size of the captions text (Will not affect text size when rendering captions via browser)  15    captions.fontFamily  String  Font Family  of the captions text  \"sans\"    captions.fontOpacity  Number  Alpha percentage of the captions text  100    captions.backgroundColor  String  Hex color of the caption characters background  \"#000000\"    captions.backgroundOpacity  Number  Alpha percentage of the caption characters background  75    captions.edgeStyle  String  Method by which the captions characters are separated from their background  \"none\"    captions.windowColor  String  Hex color of the background of the entire captions area  \"#000000\"    captions.windowOpacity  Number  Alpha percentage of the background of the entire captions area  0     See  Styling Captions for FCC Compliance  for more information.", 
            "title": "Note: When setting caption styles, color must be specified as a hex value"
        }, 
        {
            "location": "/jw7/configuration-reference/#rtmp", 
            "text": "This options block controls the  specific  functions of the RTMP streaming protocol. These settings do not apply to HLS or DASH.", 
            "title": "RTMP"
        }, 
        {
            "location": "/jw7/configuration-reference/#note-rtmp-requires-the-installation-of-adobe-flash-and-will-not-work-on-mobile-devices", 
            "text": "Config  Type  Description  Default      rtmp.bufferlength  Number  This option controls how much buffer, in seconds, to load before playing back. A small buffer means faster starts/seeks, but a higher chance of re-buffering.  3    rtmp.subscribe  Boolean  This option enables the FC Subscribe mechanism use by older streaming servers to manage load balancing  false    rtmp.securetoken  String  This option, supported for older Wowza instances, provides a security token to JW Player, which then amends this option to the RTMP application URL  -     See  Using RTMP Streaming  for more information.", 
            "title": "Note: RTMP requires the installation of Adobe Flash and will not work on mobile devices"
        }, 
        {
            "location": "/jw7/configuration-reference/#logo", 
            "text": "This options block configures a clickable watermark that is overlayed on the video.     Config  Type  Description  Default      logo.file  String  The URL of an external JPG, PNG or GIF image to be used as watermark (e.g. /assets/logo.png). We recommend using 24 bit PNG images with transparency  -    logo.hide  Boolean  When this option is set to true, the logo will automatically show and hide along with the other player controls  false    logo.link  String  The URL to visit when the watermark image is clicked. Clicking a logo will have no affect unless this is configured  -    logo.margin  Number  The distance, in pixels, of the logo from the edges of the display  8    logo.position  String  This sets the corner in which to display the watermark.    \"top-left\"   \"top-right\"  \"bottom-left\"  \"bottom-right\"  \"top-right\"     See  Branding Your Player  for more information.", 
            "title": "Logo"
        }, 
        {
            "location": "/jw7/configuration-reference/#sharing", 
            "text": "This options block controls an overlay with social sharing options: copy embed code, copy video link and share video to social networks.  Setting an empty  \"sharing\":{}  options block will enable the social sharing overlay. Without the nested config options, it will show the page URL link with default sharing sites, but no embed code.     Config  Type  Description  Default      sharing.link  String  URL to display in the video link field  URL of the current page    sharing.code  String  Embed code to display in the embed code field. If no code is set, the field is not shown  -    sharing.heading  String  Short, instructive text to display at the top of the sharing screen  \"Share Video\"    sharing.sites  Array  Allows for the customization of social icons  [\"facebook\",\"twitter\",\"email\"]", 
            "title": "Sharing"
        }, 
        {
            "location": "/jw7/configuration-reference/#available-built-in-social-networks", 
            "text": "Social Network  Configuration Value   Social Network  Configuration Value      Facebook  \"facebook\"   Tumblr  \"tumblr\"    Twitter  \"twitter\"   Google Plus  \"googleplus\"    Pinterest  \"interest\"   Reddit  \"reddit\"    Email  \"email\"   LinkedIn  \"linkedin\"", 
            "title": "Available Built-In Social Networks"
        }, 
        {
            "location": "/jw7/configuration-reference/#example", 
            "text": "jwplayer( myElement ).setup({\n   file :  http://example.com/myVideo.mp4 ,\n   sharing : {\n     sites : [ reddit , facebook , twitter ]\n  }\n});  See  Social Sharing Overlay  for more information.", 
            "title": "Example:"
        }, 
        {
            "location": "/jw7/configuration-reference/#google-analytics-ga", 
            "text": "This options block configures the built-in integration with Google Analytics.", 
            "title": "Google Analytics (ga)"
        }, 
        {
            "location": "/jw7/configuration-reference/#note-googles-separate-analyticsjs-javascript-library-and-config-needs-to-be-included-in-your-pages-head-in-order-to-send-events-with-jw-player", 
            "text": "Setting an empty  \"ga\":{}  options block will enable basic Google Analytics integration. No additional nested config options are required.     Config  Type  Description  Default      ga.label  String  Send another playlist property, like \"title\" or \"mediaid\", as your event label in Google Analytics  \"file\"     See  Connecting Google Analytics  for more information.", 
            "title": "Note: Google's separate analytics.js JavaScript library and config needs to be included in your page's head in order to send events with JW Player."
        }, 
        {
            "location": "/jw7/configuration-reference/#related", 
            "text": "This options block controls an overlay with related videos.     Config  Type  Description  Default      related.file  String  (Required)  Location of an RSS or JSON file containing a feed of related videos  -    related.oncomplete  String  The behavior of our related videos overlay when a single video or playlist is completed    \"hide\" : Replay button and related icon will appear    \"show\" : Display the related overlay    \"autoplay\" : automatically play the next video in your related feed after 10 seconds. Automatically sets onclick behavior to  \"play\"  \"show\"    related.heading  String  Single line heading displayed above the grid with related videos. Generally contains a short call-to-action  \"Related Videos\"    related.autoplaytimer  Number  The number of seconds to wait before playing the next related video in your content list. Set to 0 to have your next related content to play immediately  10    related.autoplaymessage  String  A custom message that appears during autoplay.    Note:   xx  will be replaced by the countdown timer   Note:   __title__  will be replaced by the next title in the related feed.  \" _title__ will play in xx seconds\"     See  Display Related Videos  for more information.", 
            "title": "Related"
        }, 
        {
            "location": "/jw7/configuration-reference/#advertising", 
            "text": "!!!important\nVideo ad insertion requires a JW Player Platinum or Enterprise license. Please  contact our team  to upgrade your account.\n!!!  This options block configures the video advertising capabilities of JW Player. If no  schedule  is specified, the ad will play as a preroll by default.     Option  Type  Description  Default      advertising.client  String  (Required for Advertising)  Chooses the ad client that will be used to display advertisements: \"vast\":  Use the JW Player VAST client    \"googima\" : Use the Google IMA SDK - Required for certain ad tags    \"freewheel\" : Use the FreeWheel client  -    advertising.tag  String  The URL of the VAST tag to display, or custom string of the FreeWheel tag to display  -    advertising.admessage  String  Text that displays during ad playback  \"The ad will end in xx seconds\"    advertising.skipoffset  Number  If not present in the VAST file, adds a skip offset to static VAST ads  -    advertising.cuetext  String  Specify the text that appears when a user mouses over a scheduled advertisement  \"Advertisement\"    advertising.skipmessage  String  This is used to provide a customized countdown message  \"Skip ad in xx\"    advertising.skiptext  String  This sets the text of the Skip button after the countdown is over  \"Skip\"    advertising.vpaidmode  String  Used exclusively for  Google IMA VPAID ads \"disabled\":  VPAID ads will not play and an error will be returned if VPAID is requested    \"enabled\" : VPAID is enabled using a cross domain iframe. The VPAID ad cannot access the site. VPAID ads that depend on friendly iframe access may not play \"insecure\":  The VPAID ad will load in a friendly iframe. This allows the ad access to the site via javascript   Not supported in FreeWheel  \"insecure\"    advertising.schedule  String or Object  Load an ad schedule from an external VMAP XML or JSON block.  advertising.tag  is ignored if this option is set  -    advertising.companiondiv  Object  Gives information to the player related to which div(s) to populate with companion ads.   Not supported in FreeWheel  -    advertising.autoplayadsmuted  Boolean  For inline players that start muted when viewed on mobile devices, allows ads to play muted  -    advertising.enablepreloading  Boolean  For disabling ad preloading when using IMA  -    advertising.vpaidcontrols  Boolean  For forcing controls to show for VPAID ads. Note: if the VPAID creative has built-in controls, showing the controls may be redundant  -    advertising.forceNonLinearFullSlot  Boolean  For forcing nonlinear ads to be fullsot ads rather than overlays. Note: only supported when using IMA  -    advertising.setLocale  String  Two-letter language code for localization of skip-button language. Two-letter language code must be valid. Note: only supported when using IMA  -    advertising.creativeTimeout  String  In milliseconds, the time between the VAST XML being returned and the adstart event.   Note: only supported when using VAST  15000    advertising.requestTimeout  String  In milliseconds, the time between the ad request and a returned VAST file.   Note: only supported when using VAST  5000", 
            "title": "Advertising"
        }, 
        {
            "location": "/jw7/configuration-reference/#advertisingschedule", 
            "text": "Use this option to load an entire advertising schedule to JW Player, containing multiple ad breaks. The option can be a URL to a VMAP schedule or an inline JSON block with ads. This schedule will then be applied to each playlist item. For scheduling ads for individual playlist items, see  scheduling ads for playlist items", 
            "title": "advertising.schedule"
        }, 
        {
            "location": "/jw7/configuration-reference/#ad-schedules-with-vmap-files", 
            "text": "If you are planning on using a VMAP file, simply link to a VMAP .xml file within the advertising block.  jwplayer( myElement ).setup({\n   file :  http://example.com/myVideo.mp4 ,\n   advertising : {\n     client :  vast ,\n     schedule :  myvmap.xml \n  }\n});  The VMAP schedule will then be applied to each playlist item. See our article about VMAP schedules for more information.", 
            "title": "Ad Schedules with VMAP Files"
        }, 
        {
            "location": "/jw7/configuration-reference/#embedded-ad-schedules-with-json", 
            "text": "In order to use a JSON-formatted schedule, you'll need at least one  ad break  configured inside of an  advertising  block. Each ad break is required to have a unique name, and should include a tag and offset.     Option  Type  Description  Default      advertising.schedule. adbreak .tag  String  The ad tag that is called during the configured ad break  -    advertising.schedule. adbreak .offset  String or Number  When to play the configured ad tag \"pre\":  Ad plays as a preroll  \"post\":  Ad plays as a postroll \"xx%\":  Ad plays after xx% of the content number:  Ad plays after the specified number of seconds  \"pre\"     jwplayer( myElement ).setup({\n   file :  http://example.com/myVideo.mp4 ,\n   advertising : {\n     client :  vast ,\n     schedule : {\n       adbreak-preroll :{\n         tag :  myPreroll.xml ,\n         offset :  pre \n      },\n       adbreak-midroll :{\n         tag :  myMidroll.xml ,\n         offset :  50% \n      }\n    }\n  }\n});     Option  Type  Description  Default      advertising.schedule. adbreak .custParams  Object  Allows for passing custom parameters to an ad break, which then pass through to the URL requested from the ad server  -     advertising : {\n         client :  googima ,\n         adscheduleid :  12345 ,\n         schedule : {\n             preroll : {\n                 custParams : {\n                     testkey1 :  testval1 ,\n                     testkey2 :  testval2 \n                },\n                 tag :  myPreroll.xml ,\n                 offset :  pre \n            }\n        }\n    }", 
            "title": "Embedded Ad Schedules with JSON"
        }, 
        {
            "location": "/jw7/configuration-reference/#advertisingcompaniondiv", 
            "text": "This is a configuration block object with 3 properties: id, width and height. Set these to have JW Player load a companion ad from your VAST/IMA tag into a div on your page. See  Companion Ads  for more info.     Option  Type  Description      advertising.companiondiv.height  Number  The targeted desired height of a companion ad that exists in a VAST ad    advertising.companiondiv.width  Number  The targeted desired width of a companion ad that exists in a VAST ad    advertising.companiondiv.id  String  The ID of the div to replace with a companion ad     For an overview of JW Player's advertising capabilities, see its dedicated  Video Ads section .", 
            "title": "advertising.companiondiv"
        }, 
        {
            "location": "/jw7/configuration-reference/#drm", 
            "text": "!!!important\nVideo content protection requires a JW Player Enterprise license. Please  contact our team  to upgrade your account.\n!!!  Configuration options related to DRM for MPEG DASH (Playready, Widevine, Clearkey) and HLS streams (Fairplay).  JW Player 7.7 includes the ability to add DRM to a specific playlist source. Using this method will allow your browser to choose the correct DRM method when multiple DRM types are configured. We  highly  suggest updating any configurations to use this new method.  For more information regarding DRM, and for examples, please view our  support article", 
            "title": "DRM"
        }, 
        {
            "location": "/jw7/configuration-reference/#drmplayready", 
            "text": "Playready DRM is specific to Internet Explorer 11 and Edge on Windows 8.1 or higher operating systems     Option  Type  Description  Default      drm.playready.url  String  (Required)  The URL of the PlayReady license server  -    drm.playready.headers  Array  Specifies the custom http headers to send to your playready license server. See  headers  for more information  -", 
            "title": "drm.playready"
        }, 
        {
            "location": "/jw7/configuration-reference/#drmwidevine", 
            "text": "Widevine DRM is specific to Google Chrome on non-iOS devices. Widevine will also function on Firefox browsers for desktop systems.     Option  Type  Description  Default      drm.widevine.url  String  (Required)  The URL of the WideVine license server  -    drm.widevine.serverCertificateUrl  String  (Required)  The URL of the WideVine service certificate  -    drm.widevine.headers  Array  Specifies the custom http headers to send to your widevine license server requests. See  headers  for more information  -", 
            "title": "drm.widevine"
        }, 
        {
            "location": "/jw7/configuration-reference/#drmwidevineplayreadyheaders77", 
            "text": "Adding customized HTTP header data to license requests is possible in JW 7.7+ with the \"headers\" configuration. This replaces the static \"customData\" configuration option in both widevine and playready scenarios. It is also possible to add multiple custom http headers by including multiple objects in the \"headers\" array.  In JW 7.7+, this can be configured in the following way:  drm : {\n   playready : {\n   url :  mydrmserver.com \n   headers : [{\n     name :  customData ,\n     value :  hereismycustomdatastring \n    }]\n  }\n}  In previous versions, adding \"customData\" would look like the following:  drm : {\n   playready : {\n   url :  mydrmserver.com \n   customData :  hereismycustomdatastring \n  }\n}     Option  Type  Description      headers.name  String  The name of the http header that will be included    headers.value  String  The value of the http header that will be included", 
            "title": "drm.[widevine/playready].headers7.7"
        }, 
        {
            "location": "/jw7/configuration-reference/#drmfairplay77", 
            "text": "JW Player 7.7 includes new configuration options for custom Fairplay integrations, replacing 'url' and 'keyUrl' options from 7.5. For more information and examples regarding custom Fairplay DRM integrations, please view our  support article .     Option  Type  Description      drm.fairplay.certificateUrl  String  (Required)  The path to the certificate which is part of the session data used to initialize the keySession.certificateUrl    drm.fairplay.processSpcUrl  String or Function  (Required)  The path to the license server (server playback context) which provides the ckc. Expects a direct url to the server. If the url needs to be constructed dynamically, a custom function can be passed to this configuration option which returns the url    drm.fairplay.extractContentId  Function  Expects a function that receives the initData uri (converted to a string) from the needkey event, and returns the contentId which is part of the session data used to initialize the keySession    drm.fairplay.licenseRequestHeaders  Array  Expects an Array of Objects containing header \u201cname\u201d and \u201cvalue\u201d properties to be included in the request to the license server    drm.fairplay.licenseResponseType  String  Specifies the data type returned by the XHR request to the license server. The default value is 'arraybuffer'. Other options include 'blob', 'json', and 'text'. This option impacts how \u201clicenseRequestMessage\u201d will be processed    drm.fairplay.licenseRequestMessage  Function  Expects a function that receives the license key message and returns the message to be sent to the license server. With the default \u201clicenseResponseType\u201d of ArrayBuffer this function passes through keymessage event message property without any changes    drm.fairplay.extractKey  Function  Expects a function that receives the ckc returned by the license server and returns the key used to update the active key session. If the key can only be extracted asynchronously (for example reading bytes from a \u2018blob\u2019 response), this function can return a promise", 
            "title": "drm.fairplay7.7"
        }, 
        {
            "location": "/jw7/configuration-reference/#drmclearkey", 
            "text": "A basic form of DRM that lists a decryption key inside of your player configuration. This is the least secure form of DRM, though it is the simplest to implement across browsers. There are no additional server resources required to decrypt content with this method. Clearkey is supported in both Chrome and Firefox browsers.     Option  Type  Description      drm.clearkey.key  String  (Required)  The key required to decrypt DRM content    drm.clearkey.keyId 7.7  String  (Required in 7.7+)  The key ID specified in the mpd's  default_KID  value", 
            "title": "drm.clearkey"
        }, 
        {
            "location": "/jw7/configuration-reference/#localization77", 
            "text": "Using the localization block in a player configuration allows you to configure certain words and phrases in the JW Player Next Up interface. The available options are below.     Option  Type  Description  Default      localization.nextUp  String  override for the \"Next Up\" prompt  \"Next Up\"    localization.playlist  String  Title of the Next Up tooltip in Playlist mode  \"Playlist\"    localization.related  String  Title of the Next Up tooltip in Related mode  \"Related\"", 
            "title": "Localization7.7"
        }, 
        {
            "location": "/jw7/skins_reference/", 
            "text": "CSS Skinning Reference\n\n\nThis article acts as a reference for styling all interface components of JW Player 7. This skinning model uses CSS and web fonts, and all controls are overlaid on top of the player with HTML.\n\n\nWhen styling these elements, there are a few conventions to keep in mind. All internal classes are prefixed with \njw-\n in order to protect the player from external stylesheets. The original DOM element that we initialize is called the Main Div.\n\n\nA \nJW Player skin\n CSS file contains classes that are grouped into functional elements. This reference provides an elaborate overview the classes used. For additional information, check out a reference css file.\n\n\n\n\nMain Div\n\n\nThe main div will be given a class \njwplayer\n. It is strongly advised to \nnot\n add any additional inline styling on this div besides what is included in your skin css file.\n\n\nSkinning Namespace\n\n\nAll skin related styles should be namespaced with a class on the main div, of the form of:\n\n\n.jw-skin-SKINNAME\n\n\nIf none are present on initialization, we will add \njw-skin-seven\n, which uses the seven skin.\n\n\n\n\nPlayer States\n\n\nThe state of the player is reflected in the DOM by a class on the main div. It will always contain one of the following:\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-state-playing\n\n\nWhile content is playing\n\n\n\n\n\n\n.jw-state-paused\n\n\nWhile content is paused\n\n\n\n\n\n\n.jw-state-buffering\n\n\nWhile content is buffering\n\n\n\n\n\n\n.jw-state-idle\n\n\nBefore pressing play\n\n\n\n\n\n\n.jw-state-complete\n\n\nAfter playlist completes\n\n\n\n\n\n\n\n\nFlags\n\n\nSometimes the player needs to signify certain modes of the playback. These flags will be present on the main div and can be:\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-flag-fullscreen\n\n\nWhen the player is in fullscreen\n\n\n\n\n\n\n.jw-flag-live\n\n\nWhen the player is playing back live video\n\n\n\n\n\n\n.jw-flag-user-inactive\n\n\nAdded after a few minutes of inactivity\n\n\n\n\n\n\n.jw-flag-controlbar-only\n\n\nPlayer is less than 30 pixels tall\n\n\n\n\n\n\n.jw-flag-media-audio\n\n\nContent being played is an audio file\n\n\n\n\n\n\n.jw-flag-dragging\n\n\nMouse down with cursor over control bar\n\n\n\n\n\n\n.jw-flag-aspect-mode\n\n\nEnable a padding to create an aspect ratio\n\n\n\n\n\n\n\n\n\n\nColors\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-background-color\n\n\nThis is a class that will add a set of style to all interface elements without having to change it for each individual class.\n\n\n\n\n\n\n\n\nWe advise only using \n.jw-background-color\n for color and not other CSS properties. The player will add this class to the following elements:\n\n\n\n\n.jw-dock-button\n\n\n.jw-icon-display-container\n\n\n.jw-controlbar\n\n\n.jw-menu\n\n\n.jw-slider-volume\n\n\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-button-color\n\n\nThis is a class that player will add to specific elements when color is overridden from within the player configuration setup. You can also use this to easily change all button colors in your skin. The player will add this class all icons.\n\n\n\n\n\n\n.jw-button-color:hover\n\n\nThis will adjust the color of all buttons when they are hovered on.\n\n\n\n\n\n\n\n\n\n\nPoster Images\n\n\nThese define how the poster image will be stretched to fill the space given. Internally this state is used to stretch the player using JS.\n\n\n\n\n.jw-stretch-none\n\n\n.jw-stretch-uniform\n\n\n.jw-stretch-fill\n\n\n.jw-stretch-exactfit\n\n\n\n\n\n\nIcons\n\n\nAll JW Player icons are rendered using the font \njw-six-icons.eot\n. Each icon has a character code that is mapped to a corresponding interface element.\n\n\n\n\n\n\n\n\nIcon\n\n\nCharacter Code\n\n\n\n\n\n\n\n\n\n\nPlay\n\n\n\\e60e\n\n\n\n\n\n\nReplay\n\n\n\\e610\n\n\n\n\n\n\nPause\n\n\n\\e60d\n\n\n\n\n\n\nRewind\n\n\n\\e900\n\n\n\n\n\n\nNext\n\n\n\\e60c\n\n\n\n\n\n\nCuepoint\n\n\n\\e606\n\n\n\n\n\n\nBuffering\n\n\n\\e601\n\n\n\n\n\n\nCast\n\n\n\\e602\n\n\n\n\n\n\nHD Off\n\n\n\\e60a\n\n\n\n\n\n\nHD On\n\n\n\\e609\n\n\n\n\n\n\nCC Off\n\n\n\\e605\n\n\n\n\n\n\nCC On\n\n\n\\e604\n\n\n\n\n\n\nFullscreen\n\n\n\\e608\n\n\n\n\n\n\nMenu Bullet\n\n\n\\e606\n\n\n\n\n\n\nAudio Tracks\n\n\n\\e600\n\n\n\n\n\n\nVolume On\n\n\n\\e612\n\n\n\n\n\n\nVolume Off\n\n\n\\e611\n\n\n\n\n\n\nMore\n\n\n\\e614\n\n\n\n\n\n\nClose\n\n\n\\e615\n\n\n\n\n\n\n\n\nThe easiest way to modify the default icons is to create a new font based on these character mappings. See \nCustom Icons and Fonts\n for more information.\n\n\n\n\nControls\n\n\nAll player controls are within the \n.jw-controls\n class. When JW Player is set to \ncontrols: false\n, this entire class has a visibility of hidden. To not include a specific item in your skin, you will need to override the style with a visibility or display of none.\n\n\n\n\n\n\n\n\nGroup\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nDisplay\n\n\nThe set of icons in the center of the player\n\n\n\n\n\n\nControlbar\n\n\nThe playback controls for the player\n\n\n\n\n\n\nMenus\n\n\nExtensions of the controlbar that display additional information\n\n\n\n\n\n\nDock\n\n\nButtons displayed at the top right of the player for plugin use\n\n\n\n\n\n\nLogo\n\n\nA logo displayed for branding purposes\n\n\n\n\n\n\nPreview\n\n\nThe video's poster image\n\n\n\n\n\n\n\n\nDisplay\n\n\nThe display component contains the main element container for the (re)play, buffer and error icons in the middle of the screen. To add styles to these containers based on states you will need to add the state classes in your stylesheet.\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-display-icon-container\n\n\nUsed to style the container in which the display icons are.\n\n\n\n\n\n\n.jw-icon-display\n\n\nUsed to style icons that appear in the display container. The icon that is rendered depends on the state the player is in.\n\n\n\n\n\n\n\n\nControlbar\n\n\nThe controlbar component contains all elements for the video controls at the bottom of the player. It is built using three functional groups within the \n.jw-controlbar\n parent class. This diagram presents an overview:\n\n\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-group\n\n\nUsed to vertically align the timeslider and all icons in the center of the controlbar.\n\n\n\n\n\n\n\n\nLeft Group\n\n\nThe left group contains playback controls, the visual playlist, and elapsed time:\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-controlbar-left-group\n\n\nThe main container that holds the play/pause elements as well as the previous/next and elapsed duration\n\n\n\n\n\n\n.jw-icon-playback\n\n\nThe container that holds the play/pause icons. The icon is switched depending on the state the player is in\n\n\n\n\n\n\n.jw-icon-rewind\n\n\nThe container that holds the \"rewind\" icon\n\n\n\n\n\n\n.jw-text-elapsed\n\n\nThe container for the elapsed video time\n\n\n\n\n\n\n\n\nCenter Group\n\n\nThe center group contains the elements that make up the timeslider.\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-controlbar-center-group\n\n\nThe main container that holds the time slider\n\n\n\n\n\n\n.jw-slider-horizontal .jw-slider-container\n\n\nThe containers that hold the timeslider elements\n\n\n\n\n\n\n.jw-rail\n\n\nSets the style for the base layer of the slider\n\n\n\n\n\n\n.jw-buffer\n\n\nSets the style for the how much of video has been buffered, which is layered on top of \n.jw-rail\n\n\n\n\n\n\n.jw-progress\n\n\nSets the style for the elapsed video, which is layered on top of \n.jw-buffer\n\n\n\n\n\n\n.jw-knob\n\n\nThis marks the tip of the progress rail, used to indicate where playback is currently\n\n\n\n\n\n\n.jw-slider-horizontal .jw-cue\n\n\nThis class is used for timeslider cuepoints, like chapters and ad breaks\n\n\n\n\n\n\n\n\nRight Group\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-controlbar-right-group\n\n\nThe container that holds duration text and icons for various playback options\n\n\n\n\n\n\n.jw-text-duration\n\n\nWrapper for the total duration of the file being played. This allows you style both current time and duration differently.\n\n\n\n\n\n\n.jw-icon-next\n\n\nThe control to toggle to the next playlist item.\n\n\n\n\n\n\n.jw-icon-hd\n\n\nThis is the class assigned to the div contains the HD icon. The player will automatically add a menu to the hover state of this div if there are more than 2 qualities provided per playlist item. Otherwise this div will have a state class .jw-toggle to indicate it was toggled on.\n\n\n\n\n\n\n.jw-icon-cc\n\n\nThis is class assigned to the div contains the closed-caption CC icon. The player will automatically add a menu to the hover state of this div if there are more than 2 caption tracks per playlist item. Otherwise this div will have a state class .jw-toggle to indicate it was toggled on.\n\n\n\n\n\n\n.jw-icon-audio-tracks\n\n\nThis is class assigned to the div contains the multiple audiotracks icon. The player will automatically add a menu to the hover state of this div if there are more than 2 qualities provided per playlist item.\n\n\n\n\n\n\n.jw-icon-cast\n\n\nThis class is used to display the Chromecast icon.\n\n\n\n\n\n\n.jw-icon-volume\n\n\nThis is class assigned to the div contains the volume icon. The player will automatically add a menu to the hover state of this div that contains the slider volume.\n\n\n\n\n\n\n.jw-icon-volume .jw-off\n\n\nWhen the player is muted the .jw-off class gets added to toggle the volume off icon.\n\n\n\n\n\n\n.jw-icon-fullscreen\n\n\nThis is class assigned to the div contains the fullscreen icons. The player will add .jw-off class to toggle between fullscreen and exit fullscreen icons.\n\n\n\n\n\n\n\n\nDock\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-controls-right\n\n\nThis is the parent container that positions the dock elements. In JW 7 the dock elements are on the upper right corner of the player.\n\n\n\n\n\n\n.jw-dock\n\n\nThis is the container that houses all of the dock buttons.\n\n\n\n\n\n\n.jw-dock-button\n\n\nThis is the class assigned to the div to style the interface button for dock elements.\n\n\n\n\n\n\n.jw-overlay\n\n\nThis is the overlay tooltip that appears on hover of the dock buttons.\n\n\n\n\n\n\n\n\n\n\nBreak Points (7.7+)\n\n\nBreakpoint classes are added to the player element based on the width of the player, not the device or browser. Because JW Player instances are embedded via an iframe, the usual @media query will not work for defining CSS declarations to make elements responsive. Breakpoints are global classes that can be used to make responsive CSS declarations for any customizable player element.\n\n\n\n\n\n\n\n\nBreak Point\n\n\nWidth Intervals (px)\n\n\n\n\n\n\n\n\n\n\n.jw-breakpoint-0\n\n\nPlayer width: 0-319\n\n\n\n\n\n\n.jw-breakpoint-1\n\n\nPlayer width: 320-419\n\n\n\n\n\n\n.jw-breakpoint-2\n\n\nPlayer width: 420-539\n\n\n\n\n\n\n.jw-breakpoint-3\n\n\nPlayer width: 540-639\n\n\n\n\n\n\n.jw-breakpoint-4\n\n\nPlayer width: 640-799\n\n\n\n\n\n\n.jw-breakpoint-5\n\n\nPlayer width: 800-959\n\n\n\n\n\n\n.jw-breakpoint-6\n\n\nPlayer width: 960-1279\n\n\n\n\n\n\n.jw-breakpoint-7\n\n\nPlayer width: 1280+\n\n\n\n\n\n\n\n\nExamples\n\n\nMake font size smaller only when player width is under 420px wide:\n\n\n.jw-breakpoint-0 .jw-related-item-description {\nfont-size: 11px;\n}\n\n\n\n\nFor medium-sized player widths, make the font size bigger:\n\n\n.jw-breakpoint-3 .jw-related-item-description,\n.jw-breakpoint-4 .jw-related-item-description {\n  font-size: 16px;\n}\n\n\n\n\n\n\nMenus and Overlays\n\n\nJW Player will automatically populate overlay divs on mouseover/touch of certain interface elements. These overlays include the timeslider tooltip, closed-captions, video qualities, multiple audio-tracks, and the volume slider.\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-overlay\n\n\nAll overlays are wrapped in this class. It is not advised to modify this class but rather the containers within this class. This class when appended to the parent controlbar class will position the overlays.\n\n\n\n\n\n\n\n\nIcon Tooltips\n\n\nIcon tooltips are menus that appear when hovering over an one of the icon interface elements.\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-icon-tooltip\n\n\nThis class is added to icons that open menus.\n\n\n\n\n\n\n.jw-menu\n\n\nThis class is added to an unordered list for HD, CC, and audio-tracks menus.\n\n\n\n\n\n\n.jw-text .jw-option .item-x .jw-active-option\n\n\nThis sets the font color and background color for the active item in HD, CC and audio-track menus.\n\n\n\n\n\n\n\n\nTitle and Preview Image\n\n\nThe title and description configuration options are displayed in their own classes overlaid on the player.\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-title\n\n\nThis is the wrapper class the text overlays.\n\n\n\n\n\n\n.jw-title-primary\n\n\nThis class is populated with content from the title configuration option from the player setup.\n\n\n\n\n\n\n.jw-title-secondary\n\n\nThis class is populated with content from the description configuration option in the player setup per-playlist item.\n\n\n\n\n\n\n.jw-preview\n\n\nThis class styles the preview image from the image configuration option in the player setup per-playlist item.\n\n\n\n\n\n\n\n\nDiscovery Overlay \n7.6\n\n\nThe discovery overlay replaces the \"Related\" plugin in JW 7.6, and shows information about other playlist items and recommended content. The overlay uses \nbreakpoints\n to select the proper format and amount of items to display.\n\n\nCustomization\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-plugin-related\n\n\nCustomize the background color of the related overlay\n\n\n\n\n\n\n.jw-related-item-content\n\n\nCustomize the background and border color of related items\n\n\n\n\n\n\n.jw-related-item-content:hover\n\n\nCustomize the background and border color of related items when hovering\n\n\n\n\n\n\n.jw-related-item-duration\n\n\nCustomize the next-up related item duration text\n\n\n\n\n\n\n.jw-related-item-play\n\n\nCustomize the next-up related item play button\n\n\n\n\n\n\n.jw-related-item-title strong\n\n\nCustomize the next-up related item \"Next Up\" text\n\n\n\n\n\n\n.jw-related-item-title span\n\n\nCustomize related item title text\n\n\n\n\n\n\n.jw-related-item-title .jw-item-index-text em\n\n\nCustomize related item title (for playlists) text\n\n\n\n\n\n\n.jw-related-item-description\n\n\nCustomize related item description text (Auto-advance only)\n\n\n\n\n\n\n.jw-related-autoplay-frame\n\n\nCustomize related item autoplay progress (Auto-advance only)\n\n\n\n\n\n\n.jw-related-autoplay-frame-progress\n\n\nCustomize related item autoplay progress (Auto-advance only)\n\n\n\n\n\n\n.jw-related-item-content:hover .jw-related-autoplay-frame-progress\n\n\nCustomize elements in hover state (falls under .jw-related-item-content:hover)\n\n\n\n\n\n\n\n\nSelectors\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-plugin-related\n\n\nParent container for related overlay plugin that covers the player viewport when visible.\n\n\n\n\n\n\n.jw-related-close\n\n\nRelated overlay close icon button\n\n\n\n\n\n\n.jw-related-item-content\n\n\nItem content area\n\n\n\n\n\n\n.jw-related-item-poster\n\n\nPoster image container (poster image is set via inline style background image on this element)\n\n\n\n\n\n\n.jw-related-item-duration\n\n\nItem duration text\n\n\n\n\n\n\n.jw-related-item-play\n\n\nNext-up item play button container\n\n\n\n\n\n\n.jw-related-item-play .jw-display-icon\n\n\nNext-up item play button icon\n\n\n\n\n\n\n.jw-related-item-title-content\n\n\nTitle text\n\n\n\n\n\n\n.jw-related-item-description-content\n\n\nDescription text\n\n\n\n\n\n\n.jw-related-autoplay-frame\n\n\nItem autoplay border\n\n\n\n\n\n\n.jw-related-autoplay-frame-progress\n\n\nItem autoplay progress border\n\n\n\n\n\n\n\n\nNext Up Card \n7.7\n\n\nThe next up card displays prior to a video's completion, showing information about the following media item.\n\n\nCustomization\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-nextup-header\n\n\nCustomize the top bar with \"Next Up\" label\n\n\n\n\n\n\n.jw-nextup-body\n\n\nCustomize the thumbnail/title group container\n\n\n\n\n\n\n.jw-nextup-thumbnail\n\n\nCustomize the next up item thumbnail\n\n\n\n\n\n\n.jw-nextup-title\n\n\nCustomize the next up item title\n\n\n\n\n\n\n.jw-nextup-close\n\n\nCustomize the close button\n\n\n\n\n\n\n.jw-nextup-close:hover\n\n\nCustomize the close button hover state\n\n\n\n\n\n\n\n\nSelectors\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\nType\n\n\n\n\n\n\n\n\n\n\n.jw-nextup-container\n\n\nParent container for next up (hidden by default) that positions the next up display in the player.\n\n\ndefault\n\n\n\n\n\n\n.jw-nextup-container-visible\n\n\nAdd-on class for next up parent container that transitions the next up display to visible state.\n\n\nstate\n\n\n\n\n\n\n.jw-nextup\n\n\nSecond container element for next up with \nposition: relative\n CSS property set to enable absolute positioning of the close button.\n\n\ndefault\n\n\n\n\n\n\n.jw-nextup-header\n\n\nTop bar element for next up that contains the \"Next Up\" label text.\n\n\ndefault\n\n\n\n\n\n\n.jw-nextup-body\n\n\nGrouping container element for the next up thumbnail and title.\n\n\ndefault\n\n\n\n\n\n\n.jw-nextup-thumbnail\n\n\nThumbnail element for next up display (hidden by default). Element uses inline style \nbackground-image: url(thumbnail.jpg);\n in addition to \nbackground-size: cover\n to accommodate displaying any thumbnail size in an elegant way.\n\n\ndefault\n\n\n\n\n\n\n.jw-nextup-thumbnail-visible\n\n\nModifier class that makes the next up thumbnail element visible (set when next up item has a thumbnail).\n\n\nstate\n\n\n\n\n\n\n.jw-nextup-title\n\n\nTitle text element for next up display.\n\n\ndefault\n\n\n\n\n\n\n.jw-nextup-close\n\n\nClose button for next up (hidden by default) which hides the display when clicked.\n\n\ndefault\n\n\n\n\n\n\n.jw-nextup-sticky .jw-nextup-close\n\n\nState to show close button for next up display (shown when nearing end of current video).\n\n\nstate\n\n\n\n\n\n\n\n\nVisual Playlist Overlay (Deprecated in JW Player 7.7)\n\n\nPrior to 7.7, the visual playlist is added by the player for all setups that have more than one playlist item.\n\n\n!!!\nThe visual playlist has been removed in JW Player 7.7 and has been replaced with the Discovery overlay.\n!!!\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-playlist\n\n\nSets the background color for the entire wrapper of the the visual playlist.\n\n\n\n\n\n\n.jw-playlist-container\n\n\nThis is used to position the entire container over the playlist icon.\n\n\n\n\n\n\n.jw-playlist-container .jw-option\n\n\nSets the style for the visual playlist items.\n\n\n\n\n\n\n.jw-playlist-container .jw-option .jw-active-option\n\n\nAllows you to adjust the color of the playlist item when hovering and has a different active style.\n\n\n\n\n\n\n.jw-playlist-container .jw-option:hover .jw-label\n\n\nChanges the color of the label when hovering.\n\n\n\n\n\n\n.jw-icon-playlist\n\n\nAligns the playlist header icon with the items in the playlist.\n\n\n\n\n\n\n.jw-label .jw-icon-play\n\n\nSets the color of the play icon of the currently playing playlist item.\n\n\n\n\n\n\n.jw-label .jw-icon-play:before\n\n\nAligns the playlist play icon with the items in the playlist.\n\n\n\n\n\n\n.jw-tooltip-title\n\n\nSets the style for the the playlist title div.", 
            "title": "JW7 CSS Skinning Reference"
        }, 
        {
            "location": "/jw7/skins_reference/#css-skinning-reference", 
            "text": "This article acts as a reference for styling all interface components of JW Player 7. This skinning model uses CSS and web fonts, and all controls are overlaid on top of the player with HTML.  When styling these elements, there are a few conventions to keep in mind. All internal classes are prefixed with  jw-  in order to protect the player from external stylesheets. The original DOM element that we initialize is called the Main Div.  A  JW Player skin  CSS file contains classes that are grouped into functional elements. This reference provides an elaborate overview the classes used. For additional information, check out a reference css file.", 
            "title": "CSS Skinning Reference"
        }, 
        {
            "location": "/jw7/skins_reference/#main-div", 
            "text": "The main div will be given a class  jwplayer . It is strongly advised to  not  add any additional inline styling on this div besides what is included in your skin css file.", 
            "title": "Main Div"
        }, 
        {
            "location": "/jw7/skins_reference/#skinning-namespace", 
            "text": "All skin related styles should be namespaced with a class on the main div, of the form of:  .jw-skin-SKINNAME  If none are present on initialization, we will add  jw-skin-seven , which uses the seven skin.", 
            "title": "Skinning Namespace"
        }, 
        {
            "location": "/jw7/skins_reference/#player-states", 
            "text": "The state of the player is reflected in the DOM by a class on the main div. It will always contain one of the following:     CSS Class  Definition      .jw-state-playing  While content is playing    .jw-state-paused  While content is paused    .jw-state-buffering  While content is buffering    .jw-state-idle  Before pressing play    .jw-state-complete  After playlist completes", 
            "title": "Player States"
        }, 
        {
            "location": "/jw7/skins_reference/#flags", 
            "text": "Sometimes the player needs to signify certain modes of the playback. These flags will be present on the main div and can be:     CSS Class  Definition      .jw-flag-fullscreen  When the player is in fullscreen    .jw-flag-live  When the player is playing back live video    .jw-flag-user-inactive  Added after a few minutes of inactivity    .jw-flag-controlbar-only  Player is less than 30 pixels tall    .jw-flag-media-audio  Content being played is an audio file    .jw-flag-dragging  Mouse down with cursor over control bar    .jw-flag-aspect-mode  Enable a padding to create an aspect ratio", 
            "title": "Flags"
        }, 
        {
            "location": "/jw7/skins_reference/#colors", 
            "text": "CSS Class  Definition      .jw-background-color  This is a class that will add a set of style to all interface elements without having to change it for each individual class.     We advise only using  .jw-background-color  for color and not other CSS properties. The player will add this class to the following elements:   .jw-dock-button  .jw-icon-display-container  .jw-controlbar  .jw-menu  .jw-slider-volume      CSS Class  Definition      .jw-button-color  This is a class that player will add to specific elements when color is overridden from within the player configuration setup. You can also use this to easily change all button colors in your skin. The player will add this class all icons.    .jw-button-color:hover  This will adjust the color of all buttons when they are hovered on.", 
            "title": "Colors"
        }, 
        {
            "location": "/jw7/skins_reference/#poster-images", 
            "text": "These define how the poster image will be stretched to fill the space given. Internally this state is used to stretch the player using JS.   .jw-stretch-none  .jw-stretch-uniform  .jw-stretch-fill  .jw-stretch-exactfit", 
            "title": "Poster Images"
        }, 
        {
            "location": "/jw7/skins_reference/#icons", 
            "text": "All JW Player icons are rendered using the font  jw-six-icons.eot . Each icon has a character code that is mapped to a corresponding interface element.     Icon  Character Code      Play  \\e60e    Replay  \\e610    Pause  \\e60d    Rewind  \\e900    Next  \\e60c    Cuepoint  \\e606    Buffering  \\e601    Cast  \\e602    HD Off  \\e60a    HD On  \\e609    CC Off  \\e605    CC On  \\e604    Fullscreen  \\e608    Menu Bullet  \\e606    Audio Tracks  \\e600    Volume On  \\e612    Volume Off  \\e611    More  \\e614    Close  \\e615     The easiest way to modify the default icons is to create a new font based on these character mappings. See  Custom Icons and Fonts  for more information.", 
            "title": "Icons"
        }, 
        {
            "location": "/jw7/skins_reference/#controls", 
            "text": "All player controls are within the  .jw-controls  class. When JW Player is set to  controls: false , this entire class has a visibility of hidden. To not include a specific item in your skin, you will need to override the style with a visibility or display of none.     Group  Definition      Display  The set of icons in the center of the player    Controlbar  The playback controls for the player    Menus  Extensions of the controlbar that display additional information    Dock  Buttons displayed at the top right of the player for plugin use    Logo  A logo displayed for branding purposes    Preview  The video's poster image", 
            "title": "Controls"
        }, 
        {
            "location": "/jw7/skins_reference/#display", 
            "text": "The display component contains the main element container for the (re)play, buffer and error icons in the middle of the screen. To add styles to these containers based on states you will need to add the state classes in your stylesheet.     CSS Class  Definition      .jw-display-icon-container  Used to style the container in which the display icons are.    .jw-icon-display  Used to style icons that appear in the display container. The icon that is rendered depends on the state the player is in.", 
            "title": "Display"
        }, 
        {
            "location": "/jw7/skins_reference/#controlbar", 
            "text": "The controlbar component contains all elements for the video controls at the bottom of the player. It is built using three functional groups within the  .jw-controlbar  parent class. This diagram presents an overview:      CSS Class  Definition      .jw-group  Used to vertically align the timeslider and all icons in the center of the controlbar.", 
            "title": "Controlbar"
        }, 
        {
            "location": "/jw7/skins_reference/#left-group", 
            "text": "The left group contains playback controls, the visual playlist, and elapsed time:     CSS Class  Definition      .jw-controlbar-left-group  The main container that holds the play/pause elements as well as the previous/next and elapsed duration    .jw-icon-playback  The container that holds the play/pause icons. The icon is switched depending on the state the player is in    .jw-icon-rewind  The container that holds the \"rewind\" icon    .jw-text-elapsed  The container for the elapsed video time", 
            "title": "Left Group"
        }, 
        {
            "location": "/jw7/skins_reference/#center-group", 
            "text": "The center group contains the elements that make up the timeslider.     CSS Class  Definition      .jw-controlbar-center-group  The main container that holds the time slider    .jw-slider-horizontal .jw-slider-container  The containers that hold the timeslider elements    .jw-rail  Sets the style for the base layer of the slider    .jw-buffer  Sets the style for the how much of video has been buffered, which is layered on top of  .jw-rail    .jw-progress  Sets the style for the elapsed video, which is layered on top of  .jw-buffer    .jw-knob  This marks the tip of the progress rail, used to indicate where playback is currently    .jw-slider-horizontal .jw-cue  This class is used for timeslider cuepoints, like chapters and ad breaks", 
            "title": "Center Group"
        }, 
        {
            "location": "/jw7/skins_reference/#right-group", 
            "text": "CSS Class  Definition      .jw-controlbar-right-group  The container that holds duration text and icons for various playback options    .jw-text-duration  Wrapper for the total duration of the file being played. This allows you style both current time and duration differently.    .jw-icon-next  The control to toggle to the next playlist item.    .jw-icon-hd  This is the class assigned to the div contains the HD icon. The player will automatically add a menu to the hover state of this div if there are more than 2 qualities provided per playlist item. Otherwise this div will have a state class .jw-toggle to indicate it was toggled on.    .jw-icon-cc  This is class assigned to the div contains the closed-caption CC icon. The player will automatically add a menu to the hover state of this div if there are more than 2 caption tracks per playlist item. Otherwise this div will have a state class .jw-toggle to indicate it was toggled on.    .jw-icon-audio-tracks  This is class assigned to the div contains the multiple audiotracks icon. The player will automatically add a menu to the hover state of this div if there are more than 2 qualities provided per playlist item.    .jw-icon-cast  This class is used to display the Chromecast icon.    .jw-icon-volume  This is class assigned to the div contains the volume icon. The player will automatically add a menu to the hover state of this div that contains the slider volume.    .jw-icon-volume .jw-off  When the player is muted the .jw-off class gets added to toggle the volume off icon.    .jw-icon-fullscreen  This is class assigned to the div contains the fullscreen icons. The player will add .jw-off class to toggle between fullscreen and exit fullscreen icons.", 
            "title": "Right Group"
        }, 
        {
            "location": "/jw7/skins_reference/#dock", 
            "text": "CSS Class  Definition      .jw-controls-right  This is the parent container that positions the dock elements. In JW 7 the dock elements are on the upper right corner of the player.    .jw-dock  This is the container that houses all of the dock buttons.    .jw-dock-button  This is the class assigned to the div to style the interface button for dock elements.    .jw-overlay  This is the overlay tooltip that appears on hover of the dock buttons.", 
            "title": "Dock"
        }, 
        {
            "location": "/jw7/skins_reference/#break-points-77", 
            "text": "Breakpoint classes are added to the player element based on the width of the player, not the device or browser. Because JW Player instances are embedded via an iframe, the usual @media query will not work for defining CSS declarations to make elements responsive. Breakpoints are global classes that can be used to make responsive CSS declarations for any customizable player element.     Break Point  Width Intervals (px)      .jw-breakpoint-0  Player width: 0-319    .jw-breakpoint-1  Player width: 320-419    .jw-breakpoint-2  Player width: 420-539    .jw-breakpoint-3  Player width: 540-639    .jw-breakpoint-4  Player width: 640-799    .jw-breakpoint-5  Player width: 800-959    .jw-breakpoint-6  Player width: 960-1279    .jw-breakpoint-7  Player width: 1280+", 
            "title": "Break Points (7.7+)"
        }, 
        {
            "location": "/jw7/skins_reference/#examples", 
            "text": "Make font size smaller only when player width is under 420px wide:  .jw-breakpoint-0 .jw-related-item-description {\nfont-size: 11px;\n}  For medium-sized player widths, make the font size bigger:  .jw-breakpoint-3 .jw-related-item-description,\n.jw-breakpoint-4 .jw-related-item-description {\n  font-size: 16px;\n}", 
            "title": "Examples"
        }, 
        {
            "location": "/jw7/skins_reference/#menus-and-overlays", 
            "text": "JW Player will automatically populate overlay divs on mouseover/touch of certain interface elements. These overlays include the timeslider tooltip, closed-captions, video qualities, multiple audio-tracks, and the volume slider.     CSS Class  Definition      .jw-overlay  All overlays are wrapped in this class. It is not advised to modify this class but rather the containers within this class. This class when appended to the parent controlbar class will position the overlays.", 
            "title": "Menus and Overlays"
        }, 
        {
            "location": "/jw7/skins_reference/#icon-tooltips", 
            "text": "Icon tooltips are menus that appear when hovering over an one of the icon interface elements.     CSS Class  Definition      .jw-icon-tooltip  This class is added to icons that open menus.    .jw-menu  This class is added to an unordered list for HD, CC, and audio-tracks menus.    .jw-text .jw-option .item-x .jw-active-option  This sets the font color and background color for the active item in HD, CC and audio-track menus.", 
            "title": "Icon Tooltips"
        }, 
        {
            "location": "/jw7/skins_reference/#title-and-preview-image", 
            "text": "The title and description configuration options are displayed in their own classes overlaid on the player.     CSS Class  Definition      .jw-title  This is the wrapper class the text overlays.    .jw-title-primary  This class is populated with content from the title configuration option from the player setup.    .jw-title-secondary  This class is populated with content from the description configuration option in the player setup per-playlist item.    .jw-preview  This class styles the preview image from the image configuration option in the player setup per-playlist item.", 
            "title": "Title and Preview Image"
        }, 
        {
            "location": "/jw7/skins_reference/#discovery-overlay-76", 
            "text": "The discovery overlay replaces the \"Related\" plugin in JW 7.6, and shows information about other playlist items and recommended content. The overlay uses  breakpoints  to select the proper format and amount of items to display.", 
            "title": "Discovery Overlay 7.6"
        }, 
        {
            "location": "/jw7/skins_reference/#customization", 
            "text": "CSS Class  Definition      .jw-plugin-related  Customize the background color of the related overlay    .jw-related-item-content  Customize the background and border color of related items    .jw-related-item-content:hover  Customize the background and border color of related items when hovering    .jw-related-item-duration  Customize the next-up related item duration text    .jw-related-item-play  Customize the next-up related item play button    .jw-related-item-title strong  Customize the next-up related item \"Next Up\" text    .jw-related-item-title span  Customize related item title text    .jw-related-item-title .jw-item-index-text em  Customize related item title (for playlists) text    .jw-related-item-description  Customize related item description text (Auto-advance only)    .jw-related-autoplay-frame  Customize related item autoplay progress (Auto-advance only)    .jw-related-autoplay-frame-progress  Customize related item autoplay progress (Auto-advance only)    .jw-related-item-content:hover .jw-related-autoplay-frame-progress  Customize elements in hover state (falls under .jw-related-item-content:hover)", 
            "title": "Customization"
        }, 
        {
            "location": "/jw7/skins_reference/#selectors", 
            "text": "CSS Class  Definition      .jw-plugin-related  Parent container for related overlay plugin that covers the player viewport when visible.    .jw-related-close  Related overlay close icon button    .jw-related-item-content  Item content area    .jw-related-item-poster  Poster image container (poster image is set via inline style background image on this element)    .jw-related-item-duration  Item duration text    .jw-related-item-play  Next-up item play button container    .jw-related-item-play .jw-display-icon  Next-up item play button icon    .jw-related-item-title-content  Title text    .jw-related-item-description-content  Description text    .jw-related-autoplay-frame  Item autoplay border    .jw-related-autoplay-frame-progress  Item autoplay progress border", 
            "title": "Selectors"
        }, 
        {
            "location": "/jw7/skins_reference/#next-up-card-77", 
            "text": "The next up card displays prior to a video's completion, showing information about the following media item.", 
            "title": "Next Up Card 7.7"
        }, 
        {
            "location": "/jw7/skins_reference/#customization_1", 
            "text": "CSS Class  Definition      .jw-nextup-header  Customize the top bar with \"Next Up\" label    .jw-nextup-body  Customize the thumbnail/title group container    .jw-nextup-thumbnail  Customize the next up item thumbnail    .jw-nextup-title  Customize the next up item title    .jw-nextup-close  Customize the close button    .jw-nextup-close:hover  Customize the close button hover state", 
            "title": "Customization"
        }, 
        {
            "location": "/jw7/skins_reference/#selectors_1", 
            "text": "CSS Class  Definition  Type      .jw-nextup-container  Parent container for next up (hidden by default) that positions the next up display in the player.  default    .jw-nextup-container-visible  Add-on class for next up parent container that transitions the next up display to visible state.  state    .jw-nextup  Second container element for next up with  position: relative  CSS property set to enable absolute positioning of the close button.  default    .jw-nextup-header  Top bar element for next up that contains the \"Next Up\" label text.  default    .jw-nextup-body  Grouping container element for the next up thumbnail and title.  default    .jw-nextup-thumbnail  Thumbnail element for next up display (hidden by default). Element uses inline style  background-image: url(thumbnail.jpg);  in addition to  background-size: cover  to accommodate displaying any thumbnail size in an elegant way.  default    .jw-nextup-thumbnail-visible  Modifier class that makes the next up thumbnail element visible (set when next up item has a thumbnail).  state    .jw-nextup-title  Title text element for next up display.  default    .jw-nextup-close  Close button for next up (hidden by default) which hides the display when clicked.  default    .jw-nextup-sticky .jw-nextup-close  State to show close button for next up display (shown when nearing end of current video).  state", 
            "title": "Selectors"
        }, 
        {
            "location": "/jw7/skins_reference/#visual-playlist-overlay-deprecated-in-jw-player-77", 
            "text": "Prior to 7.7, the visual playlist is added by the player for all setups that have more than one playlist item.  !!!\nThe visual playlist has been removed in JW Player 7.7 and has been replaced with the Discovery overlay.\n!!!     CSS Class  Definition      .jw-playlist  Sets the background color for the entire wrapper of the the visual playlist.    .jw-playlist-container  This is used to position the entire container over the playlist icon.    .jw-playlist-container .jw-option  Sets the style for the visual playlist items.    .jw-playlist-container .jw-option .jw-active-option  Allows you to adjust the color of the playlist item when hovering and has a different active style.    .jw-playlist-container .jw-option:hover .jw-label  Changes the color of the label when hovering.    .jw-icon-playlist  Aligns the playlist header icon with the items in the playlist.    .jw-label .jw-icon-play  Sets the color of the play icon of the currently playing playlist item.    .jw-label .jw-icon-play:before  Aligns the playlist play icon with the items in the playlist.    .jw-tooltip-title  Sets the style for the the playlist title div.", 
            "title": "Visual Playlist Overlay (Deprecated in JW Player 7.7)"
        }, 
        {
            "location": "/jw7/css-skinning-model/", 
            "text": "", 
            "title": "JW7 CSS Skinning Model"
        }, 
        {
            "location": "/jw7/skins_creating/", 
            "text": "Custom Skins\n\n\nCustomizing JW Player is made easier with JW Player 7's updated CSS-based skinning model. Gone are the days of JW6's XML and base64 images. Here to stay is dynamic, customizable CSS. For information regarding \nour own complimentary skins\n, please see \nUsing JW Player Skins\n. For more advanced users, the below page will explain how to create your own custom skin, and load it into your JW Player.\n\n\nCreating your Style\n\n\nFirst you will need to give your custom skin a name, which will be used to enable it within a player. The given name will be added into the jwplayer element and can be used to overwrite styles. The actual skin name should be appeneded to the \n.jw-skin-\n prefix. Our below example is altering our display icon container, and is going to be called \nmyskin\n:\n\n\n.jwplayer.jw-skin-myskin .jw-display-icon-container {\n    border-style: solid;\n    border-width: medium;\n    border-radius: 50%;\n    padding:1em;\n}\n\n\n\n\nLoading a custom skin will replace all elements with our basic \ncore\n skin unless they are explicitly styled. Because of this, we suggest using an existing skin as a starting point for your CSS skinning needs.\n\n\nUpon embedding the player, you \nmust\n ensure to set your \"skin\" configuration option to the name specified in your skin. Read more in our \nconfiguration options reference\n\n\nImplementing your CSS\n\n\nThere are currently \ntwo\n options to implement the above CSS modifications with JW7. One of these methods is \nmuch\n preferred to maintain optimal rendering performance:\n\n\nOption 1: Referencing the CSS on the page itself (Best Practice)\n\n\nDirectly embedding your CSS allows for your styles to load at the same time as your page. If we've placed the above CSS into a file (Which we'll call \nmyskinfile.css\n), we can reference our .css file by placing the following in our HTML page's head:\n\n\nlink rel=\nstylesheet\n type=\ntext/css\n href=\n//yoursite.com/yourstyles/myskinfile.css\n \n/link\n\n\n\n\n\nOnce the above is loaded, your player configuration will still need to reference the style appended to \n.jw-skin-\n within the \nskin.name\n configuration. In this case, we've called this \nmyskin\n\n\njwplayer('myElement')setup({\n    \nskin\n: {\n    \nname\n: \nmyskin\n\n    }\n});\n\n\n\n\nOption 2: Configuring the CSS URL within \nskin.url\n\n\nIt is possible to reference your CSS file's \nurl\n within the \nskin\n block of your JW Player embed. This is less preferred, as it requires the player to load your CSS file during setup. Because of this, the rendering of your player may slow down.\n\n\njwplayer('myElement').setup({\n    \nskin\n : {\n    \nurl\n:\n//yoursite.com/yourstyles/myskinfile.css\n,\n    \nname\n: \nmyskin\n\n    }\n});\n\n\n\n\nDue to possibly impacting rendering speed, option 2 should only be used if you do not have access to the HTML on the page where your player will be rendered.\n\n\nAdvanced Skinning\n\n\nFor advanced skin customization, we suggest editing a premade skin and then rebuilding it. The first time you do this, you will need to install \nLESS\n. Afterwards you will be able to build a skin by navigating to jwplayer/src/css and running the command:\n\n\nlessc jwplayer.less \n output.css\n\n\n\n\nFor a complete list of class names that are able to be overridden see CSS Skin Classes, please see our \nCSS Skin Reference\n.", 
            "title": "JW7 Custom Skins"
        }, 
        {
            "location": "/jw7/skins_creating/#custom-skins", 
            "text": "Customizing JW Player is made easier with JW Player 7's updated CSS-based skinning model. Gone are the days of JW6's XML and base64 images. Here to stay is dynamic, customizable CSS. For information regarding  our own complimentary skins , please see  Using JW Player Skins . For more advanced users, the below page will explain how to create your own custom skin, and load it into your JW Player.", 
            "title": "Custom Skins"
        }, 
        {
            "location": "/jw7/skins_creating/#creating-your-style", 
            "text": "First you will need to give your custom skin a name, which will be used to enable it within a player. The given name will be added into the jwplayer element and can be used to overwrite styles. The actual skin name should be appeneded to the  .jw-skin-  prefix. Our below example is altering our display icon container, and is going to be called  myskin :  .jwplayer.jw-skin-myskin .jw-display-icon-container {\n    border-style: solid;\n    border-width: medium;\n    border-radius: 50%;\n    padding:1em;\n}  Loading a custom skin will replace all elements with our basic  core  skin unless they are explicitly styled. Because of this, we suggest using an existing skin as a starting point for your CSS skinning needs.  Upon embedding the player, you  must  ensure to set your \"skin\" configuration option to the name specified in your skin. Read more in our  configuration options reference", 
            "title": "Creating your Style"
        }, 
        {
            "location": "/jw7/skins_creating/#implementing-your-css", 
            "text": "There are currently  two  options to implement the above CSS modifications with JW7. One of these methods is  much  preferred to maintain optimal rendering performance:", 
            "title": "Implementing your CSS"
        }, 
        {
            "location": "/jw7/skins_creating/#option-1-referencing-the-css-on-the-page-itself-best-practice", 
            "text": "Directly embedding your CSS allows for your styles to load at the same time as your page. If we've placed the above CSS into a file (Which we'll call  myskinfile.css ), we can reference our .css file by placing the following in our HTML page's head:  link rel= stylesheet  type= text/css  href= //yoursite.com/yourstyles/myskinfile.css   /link   Once the above is loaded, your player configuration will still need to reference the style appended to  .jw-skin-  within the  skin.name  configuration. In this case, we've called this  myskin  jwplayer('myElement')setup({\n     skin : {\n     name :  myskin \n    }\n});", 
            "title": "Option 1: Referencing the CSS on the page itself (Best Practice)"
        }, 
        {
            "location": "/jw7/skins_creating/#option-2-configuring-the-css-url-within-skinurl", 
            "text": "It is possible to reference your CSS file's  url  within the  skin  block of your JW Player embed. This is less preferred, as it requires the player to load your CSS file during setup. Because of this, the rendering of your player may slow down.  jwplayer('myElement').setup({\n     skin  : {\n     url : //yoursite.com/yourstyles/myskinfile.css ,\n     name :  myskin \n    }\n});  Due to possibly impacting rendering speed, option 2 should only be used if you do not have access to the HTML on the page where your player will be rendered.", 
            "title": "Option 2: Configuring the CSS URL within skin.url"
        }, 
        {
            "location": "/jw7/skins_creating/#advanced-skinning", 
            "text": "For advanced skin customization, we suggest editing a premade skin and then rebuilding it. The first time you do this, you will need to install  LESS . Afterwards you will be able to build a skin by navigating to jwplayer/src/css and running the command:  lessc jwplayer.less   output.css  For a complete list of class names that are able to be overridden see CSS Skin Classes, please see our  CSS Skin Reference .", 
            "title": "Advanced Skinning"
        }, 
        {
            "location": "/jw7/skins_fonts/", 
            "text": "Custom Icons and Fonts\n\n\nIn order to make the JW Player scaleable and adaptive to high resolution screens, JW7 no longer utilizes bitmap-based graphics. Instead, our skinning model relies on custom vector-based fonts and CSS. This ensures that all player elements will be at their sharpest when zoomed or scaled at higher resolutions. The article below explains how to make a custom icon set based on \nSVG files\n and fonts.\n\n\nCreating the Font\n\n\nIn order to get our icon fonts to work in all our target browsers, we need an icon font. All necessary font formats can be generated by using the \nIcoMoon Web Font Generator\n and then applying the resultant fonts into the JW Player via CSS. Below is a step-by-step process of how this is accomplished:\n\n\n1 -\n Download the IcoMoon project file from our \nJW Player github project\n. This JSON file contains our current icons and their related settings.\n\n\n2 -\n On the IcoMoon web page, import the aforementioned project file using the \nImport Icons\n button in the top left corner of the page:  \n\n\n  \n\n\nUpon importing, the player icons should appear at the top of the page. A successful import should display the following:\n\n\n\n\nNow that we've imported our icons, it's time to make some modifications.\n\n\nEditing Icons\n\n\n\n\nHighlight the icon that you wish to modify by clicking on it. A highlighted icon will appear with a gold border.\n\n\nSelect the Pencil icon at the top of the page to initiate the editing.\n\n\nMake any changes to the icon that you wish.\n\n\n\n\nFor this example, I've simply mirrored all of our icons. The results are reflected below:\n\n\n\n\nExporting the Font\n\n\nOnce you are happy with your modified/added icons, it's time to export the result:\n\n\n\n\nSave a copy -\n Click the three-lined option menu again and select the \"Download JSON\" button. This JSON file will act as a backup, allowing you to edit your completed icon set in the future.\n\n\n\n\nDownload the Font -\n Export the font itself by clicking the \nGenerate Font\n button at the bottom right:\n\n\n\n    You'll now see the button change to a \nDownload\n button with a settings gear.\n\n\n\n    Click this \nSettings\n gear. Here you should make sure that \nClass Prefix\n is set to \njw-icon-\n. The font name will be inherrited as the file name.\n\n\n\n\nEnsuring that the correct values are set here will configure a lot of the CSS classes for you. It's now safe to close the options pane.\n\n\n\n\n\n\nClick the \nDownload\n link to download a zip file that contains your new font.\n\n\n\n\n\n\nApplying the Font\n\n\nWith the fonts created and downloaded, we can now replace existing JW7 icons. The step-by-step process below will explain how:\n\n\nStep 1 - Unpack your zip\n\n\nUnpack your zip to view the included font files. These are conveniently located in the \nfont\n folder.\n\n\nStep 2 - Relocate the fonts\n\n\nCopy the .eot, .svg, .ttf, and .woff files into a desired font directory. If this is an online directory, ensure that all files are able to be accessed from your domain of choice.\n\n\nStep 3 - Load your font\n\n\nWe'll need to load our font via CSS using \n@font-face\n, as well as provide a \nfont-family\n name. In this case, the \njw-custom-icons.woff\n file has been relocated to a \nfont\n subdirectory. I will also be naming this font-family \ncustom\n.\n\n\nstyle\n\n@font-face {\n    font-family: 'custom';\n    src: url('fonts/jw-custom-icons.woff');\n}\n\n/style\n\n\n\n\n\nNote that this example will be using \nonly\n a .woff file. For more extensive browser compatibility, please see the \ncss-tricks article\n which details the loading of multiple fonts.\n\n\nApply the Font\n\n\nFinally, we need to apply the new font to our player. This is accomplished with one line of CSS to apply the \ncustom\n font-family name.\n\n\n.jw-icon{font-family:'custom'};\n\n\n\n\n\nNote, the font-family is referred to as \ncustom\n due to our naming in step 3.\n\n\nThe Results\n\n\nOur inverted icons are now applied to our control bar and we have a backwards, bizarro JW Player! (Or perhaps a WJ Player?)\n\n\n\n@font-face { font-family: 'custom'; src: url('//support-static.jwplayer.com/fonts/jw-custom-icons.woff'); } .jw-icon{font-family:'custom'};\nvar playerInstance = jwplayer(\"container\"); playerInstance.setup({ file: '//content.jwplatform.com/videos/HkauGhRi-640.mp4' });", 
            "title": "JW7 Custom Icons and Fonts"
        }, 
        {
            "location": "/jw7/skins_fonts/#custom-icons-and-fonts", 
            "text": "In order to make the JW Player scaleable and adaptive to high resolution screens, JW7 no longer utilizes bitmap-based graphics. Instead, our skinning model relies on custom vector-based fonts and CSS. This ensures that all player elements will be at their sharpest when zoomed or scaled at higher resolutions. The article below explains how to make a custom icon set based on  SVG files  and fonts.", 
            "title": "Custom Icons and Fonts"
        }, 
        {
            "location": "/jw7/skins_fonts/#creating-the-font", 
            "text": "In order to get our icon fonts to work in all our target browsers, we need an icon font. All necessary font formats can be generated by using the  IcoMoon Web Font Generator  and then applying the resultant fonts into the JW Player via CSS. Below is a step-by-step process of how this is accomplished:  1 -  Download the IcoMoon project file from our  JW Player github project . This JSON file contains our current icons and their related settings.  2 -  On the IcoMoon web page, import the aforementioned project file using the  Import Icons  button in the top left corner of the page:        Upon importing, the player icons should appear at the top of the page. A successful import should display the following:   Now that we've imported our icons, it's time to make some modifications.", 
            "title": "Creating the Font"
        }, 
        {
            "location": "/jw7/skins_fonts/#editing-icons", 
            "text": "Highlight the icon that you wish to modify by clicking on it. A highlighted icon will appear with a gold border.  Select the Pencil icon at the top of the page to initiate the editing.  Make any changes to the icon that you wish.   For this example, I've simply mirrored all of our icons. The results are reflected below:", 
            "title": "Editing Icons"
        }, 
        {
            "location": "/jw7/skins_fonts/#exporting-the-font", 
            "text": "Once you are happy with your modified/added icons, it's time to export the result:   Save a copy -  Click the three-lined option menu again and select the \"Download JSON\" button. This JSON file will act as a backup, allowing you to edit your completed icon set in the future.   Download the Font -  Export the font itself by clicking the  Generate Font  button at the bottom right:  \n    You'll now see the button change to a  Download  button with a settings gear.  \n    Click this  Settings  gear. Here you should make sure that  Class Prefix  is set to  jw-icon- . The font name will be inherrited as the file name.   Ensuring that the correct values are set here will configure a lot of the CSS classes for you. It's now safe to close the options pane.    Click the  Download  link to download a zip file that contains your new font.", 
            "title": "Exporting the Font"
        }, 
        {
            "location": "/jw7/skins_fonts/#applying-the-font", 
            "text": "With the fonts created and downloaded, we can now replace existing JW7 icons. The step-by-step process below will explain how:", 
            "title": "Applying the Font"
        }, 
        {
            "location": "/jw7/skins_fonts/#step-1-unpack-your-zip", 
            "text": "Unpack your zip to view the included font files. These are conveniently located in the  font  folder.", 
            "title": "Step 1 - Unpack your zip"
        }, 
        {
            "location": "/jw7/skins_fonts/#step-2-relocate-the-fonts", 
            "text": "Copy the .eot, .svg, .ttf, and .woff files into a desired font directory. If this is an online directory, ensure that all files are able to be accessed from your domain of choice.", 
            "title": "Step 2 - Relocate the fonts"
        }, 
        {
            "location": "/jw7/skins_fonts/#step-3-load-your-font", 
            "text": "We'll need to load our font via CSS using  @font-face , as well as provide a  font-family  name. In this case, the  jw-custom-icons.woff  file has been relocated to a  font  subdirectory. I will also be naming this font-family  custom .  style \n@font-face {\n    font-family: 'custom';\n    src: url('fonts/jw-custom-icons.woff');\n} /style   Note that this example will be using  only  a .woff file. For more extensive browser compatibility, please see the  css-tricks article  which details the loading of multiple fonts.", 
            "title": "Step 3 - Load your font"
        }, 
        {
            "location": "/jw7/skins_fonts/#apply-the-font", 
            "text": "Finally, we need to apply the new font to our player. This is accomplished with one line of CSS to apply the  custom  font-family name.  .jw-icon{font-family:'custom'};  Note, the font-family is referred to as  custom  due to our naming in step 3.", 
            "title": "Apply the Font"
        }, 
        {
            "location": "/jw7/skins_fonts/#the-results", 
            "text": "Our inverted icons are now applied to our control bar and we have a backwards, bizarro JW Player! (Or perhaps a WJ Player?)  @font-face { font-family: 'custom'; src: url('//support-static.jwplayer.com/fonts/jw-custom-icons.woff'); } .jw-icon{font-family:'custom'}; var playerInstance = jwplayer(\"container\"); playerInstance.setup({ file: '//content.jwplatform.com/videos/HkauGhRi-640.mp4' });", 
            "title": "The Results"
        }, 
        {
            "location": "/jw7/skins_example/", 
            "text": "Example CSS File\n\n\nHere is the CSS used by JW Player 7 to render\u00a0the seven \nskin\n. This skin is designed to fit any website with just a few quick color changes and is built into the player itself.\u00a0You can use this skin as a reference for building out your own custom CSS.\n\n\nCreating Your Own CSS\n\n\n\n\nDuplicate the CSS from this reference.\n\n\nReplace all mentions of \"seven\" with your custom skin name.\n\n\nMake any changes and customizations that you require.\n\n\nHost your CSS file on your web server.\n\n\nInclude your CSS in the head of your page or provide JW Player with the URL in setup.\n\n\nUpdate your player embed to include the name of your custom skin.\n\n\n\n\n!!!\nThis CSS does not take into account the state classes that were defined in the full class reference. If you want to override the style for a specific state you will need to include styles here with those classes.\n!!!\n\n\n!!!\nEvery skin file is included the download package found in the Downloads section of your player account.\n!!!\n\n\nSample Skin\n\n\n\n.jw-icon {\n    font-family: 'jw-icons';\n    -webkit-font-smoothing: antialiased;\n    font-style: normal;\n    font-weight: normal;\n    text-transform: none;\n    background-color: transparent;\n    font-variant: normal;\n    -webkit-font-feature-settings: \nliga\n;\n    -moz-font-feature-settings: \nliga=1\n;\n    -moz-font-feature-settings: \nliga\n;\n    -ms-font-feature-settings: \nliga\n 1;\n    -o-font-feature-settings: \nliga\n;\n    font-feature-settings: \nliga\n;\n    -moz-osx-font-smoothing: grayscale\n}\n\n/* Use this class to set a global background color for all elemnts. */\n.jw-skin-seven .jw-background-color {\n  background: #000;\n}\n\n/* This is the class that houses all controls. Use this to adjust the appearance of the entire controlbar. */\n.jw-skin-seven .jw-controlbar {\n  border-top: #333 1px solid;\n  height: 2.5em;\n}\n\n/* Vertically aligns the timeslider and icons in the center of the controlbar. */\n.jw-skin-seven .jw-group {\n  vertical-align: middle;\n}\n\n/* Sets the style for the visual playlist. */\n\n.jw-skin-seven .jw-playlist {\n  background-color: rgba(0, 0, 0, 0.8);\n}\n\n/* Aligns the visual playlist above its icon. */\n\n.jw-skin-seven .jw-playlist-container {\n  left: -43%;\n  background-color: rgba(0, 0, 0, 0.8);\n}\n\n/* Sets the style for the visual playlist items. */\n.jw-skin-seven .jw-playlist-container .jw-option {\n  border-bottom: 1px solid #444;\n}\n\n/* Allows you to adjust the color of the playlist item when hovering and has a different active style.*/\n\n.jw-skin-seven .jw-playlist-container .jw-option:hover,\n.jw-skin-seven .jw-playlist-container .jw-option.jw-active-option {\n  background-color: black;\n}\n\n/* Changes the color of the label when hovering.*/\n\n.jw-skin-seven .jw-playlist-container .jw-option:hover .jw-label {\n  color: #ff0046;\n}\n\n/* Aligns the playlist header icon with the items in the playlist. */\n.jw-skin-seven .jw-playlist-container .jw-icon-playlist {\n  margin-left: 0;\n}\n\n/* Sets the color of the play icon of the currently playing playlist item.*/\n.jw-skin-seven .jw-playlist-container .jw-label .jw-icon-play {\n  color: #ff0046;\n}\n\n/* Aligns the playlist play icon with the items in the playlist. */\n.jw-skin-seven .jw-playlist-container .jw-label .jw-icon-play:before {\n    padding-left: 0\n}\n\n/* Sets the color of the playlist title */\n.jw-skin-seven .jw-tooltip-title {\n    background-color: #000;\n    color: #fff\n}\n\n/* Style for playlist item, current time, qualities, and caption text.*/\n.jw-skin-seven .jw-text {\n  color: #ffffff;\n}\n\n/* Color for all buttons when they are inactive. This is over-ridden with the\ninactive configuration in the skin block.*/\n.jw-skin-seven .jw-button-color {\n  color: #ffffff;\n}\n\n/* Color for all buttons for when they are hovered on. This is over-ridden with the\nactive configuration in the skin block.*/\n\n.jw-skin-seven .jw-button-color:hover {\n  color: #ff0046;\n}\n\n/* Color for when HD/CD icons are toggled on. */\n.jw-skin-seven .jw-toggle {\n  color: #ff0046;\n}\n\n/* Color for when HD/CD icons are toggled off. */\n.jw-skin-seven .jw-toggle.jw-off {\n  color: #ffffff;\n}\n\n/* Sets spacing between controlbar icons and text */\n.jw-skin-seven .jw-controlbar .jw-icon:before,\n.jw-skin-seven .jw-text-elapsed,\n.jw-skin-seven .jw-text-duration {\n    padding: 0 .7em;\n}\n\n/* Removes icon padding to align the playlist header icon with the items in the playlist. */\n.jw-skin-seven .jw-controlbar .jw-icon-prev:before {\n    padding-right: .25em;\n}\n\n/* Removes icon padding to align the playlist header icon with the items in the playlist. */\n.jw-skin-seven .jw-controlbar .jw-icon-playlist:before {\n    padding: 0 .45em;\n}\n\n.jw-skin-seven .jw-controlbar .jw-icon-next:before {\n    padding-left: .25em\n}\n\n/* Sets the style for the prev and next icons. */\n.jw-skin-seven .jw-icon-prev,\n.jw-skin-seven .jw-icon-next {\n    font-size: .7em\n}\n\n/* Adds the spacer style to between the play icon and the previous icon. */\n.jw-skin-seven .jw-icon-prev:before {\n  border-left: 1px solid #666;\n}\n\n/* Adds the spacer style to between the next item and current time.  */\n.jw-skin-seven .jw-icon-next:before {\n  border-right: 1px solid #666;\n}\n\n/* Color of the display icon */\n.jw-skin-seven .jw-icon-display {\n  color: #fff;\n}\n\n/* Centers the display icon in it's container */\n.jw-skin-seven .jw-icon-display:before {\n  padding-left: 0;\n}\n\n/* Turns the display icon container into a circle. */\n.jw-skin-seven .jw-display-icon-container {\n    border-radius: 50%;\n    border: 1px solid #333\n}\n\n/* Styles the timeslider rail */\n.jw-skin-seven .jw-rail {\n  background-color: #384154;\n  box-shadow: none;\n}\n\n/* Sets the color for the buffer of the timeslider rail. */\n.jw-skin-seven .jw-buffer {\n    background-color: #666f82\n}\n\n/* Sets the style for the elaspesd progress. */\n.jw-skin-seven .jw-progress {\n    background: #ff0046\n}\n\n/* Sets the width of the knob's container */\n.jw-skin-seven .jw-knob {\n    width: .6em;\n    height: .6em;\n    background-color: #fff;\n    box-shadow: 0 0 0 1px #000;\n    border-radius: 1em\n}\n\n/* Sets the height for the horizontal slider container. */\n.jw-skin-seven .jw-slider-horizontal .jw-slider-container {\n    height: .95em\n}\n\n/* Sets the height for the horizontal slider elements. */\n.jw-skin-seven .jw-slider-horizontal .jw-rail,\n.jw-skin-seven .jw-slider-horizontal .jw-buffer,\n.jw-skin-seven .jw-slider-horizontal .jw-progress {\n    height: .2em;\n    border-radius: 0\n}\n\n/* Centers the knob vertically. */\n.jw-skin-seven .jw-slider-horizontal .jw-knob {\n    top: -0.19999999999999998em\n}\n\n/* Cetners the timeslider cuepoints vertically. */\n.jw-skin-seven .jw-slider-horizontal .jw-cue {\n    top: -0.04999999999999999em;\n    width: .3em;\n    height: .3em;\n    background-color: #fff;\n    border-radius: 50%\n}\n\n/* Sets the width for the vertical slider elements. */\n.jw-skin-seven .jw-slider-vertical .jw-rail,\n.jw-skin-seven .jw-slider-vertical .jw-buffer,\n.jw-skin-seven .jw-slider-vertical .jw-progress {\n    width: .2em\n}\n\n/* Sets the position of the volume slider container. */\n.jw-skin-seven .jw-volume-tip {\n    width: 100%;\n    left: -45%;\n    padding-bottom: .7em\n}\n\n/* Sets the color of the duration text in the controlbar. */\n.jw-skin-seven .jw-text-duration {\n    color: #666f82\n}\n\n/* Adds a left border as a spacer between all controlbar icons. */\n.jw-skin-seven .jw-controlbar-right-group .jw-icon-tooltip:before,\n.jw-skin-seven .jw-controlbar-right-group .jw-icon-inline:before {\n    border-left: 1px solid #666\n}\n\n/* Removes the border from the first icon after the time duration text. */\n.jw-skin-seven .jw-controlbar-right-group .jw-icon-inline:first-child:before {\n    border: 0\n}\n\n/* This styles the dock icons into a circle. */\n.jw-skin-seven .jw-dock .jw-dock-button {\n    border-radius: 50%;\n    border: 1px solid #333\n}\n\n/* This styles tooltip for dock text background. */\n.jw-skin-seven .jw-dock .jw-overlay {\n    border-radius: 2.5em\n}\n\n/*This sets the font color and background color for the active item in HD and CC menus. */\n.jw-skin-seven .jw-icon-tooltip .jw-active-option {\n    background-color: #ff0046;\n    color: #fff\n}\n\n/* Sets a min width for the volume container so that when it changes between mute and volume, the controlbar does not shift. */\n.jw-skin-seven .jw-icon-volume {\n    min-width: 2.6em\n}\n\n/* Sets the style for the time tooltip, menu, volume. */\n.jw-skin-seven .jw-time-tip,\n.jw-skin-seven .jw-menu,\n.jw-skin-seven .jw-volume-tip,\n.jw-skin-seven .jw-skip {\n    border: 1px solid #333\n}\n\n/* Sets the position for the time tooltip. */\n.jw-skin-seven .jw-time-tip {\n    padding: .2em;\n    bottom: 1.3em\n}\n\n/* Sets the position for the vertical volume slider. */\n.jw-skin-seven .jw-menu,\n.jw-skin-seven .jw-volume-tip {\n    bottom: .24em\n}\n\n/* Sets the shape of the skip icon. */\n.jw-skin-seven .jw-skip {\n    padding: .4em;\n    border-radius: 1.75em\n}\n\n/* Sets the style for the skip text. */\n.jw-skin-seven .jw-skip .jw-text,\n.jw-skin-seven .jw-skip .jw-icon-inline {\n    color: #fff;\n    line-height: 1.75em\n}\n.jw-skin-seven .jw-skip.jw-skippable:hover .jw-text,\n.jw-skin-seven .jw-skip.jw-skippable:hover .jw-icon-inline {\n    color: #ff0046\n}", 
            "title": "JW7 Example CSS File"
        }, 
        {
            "location": "/jw7/skins_example/#example-css-file", 
            "text": "Here is the CSS used by JW Player 7 to render\u00a0the seven  skin . This skin is designed to fit any website with just a few quick color changes and is built into the player itself.\u00a0You can use this skin as a reference for building out your own custom CSS.", 
            "title": "Example CSS File"
        }, 
        {
            "location": "/jw7/skins_example/#creating-your-own-css", 
            "text": "Duplicate the CSS from this reference.  Replace all mentions of \"seven\" with your custom skin name.  Make any changes and customizations that you require.  Host your CSS file on your web server.  Include your CSS in the head of your page or provide JW Player with the URL in setup.  Update your player embed to include the name of your custom skin.   !!!\nThis CSS does not take into account the state classes that were defined in the full class reference. If you want to override the style for a specific state you will need to include styles here with those classes.\n!!!  !!!\nEvery skin file is included the download package found in the Downloads section of your player account.\n!!!", 
            "title": "Creating Your Own CSS"
        }, 
        {
            "location": "/jw7/skins_example/#sample-skin", 
            "text": ".jw-icon {\n    font-family: 'jw-icons';\n    -webkit-font-smoothing: antialiased;\n    font-style: normal;\n    font-weight: normal;\n    text-transform: none;\n    background-color: transparent;\n    font-variant: normal;\n    -webkit-font-feature-settings:  liga ;\n    -moz-font-feature-settings:  liga=1 ;\n    -moz-font-feature-settings:  liga ;\n    -ms-font-feature-settings:  liga  1;\n    -o-font-feature-settings:  liga ;\n    font-feature-settings:  liga ;\n    -moz-osx-font-smoothing: grayscale\n}\n\n/* Use this class to set a global background color for all elemnts. */\n.jw-skin-seven .jw-background-color {\n  background: #000;\n}\n\n/* This is the class that houses all controls. Use this to adjust the appearance of the entire controlbar. */\n.jw-skin-seven .jw-controlbar {\n  border-top: #333 1px solid;\n  height: 2.5em;\n}\n\n/* Vertically aligns the timeslider and icons in the center of the controlbar. */\n.jw-skin-seven .jw-group {\n  vertical-align: middle;\n}\n\n/* Sets the style for the visual playlist. */\n\n.jw-skin-seven .jw-playlist {\n  background-color: rgba(0, 0, 0, 0.8);\n}\n\n/* Aligns the visual playlist above its icon. */\n\n.jw-skin-seven .jw-playlist-container {\n  left: -43%;\n  background-color: rgba(0, 0, 0, 0.8);\n}\n\n/* Sets the style for the visual playlist items. */\n.jw-skin-seven .jw-playlist-container .jw-option {\n  border-bottom: 1px solid #444;\n}\n\n/* Allows you to adjust the color of the playlist item when hovering and has a different active style.*/\n\n.jw-skin-seven .jw-playlist-container .jw-option:hover,\n.jw-skin-seven .jw-playlist-container .jw-option.jw-active-option {\n  background-color: black;\n}\n\n/* Changes the color of the label when hovering.*/\n\n.jw-skin-seven .jw-playlist-container .jw-option:hover .jw-label {\n  color: #ff0046;\n}\n\n/* Aligns the playlist header icon with the items in the playlist. */\n.jw-skin-seven .jw-playlist-container .jw-icon-playlist {\n  margin-left: 0;\n}\n\n/* Sets the color of the play icon of the currently playing playlist item.*/\n.jw-skin-seven .jw-playlist-container .jw-label .jw-icon-play {\n  color: #ff0046;\n}\n\n/* Aligns the playlist play icon with the items in the playlist. */\n.jw-skin-seven .jw-playlist-container .jw-label .jw-icon-play:before {\n    padding-left: 0\n}\n\n/* Sets the color of the playlist title */\n.jw-skin-seven .jw-tooltip-title {\n    background-color: #000;\n    color: #fff\n}\n\n/* Style for playlist item, current time, qualities, and caption text.*/\n.jw-skin-seven .jw-text {\n  color: #ffffff;\n}\n\n/* Color for all buttons when they are inactive. This is over-ridden with the\ninactive configuration in the skin block.*/\n.jw-skin-seven .jw-button-color {\n  color: #ffffff;\n}\n\n/* Color for all buttons for when they are hovered on. This is over-ridden with the\nactive configuration in the skin block.*/\n\n.jw-skin-seven .jw-button-color:hover {\n  color: #ff0046;\n}\n\n/* Color for when HD/CD icons are toggled on. */\n.jw-skin-seven .jw-toggle {\n  color: #ff0046;\n}\n\n/* Color for when HD/CD icons are toggled off. */\n.jw-skin-seven .jw-toggle.jw-off {\n  color: #ffffff;\n}\n\n/* Sets spacing between controlbar icons and text */\n.jw-skin-seven .jw-controlbar .jw-icon:before,\n.jw-skin-seven .jw-text-elapsed,\n.jw-skin-seven .jw-text-duration {\n    padding: 0 .7em;\n}\n\n/* Removes icon padding to align the playlist header icon with the items in the playlist. */\n.jw-skin-seven .jw-controlbar .jw-icon-prev:before {\n    padding-right: .25em;\n}\n\n/* Removes icon padding to align the playlist header icon with the items in the playlist. */\n.jw-skin-seven .jw-controlbar .jw-icon-playlist:before {\n    padding: 0 .45em;\n}\n\n.jw-skin-seven .jw-controlbar .jw-icon-next:before {\n    padding-left: .25em\n}\n\n/* Sets the style for the prev and next icons. */\n.jw-skin-seven .jw-icon-prev,\n.jw-skin-seven .jw-icon-next {\n    font-size: .7em\n}\n\n/* Adds the spacer style to between the play icon and the previous icon. */\n.jw-skin-seven .jw-icon-prev:before {\n  border-left: 1px solid #666;\n}\n\n/* Adds the spacer style to between the next item and current time.  */\n.jw-skin-seven .jw-icon-next:before {\n  border-right: 1px solid #666;\n}\n\n/* Color of the display icon */\n.jw-skin-seven .jw-icon-display {\n  color: #fff;\n}\n\n/* Centers the display icon in it's container */\n.jw-skin-seven .jw-icon-display:before {\n  padding-left: 0;\n}\n\n/* Turns the display icon container into a circle. */\n.jw-skin-seven .jw-display-icon-container {\n    border-radius: 50%;\n    border: 1px solid #333\n}\n\n/* Styles the timeslider rail */\n.jw-skin-seven .jw-rail {\n  background-color: #384154;\n  box-shadow: none;\n}\n\n/* Sets the color for the buffer of the timeslider rail. */\n.jw-skin-seven .jw-buffer {\n    background-color: #666f82\n}\n\n/* Sets the style for the elaspesd progress. */\n.jw-skin-seven .jw-progress {\n    background: #ff0046\n}\n\n/* Sets the width of the knob's container */\n.jw-skin-seven .jw-knob {\n    width: .6em;\n    height: .6em;\n    background-color: #fff;\n    box-shadow: 0 0 0 1px #000;\n    border-radius: 1em\n}\n\n/* Sets the height for the horizontal slider container. */\n.jw-skin-seven .jw-slider-horizontal .jw-slider-container {\n    height: .95em\n}\n\n/* Sets the height for the horizontal slider elements. */\n.jw-skin-seven .jw-slider-horizontal .jw-rail,\n.jw-skin-seven .jw-slider-horizontal .jw-buffer,\n.jw-skin-seven .jw-slider-horizontal .jw-progress {\n    height: .2em;\n    border-radius: 0\n}\n\n/* Centers the knob vertically. */\n.jw-skin-seven .jw-slider-horizontal .jw-knob {\n    top: -0.19999999999999998em\n}\n\n/* Cetners the timeslider cuepoints vertically. */\n.jw-skin-seven .jw-slider-horizontal .jw-cue {\n    top: -0.04999999999999999em;\n    width: .3em;\n    height: .3em;\n    background-color: #fff;\n    border-radius: 50%\n}\n\n/* Sets the width for the vertical slider elements. */\n.jw-skin-seven .jw-slider-vertical .jw-rail,\n.jw-skin-seven .jw-slider-vertical .jw-buffer,\n.jw-skin-seven .jw-slider-vertical .jw-progress {\n    width: .2em\n}\n\n/* Sets the position of the volume slider container. */\n.jw-skin-seven .jw-volume-tip {\n    width: 100%;\n    left: -45%;\n    padding-bottom: .7em\n}\n\n/* Sets the color of the duration text in the controlbar. */\n.jw-skin-seven .jw-text-duration {\n    color: #666f82\n}\n\n/* Adds a left border as a spacer between all controlbar icons. */\n.jw-skin-seven .jw-controlbar-right-group .jw-icon-tooltip:before,\n.jw-skin-seven .jw-controlbar-right-group .jw-icon-inline:before {\n    border-left: 1px solid #666\n}\n\n/* Removes the border from the first icon after the time duration text. */\n.jw-skin-seven .jw-controlbar-right-group .jw-icon-inline:first-child:before {\n    border: 0\n}\n\n/* This styles the dock icons into a circle. */\n.jw-skin-seven .jw-dock .jw-dock-button {\n    border-radius: 50%;\n    border: 1px solid #333\n}\n\n/* This styles tooltip for dock text background. */\n.jw-skin-seven .jw-dock .jw-overlay {\n    border-radius: 2.5em\n}\n\n/*This sets the font color and background color for the active item in HD and CC menus. */\n.jw-skin-seven .jw-icon-tooltip .jw-active-option {\n    background-color: #ff0046;\n    color: #fff\n}\n\n/* Sets a min width for the volume container so that when it changes between mute and volume, the controlbar does not shift. */\n.jw-skin-seven .jw-icon-volume {\n    min-width: 2.6em\n}\n\n/* Sets the style for the time tooltip, menu, volume. */\n.jw-skin-seven .jw-time-tip,\n.jw-skin-seven .jw-menu,\n.jw-skin-seven .jw-volume-tip,\n.jw-skin-seven .jw-skip {\n    border: 1px solid #333\n}\n\n/* Sets the position for the time tooltip. */\n.jw-skin-seven .jw-time-tip {\n    padding: .2em;\n    bottom: 1.3em\n}\n\n/* Sets the position for the vertical volume slider. */\n.jw-skin-seven .jw-menu,\n.jw-skin-seven .jw-volume-tip {\n    bottom: .24em\n}\n\n/* Sets the shape of the skip icon. */\n.jw-skin-seven .jw-skip {\n    padding: .4em;\n    border-radius: 1.75em\n}\n\n/* Sets the style for the skip text. */\n.jw-skin-seven .jw-skip .jw-text,\n.jw-skin-seven .jw-skip .jw-icon-inline {\n    color: #fff;\n    line-height: 1.75em\n}\n.jw-skin-seven .jw-skip.jw-skippable:hover .jw-text,\n.jw-skin-seven .jw-skip.jw-skippable:hover .jw-icon-inline {\n    color: #ff0046\n}", 
            "title": "Sample Skin"
        }, 
        {
            "location": "/jw7/designer-kit/", 
            "text": "JW7 Designer Kit\n\n\nThe \nJW7 Designer Kit\n is a starting point for designing and building new skins. This photoshop template includes GUI elements found in the 7.9.1 release of JW7. The purpose of this kit is to encourage designers and developers to fully customize the player to create fully branded experiences for their content.\n\n\nThis PSD includes well organized and labeled layers that correspond to css selectors in our skinning model for easy collaboration between designers and developers. All elements and shapes within the PSD are fully editable.\n\n\nYou may also find our \nCSS Skinning Model\n documentation useful as you get started designing your new skin.\n\n\nDownload the JW7 Designer Kit\n\n\n\n\nBelow is a preview of what is included in the \nJW7 Designer Kit\n.\n\n\nPlayer State Idle\n\n\n\n\n\nPlayer State Paused", 
            "title": "JW7 Designer Kit"
        }, 
        {
            "location": "/jw7/designer-kit/#jw7-designer-kit", 
            "text": "The  JW7 Designer Kit  is a starting point for designing and building new skins. This photoshop template includes GUI elements found in the 7.9.1 release of JW7. The purpose of this kit is to encourage designers and developers to fully customize the player to create fully branded experiences for their content.  This PSD includes well organized and labeled layers that correspond to css selectors in our skinning model for easy collaboration between designers and developers. All elements and shapes within the PSD are fully editable.  You may also find our  CSS Skinning Model  documentation useful as you get started designing your new skin.  Download the JW7 Designer Kit   Below is a preview of what is included in the  JW7 Designer Kit .", 
            "title": "JW7 Designer Kit"
        }, 
        {
            "location": "/jw7/integrations/", 
            "text": "Analytics System Integrations\n\n\nBy default, JW Player tracks only playback data with \nGoogle Analytics\n as an integrated solution. However, there are many more potential analytics services that can be used with our API. Provided that your analytics service is capable of sending this information via Javascript, all API events can hypothetically be tracked and measured.\n\n\nListening for Events\n\n\nA full introduction to our player's API can be found on our \nAPI Introduction\n page. In a nutshell, JW Player's API is capable of listening for specific changes, either initiated by user or by API, and then returning information about its use. A very basic example of detecting when a user initiates a mute would be:\n\n\njwplayer().on('mute',function(){\n    //I would fire my mute tracker here!\n    //What happens here would be dependent on your analytics product!\n});\n\n\n\n\n\u200bFor a full list of trackable player events grouped by category, please visit our \nAPI reference page\n.\n\n\nSending Events With Google Analytics\n\n\nNow that you're able to determine that an event occurred on a page, a ping will need to be sent to an analytics platform for tracking. If your analytics platform of choice is Google Analytics, you'll need to initiate a \nsend\n event. As mentioned in our previous article \nhere\n, you'll need to make sure that you are implementing the new analytics.js on your page, rather than the older ga.js.\n\n\nLet's assume that we have a single player on a page. If I would like track with our Google Analytics account when an error has occurred with our player (and the error itself), we can use the following code:\n\n\njwplayer().on('error', function(event) {\nga('send', 'event', 'JW Player Events', 'Errors', event.message);\n});\n\n\n\n\nOnce triggering an error state, we are able to check into our Google Analytics page and see our tracked event(Under realtime events). In this case, \nErrors\n will populate in the \nJW Player Events\n category, and the error itself will be listed under \nActions\n. The exact error message will be listed under the \nLabel\n section.  \n\n\nMore information about tracking events with the above code can be found \nhere\n in Google's own analytics documentation.\n\n\nSending Events With comScore\n\n\nMuch like a custom GA implementation, if you are utilizing comScore analytics, it is possible to create a setup similar to the above. The below table shows comScore events and their JW Player API equivalents:\n\n\n\n\n\n\n\n\nComscore Event\n\n\nJW Player API Event\n\n\n\n\n\n\n\n\n\n\nStreamSenseEventType.BUFFER\n\n\non('buffer');\n\n\n\n\n\n\nStreamSenseEventType.PAUSE\n\n\non('pause');\n\n\n\n\n\n\nStreamSenseEventType.PLAY\n\n\non('play');\n\n\n\n\n\n\nStreamSenseEventType.END\n\n\non('complete');\n\n\n\n\n\n\nFullscreen State\n\n\ngetFullscreen();\n\n\n\n\n\n\nVolume\n\n\ngetVolume();\n\n\n\n\n\n\nMedia Position\n\n\ngetPosition();\n\n\n\n\n\n\nVideo Source\n\n\ngetPlaylistItem().file\n\n\n\n\n\n\nCurrent Bitrate\n\n\ngetQualityLevels()[getCurrentQuality()].bitrate\n\n\n\n\n\n\n\n\nSending Events With Adobe Site Catalyst\n\n\nAs of JW7, integrated Site Catalyst support has been removed. Events can still be tracked using the JW Player API and Site Catalyst's event tracking pings. Further information can be found on Adobe's site:\n\n\n\n\nHTML5 Video Measurement\n\n\nMedia Monitoring Reference\n\n\nVideo Measurement Success\n\n\n\n\nAgain, the same API events listed above for other implementations can be utilized to send these SiteCatalyst measurement pings as well. The below table shows which JW Player events may correlate with their SiteCatalyst counterparts. Please note that some additional logic may need to be put in place to properly send the correct context for these events.\n\n\n\n\n\n\n\n\nSiteCatalyst Event\n\n\nJW Player API Event\n\n\n\n\n\n\n\n\n\n\ns.Media.stop\n\n\non('pause');\n\n\n\n\n\n\ns.Media.stop\n\n\non('buffer');\n\n\n\n\n\n\ns.Media.stop\n\n\non('idle');\n\n\n\n\n\n\ns.Media.close\n\n\non('complete');\n\n\n\n\n\n\ns.Media.play\n\n\non('play');\n\n\n\n\n\n\ns.Media.open\n\n\ngetPlaylist()[getPlaylistIndex()].\ninformation", 
            "title": "JW7 Analytics Integrations"
        }, 
        {
            "location": "/jw7/integrations/#analytics-system-integrations", 
            "text": "By default, JW Player tracks only playback data with  Google Analytics  as an integrated solution. However, there are many more potential analytics services that can be used with our API. Provided that your analytics service is capable of sending this information via Javascript, all API events can hypothetically be tracked and measured.", 
            "title": "Analytics System Integrations"
        }, 
        {
            "location": "/jw7/integrations/#listening-for-events", 
            "text": "A full introduction to our player's API can be found on our  API Introduction  page. In a nutshell, JW Player's API is capable of listening for specific changes, either initiated by user or by API, and then returning information about its use. A very basic example of detecting when a user initiates a mute would be:  jwplayer().on('mute',function(){\n    //I would fire my mute tracker here!\n    //What happens here would be dependent on your analytics product!\n});  \u200bFor a full list of trackable player events grouped by category, please visit our  API reference page .", 
            "title": "Listening for Events"
        }, 
        {
            "location": "/jw7/integrations/#sending-events-with-google-analytics", 
            "text": "Now that you're able to determine that an event occurred on a page, a ping will need to be sent to an analytics platform for tracking. If your analytics platform of choice is Google Analytics, you'll need to initiate a  send  event. As mentioned in our previous article  here , you'll need to make sure that you are implementing the new analytics.js on your page, rather than the older ga.js.  Let's assume that we have a single player on a page. If I would like track with our Google Analytics account when an error has occurred with our player (and the error itself), we can use the following code:  jwplayer().on('error', function(event) {\nga('send', 'event', 'JW Player Events', 'Errors', event.message);\n});  Once triggering an error state, we are able to check into our Google Analytics page and see our tracked event(Under realtime events). In this case,  Errors  will populate in the  JW Player Events  category, and the error itself will be listed under  Actions . The exact error message will be listed under the  Label  section.    More information about tracking events with the above code can be found  here  in Google's own analytics documentation.", 
            "title": "Sending Events With Google Analytics"
        }, 
        {
            "location": "/jw7/integrations/#sending-events-with-comscore", 
            "text": "Much like a custom GA implementation, if you are utilizing comScore analytics, it is possible to create a setup similar to the above. The below table shows comScore events and their JW Player API equivalents:     Comscore Event  JW Player API Event      StreamSenseEventType.BUFFER  on('buffer');    StreamSenseEventType.PAUSE  on('pause');    StreamSenseEventType.PLAY  on('play');    StreamSenseEventType.END  on('complete');    Fullscreen State  getFullscreen();    Volume  getVolume();    Media Position  getPosition();    Video Source  getPlaylistItem().file    Current Bitrate  getQualityLevels()[getCurrentQuality()].bitrate", 
            "title": "Sending Events With comScore"
        }, 
        {
            "location": "/jw7/integrations/#sending-events-with-adobe-site-catalyst", 
            "text": "As of JW7, integrated Site Catalyst support has been removed. Events can still be tracked using the JW Player API and Site Catalyst's event tracking pings. Further information can be found on Adobe's site:   HTML5 Video Measurement  Media Monitoring Reference  Video Measurement Success   Again, the same API events listed above for other implementations can be utilized to send these SiteCatalyst measurement pings as well. The below table shows which JW Player events may correlate with their SiteCatalyst counterparts. Please note that some additional logic may need to be put in place to properly send the correct context for these events.     SiteCatalyst Event  JW Player API Event      s.Media.stop  on('pause');    s.Media.stop  on('buffer');    s.Media.stop  on('idle');    s.Media.close  on('complete');    s.Media.play  on('play');    s.Media.open  getPlaylist()[getPlaylistIndex()]. information", 
            "title": "Sending Events With Adobe Site Catalyst"
        }
    ]
}