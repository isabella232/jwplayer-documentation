{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction\n\n\nHello World! We\u2019re JW Player. We strive to enable developers and designers (like you!) to build, customize, and deliver the best video experiences for viewers across web, mobile, and OTT devices. \n\n\nPurpose\n\n\nOur goal is to provide you with documentation on more advanced uses of JW Player. Here you will find a consolidated reference of API calls and design resources to accelerate your development process with our player.\n\n\nIntended Audience\n\n\nThis site specifically caters to developers and designers who are using JW Player in their projects. For standard configuration settings or assistance embedding a player, please see our \nsupport site\n. If you are visiting the developer site, a basic level of Javascript is required to use our API and a knowledge of CSS is necessary in order to customize our skinning model.\n\n\nStructure\n\n\nOur Developer Guide is split into two sections: Javascript API (Coming Soon) and Visual Customization.  Within each section you will find guides to get started, documentation, code samples, links to demos, and additional resources.\n\n\nContact\n\n\nIf you\u2019re unable to find the resources you need on our developer site:\n\n\n\n\nWe regularly monitor \nStackOverflow\n for questions.\n\n\nWe welcome contributions to our open source Player code on \nGitHub\n.\n\n\nStay connected on Twitter \n@JWDevelopers\n.\n\n\nWe\u2019re available to discuss feedback (or new cat videos!) at \ndevrelations@jwplayer.com\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#introduction", 
            "text": "Hello World! We\u2019re JW Player. We strive to enable developers and designers (like you!) to build, customize, and deliver the best video experiences for viewers across web, mobile, and OTT devices.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#purpose", 
            "text": "Our goal is to provide you with documentation on more advanced uses of JW Player. Here you will find a consolidated reference of API calls and design resources to accelerate your development process with our player.", 
            "title": "Purpose"
        }, 
        {
            "location": "/#intended-audience", 
            "text": "This site specifically caters to developers and designers who are using JW Player in their projects. For standard configuration settings or assistance embedding a player, please see our  support site . If you are visiting the developer site, a basic level of Javascript is required to use our API and a knowledge of CSS is necessary in order to customize our skinning model.", 
            "title": "Intended Audience"
        }, 
        {
            "location": "/#structure", 
            "text": "Our Developer Guide is split into two sections: Javascript API (Coming Soon) and Visual Customization.  Within each section you will find guides to get started, documentation, code samples, links to demos, and additional resources.", 
            "title": "Structure"
        }, 
        {
            "location": "/#contact", 
            "text": "If you\u2019re unable to find the resources you need on our developer site:   We regularly monitor  StackOverflow  for questions.  We welcome contributions to our open source Player code on  GitHub .  Stay connected on Twitter  @JWDevelopers .  We\u2019re available to discuss feedback (or new cat videos!) at  devrelations@jwplayer.com .", 
            "title": "Contact"
        }, 
        {
            "location": "/customization/css-skinning/skins_creating/", 
            "text": "Introduction\n\n\nCustomizing JW Player is made easier with JW Player 7's updated CSS-based skinnng model. Gone are the days of JW6's XML and base64 images. Here to stay is dynamic, customizable CSS. For information regarding \nour own complimentary skins\n, please see \nUsing JW Player Skins\n. For more advanced users, the below page will explain how to create your own custom skin, and load it into your JW Player.\n\n\nCreating your Style\n\n\nFirst you will need to give your custom skin a name, which will be used to enable it within a player. The given name will be added into the jwplayer element and can be used to overwrite styles. The actual skin name should be appeneded to the \n.jw-skin-\n prefix. Our below example is altering our display icon container, and is going to be called \nmyskin\n:\n\n\n.jwplayer .jw-skin-myskin .jw-display-icon-container {\n    border-style: solid;\n    border-width: medium;\n    border-radius: 50%;\n    padding:1em; \n}\n\n\n\n\nLoading a custom skin will replace all elements with our basic \ncore\n skin unless they are explicitly styled. Because of this, we suggest using an existing skin as a starting point for your CSS skinning needs.\n\n\nImplementing your CSS\n\n\nThere are currently \ntwo\n options to implement the above CSS modifications with JW7. One of these methods is \nmuch\n preferred to maintain optimal rendering performance:\n\n\nOption 1: Referencing the CSS on the page itself (Best Practice)\n\n\nDirectly embedding your CSS allows for your styles to load at the same time as your page. If we've placed the above CSS into a file (Which we'll call \nmyskinfile.css\n), we can reference our .css file by placing the following in our HTML page's head:\n\n\n\n\nlink rel=\"stylesheet\" type=\"text/css\" href=\"//yoursite.com/yourstyles/\nmyskinfile.css>\n/link>\n\n\n\n\nOnce the above is loaded, your player configuration will still need to reference the style appended to \n.jw-skin-\n within the \nskin.name\n configuration. In this case, we've called this \nmyskin\n\n\n\nvar playerInstance = jwplayer('myElement');\nplayerInstance.setup({\n    skin : {\n    name:\"myskin\"\n    }\n});\n\n\n\n\nOption 2: Configuring the CSS URL within \nskin.url\n\n\nIt is possible to reference your CSS file's \nurl\n within the \nskin\n block of your JW Player embed. This is less preferred, as it requires the player to load your CSS file during setup. Because of this, the rendering of your player may slow down.\n\n\n\nvar playerInstance = jwplayer('myElement');\nplayerInstance.setup({\n    skin : {\n    url:\"//yoursite.com/yourstyles/myskinfile.css\",\n    name:\"myskin\"\n    }\n});\n\n\n\n\nDue to possibly impacting rendering speed, option 2 should only be used if you do not have access to the HTML on the page where your player will be rendered.\n\n\nAdvanced Skinning\n\n\nFor advanced skin customization, we suggest editing a premade skin and then rebuilding it. The first time you do this, you will need to install \nLESS\n. Afterwards you will be able to build a skin by navigating to jwplayer/src/css and running the command:\n\n\n\nlessc jwplayer.less > output.css\n\n\n\n\nFor a complete list of class names that are able to be overridden see CSS Skin Classes, please see our \nCSS Skin Reference\n.", 
            "title": "Creating Skins"
        }, 
        {
            "location": "/customization/css-skinning/skins_creating/#introduction", 
            "text": "Customizing JW Player is made easier with JW Player 7's updated CSS-based skinnng model. Gone are the days of JW6's XML and base64 images. Here to stay is dynamic, customizable CSS. For information regarding  our own complimentary skins , please see  Using JW Player Skins . For more advanced users, the below page will explain how to create your own custom skin, and load it into your JW Player.", 
            "title": "Introduction"
        }, 
        {
            "location": "/customization/css-skinning/skins_creating/#creating-your-style", 
            "text": "First you will need to give your custom skin a name, which will be used to enable it within a player. The given name will be added into the jwplayer element and can be used to overwrite styles. The actual skin name should be appeneded to the  .jw-skin-  prefix. Our below example is altering our display icon container, and is going to be called  myskin :  .jwplayer .jw-skin-myskin .jw-display-icon-container {\n    border-style: solid;\n    border-width: medium;\n    border-radius: 50%;\n    padding:1em; \n}  Loading a custom skin will replace all elements with our basic  core  skin unless they are explicitly styled. Because of this, we suggest using an existing skin as a starting point for your CSS skinning needs.", 
            "title": "Creating your Style"
        }, 
        {
            "location": "/customization/css-skinning/skins_creating/#implementing-your-css", 
            "text": "There are currently  two  options to implement the above CSS modifications with JW7. One of these methods is  much  preferred to maintain optimal rendering performance:", 
            "title": "Implementing your CSS"
        }, 
        {
            "location": "/customization/css-skinning/skins_creating/#option-1-referencing-the-css-on-the-page-itself-best-practice", 
            "text": "Directly embedding your CSS allows for your styles to load at the same time as your page. If we've placed the above CSS into a file (Which we'll call  myskinfile.css ), we can reference our .css file by placing the following in our HTML page's head:   link rel=\"stylesheet\" type=\"text/css\" href=\"//yoursite.com/yourstyles/\nmyskinfile.css> /link>  Once the above is loaded, your player configuration will still need to reference the style appended to  .jw-skin-  within the  skin.name  configuration. In this case, we've called this  myskin  \nvar playerInstance = jwplayer('myElement');\nplayerInstance.setup({\n    skin : {\n    name:\"myskin\"\n    }\n});", 
            "title": "Option 1: Referencing the CSS on the page itself (Best Practice)"
        }, 
        {
            "location": "/customization/css-skinning/skins_creating/#option-2-configuring-the-css-url-within-skinurl", 
            "text": "It is possible to reference your CSS file's  url  within the  skin  block of your JW Player embed. This is less preferred, as it requires the player to load your CSS file during setup. Because of this, the rendering of your player may slow down.  \nvar playerInstance = jwplayer('myElement');\nplayerInstance.setup({\n    skin : {\n    url:\"//yoursite.com/yourstyles/myskinfile.css\",\n    name:\"myskin\"\n    }\n});  Due to possibly impacting rendering speed, option 2 should only be used if you do not have access to the HTML on the page where your player will be rendered.", 
            "title": "Option 2: Configuring the CSS URL within skin.url"
        }, 
        {
            "location": "/customization/css-skinning/skins_creating/#advanced-skinning", 
            "text": "For advanced skin customization, we suggest editing a premade skin and then rebuilding it. The first time you do this, you will need to install  LESS . Afterwards you will be able to build a skin by navigating to jwplayer/src/css and running the command:  \nlessc jwplayer.less > output.css  For a complete list of class names that are able to be overridden see CSS Skin Classes, please see our  CSS Skin Reference .", 
            "title": "Advanced Skinning"
        }, 
        {
            "location": "/customization/css-skinning/skins_fonts/", 
            "text": "In order to make the JW Player scaleable and adaptive to high resolution screens, JW7 no longer utilizes bitmap-based graphics. Instead, our skinning model relies on custom vector-based fonts and CSS. This ensures that all player elements will be at their sharpest when zoomed or scaled at higher resolutions. The article below explains how to make a custom icon set based on \nSVG files\n and fonts.\n\n\nCreating the Font\n\n\nIn order to get our icon fonts to work in all our target browsers, we need an icon font. All necessary font formats can be generated by using the \nIcoMoon Web Font Generator\n and then applying the resultant fonts into the JW Player via CSS. Below is a step-by-step process of how this is accomplished:\n\n\n1 -\n Download the IcoMoon project file from our \nJW Player github project\n. This JSON file contains our current icons and their related settings.\n\n\n2 -\n On the IcoMoon web page, import the aforementioned project file using the \nImport Icons\n button in the top left corner of the page:  \n\n\n  \n\n\nUpon importing, the player icons should appear at the top of the page. A successful import should display the following:\n\n\n\n\nNow that we've imported our icons, it's time to make some modifications.\n\n\nEditing Icons\n\n\n\n\nHighlight the icon that you wish to modify by clicking on it. A highlighted icon will appear with a gold border.\n\n\nSelect the Pencil icon at the top of the page to initiate the editing.\n\n\nMake any changes to the icon that you wish.\n\n\n\n\nFor this example, I've simply mirrored all of our icons. The results are reflected below:\n\n\n\n\nExporting the Font\n\n\nOnce you are happy with your modified/added icons, it's time to export the result:\n\n\n\n\nSave a copy -\n Click the three-lined option menu again and select the \"Download JSON\" button. This JSON file will act as a backup, allowing you to edit your completed icon set in the future.\n\n\n\n\nDownload the Font -\n Export the font itself by clicking the \nGenerate Font\n button at the bottom right:\n\n\n\n    You'll now see the button change to a \nDownload\n button with a settings gear.\n\n\n\n    Click this \nSettings\n gear. Here you should make sure that \nClass Prefix\n is set to \njw-icon-\n. The font name will be inherrited as the file name.\n\n\n\n\nEnsuring that the correct values are set here will configure a lot of the CSS classes for you. It's now safe to close the options pane.\n\n\n\n\n\n\nClick the \nDownload\n link to download a zip file that contains your new font.\n\n\n\n\n\n\nApplying the Font\n\n\nWith the fonts created and downloaded, we can now replace existing JW7 icons. The step-by-step process below will explain how:\n\n\nStep 1 - Unpack your zip\n\n\nUnpack your zip to view the included font files. These are conveniently located in the \nfont\n folder.\n\n\nStep 2 - Relocate the fonts\n\n\nCopy the .eot, .svg, .ttf, and .woff files into a desired font directory. If this is an online directory, ensure that all files are able to be accessed from your domain of choice.\n\n\nStep 3 - Load your font\n\n\nWe'll need to load our font via CSS using \n@font-face\n, as well as provide a \nfont-family\n name. In this case, the \njw-custom-icons.woff\n file has been relocated to a \nfont\n subdirectory. I will also be naming this font-family \ncustom\n.\n\n\n\n\nstyle\n\n@font-face {\n    font-family: 'custom';\n    src: url('fonts/jw-custom-icons.woff');\n}\n\n/style\n\n\n\n\n\nNote that this example will be using \nonly\n a .woff file. For more extensive browser compatibility, please see the \ncss-tricks article\n which details the loading of multiple fonts.\n\n\nApply the Font\n\n\nFinally, we need to apply the new font to our player. This is accomplished with one line of CSS to apply the \ncustom\n font-family name.\n\n\n.jw-icon{font-family:'custom'};\n\n\n\n\nNote, the font-family is referred to as \ncustom\n due to our naming in step 3.\n\n\nThe Results\n\n\nOur inverted icons are now applied to our control bar and we have a backwards, bizarro JW Player! (Or perhaps a WJ Player?)\n\n\n\n@font-face { font-family: 'custom'; src: url('//support-static.jwplayer.com/fonts/jw-custom-icons.woff'); } .jw-icon{font-family:'custom'};\nvar playerInstance = jwplayer(\"container\"); playerInstance.setup({ file: '//content.jwplatform.com/videos/HkauGhRi-640.mp4' });", 
            "title": "Custom Icons and Fonts"
        }, 
        {
            "location": "/customization/css-skinning/skins_fonts/#creating-the-font", 
            "text": "In order to get our icon fonts to work in all our target browsers, we need an icon font. All necessary font formats can be generated by using the  IcoMoon Web Font Generator  and then applying the resultant fonts into the JW Player via CSS. Below is a step-by-step process of how this is accomplished:  1 -  Download the IcoMoon project file from our  JW Player github project . This JSON file contains our current icons and their related settings.  2 -  On the IcoMoon web page, import the aforementioned project file using the  Import Icons  button in the top left corner of the page:        Upon importing, the player icons should appear at the top of the page. A successful import should display the following:   Now that we've imported our icons, it's time to make some modifications.", 
            "title": "Creating the Font"
        }, 
        {
            "location": "/customization/css-skinning/skins_fonts/#editing-icons", 
            "text": "Highlight the icon that you wish to modify by clicking on it. A highlighted icon will appear with a gold border.  Select the Pencil icon at the top of the page to initiate the editing.  Make any changes to the icon that you wish.   For this example, I've simply mirrored all of our icons. The results are reflected below:", 
            "title": "Editing Icons"
        }, 
        {
            "location": "/customization/css-skinning/skins_fonts/#exporting-the-font", 
            "text": "Once you are happy with your modified/added icons, it's time to export the result:   Save a copy -  Click the three-lined option menu again and select the \"Download JSON\" button. This JSON file will act as a backup, allowing you to edit your completed icon set in the future.   Download the Font -  Export the font itself by clicking the  Generate Font  button at the bottom right:  \n    You'll now see the button change to a  Download  button with a settings gear.  \n    Click this  Settings  gear. Here you should make sure that  Class Prefix  is set to  jw-icon- . The font name will be inherrited as the file name.   Ensuring that the correct values are set here will configure a lot of the CSS classes for you. It's now safe to close the options pane.    Click the  Download  link to download a zip file that contains your new font.", 
            "title": "Exporting the Font"
        }, 
        {
            "location": "/customization/css-skinning/skins_fonts/#applying-the-font", 
            "text": "With the fonts created and downloaded, we can now replace existing JW7 icons. The step-by-step process below will explain how:", 
            "title": "Applying the Font"
        }, 
        {
            "location": "/customization/css-skinning/skins_fonts/#step-1-unpack-your-zip", 
            "text": "Unpack your zip to view the included font files. These are conveniently located in the  font  folder.", 
            "title": "Step 1 - Unpack your zip"
        }, 
        {
            "location": "/customization/css-skinning/skins_fonts/#step-2-relocate-the-fonts", 
            "text": "Copy the .eot, .svg, .ttf, and .woff files into a desired font directory. If this is an online directory, ensure that all files are able to be accessed from your domain of choice.", 
            "title": "Step 2 - Relocate the fonts"
        }, 
        {
            "location": "/customization/css-skinning/skins_fonts/#step-3-load-your-font", 
            "text": "We'll need to load our font via CSS using  @font-face , as well as provide a  font-family  name. In this case, the  jw-custom-icons.woff  file has been relocated to a  font  subdirectory. I will also be naming this font-family  custom .   style \n@font-face {\n    font-family: 'custom';\n    src: url('fonts/jw-custom-icons.woff');\n} /style   Note that this example will be using  only  a .woff file. For more extensive browser compatibility, please see the  css-tricks article  which details the loading of multiple fonts.", 
            "title": "Step 3 - Load your font"
        }, 
        {
            "location": "/customization/css-skinning/skins_fonts/#apply-the-font", 
            "text": "Finally, we need to apply the new font to our player. This is accomplished with one line of CSS to apply the  custom  font-family name.  .jw-icon{font-family:'custom'};  Note, the font-family is referred to as  custom  due to our naming in step 3.", 
            "title": "Apply the Font"
        }, 
        {
            "location": "/customization/css-skinning/skins_fonts/#the-results", 
            "text": "Our inverted icons are now applied to our control bar and we have a backwards, bizarro JW Player! (Or perhaps a WJ Player?)  @font-face { font-family: 'custom'; src: url('//support-static.jwplayer.com/fonts/jw-custom-icons.woff'); } .jw-icon{font-family:'custom'}; var playerInstance = jwplayer(\"container\"); playerInstance.setup({ file: '//content.jwplatform.com/videos/HkauGhRi-640.mp4' });", 
            "title": "The Results"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/", 
            "text": "This article acts as a reference for styling all interface components of JW Player 7. A major change between between JW Player 6 and 7 is that the skinning model uses CSS and web fonts. Regardless of rendering mode, all controls are overlaid on top of the player with HTML. When styling these elements, there are a few conventions to keep in mind. All internal classes are prefixed with \njw-\n in order to protect the player from external stylesheets. The original DOM element that we initialize is called the Main Div here on out.\n\n\nA \nJW Player skin\n CSS file contains classes that are grouped into functional elements. This reference provides an elaborate overview the classes used. For additional information, check out a reference css file.\n\n\n\n\nMain Div\n\n\nThe main div will be given a class \njwplayer\n. It is strongly advised to \nnot\n add any additional inline styling on this div besides what is included in your skin css file.\n\n\nSkinning Namespace\n\n\nAll skin related styles should be namespaced with a class on the main div, of the form of:\n\n\n.jw-skin-SKINNAME\n\n\nIf none are present on initialization, we will add \njw-skin-seven\n, which uses the seven skin.\n\n\n\n\nPlayer States\n\n\nThe state of the player is reflected in the DOM by a class on the main div. It will always contain one of the following:\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-state-playing\n\n\nWhile content is playing\n\n\n\n\n\n\n.jw-state-paused\n\n\nWhile content is paused\n\n\n\n\n\n\n.jw-state-buffering\n\n\nWhile content is buffering\n\n\n\n\n\n\n.jw-state-idle\n\n\nBefore pressing play\n\n\n\n\n\n\n.jw-state-complete\n\n\nAfter playlist completes\n\n\n\n\n\n\n\n\nFlags\n\n\nSometimes the player needs to signify certain modes of the playback. These flags will be present on the main div and can be:\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-flag-fullscreen\n\n\nWhen the player is in fullscreen\n\n\n\n\n\n\n.jw-flag-live\n\n\nWhen the player is playing back live video\n\n\n\n\n\n\n.jw-flag-user-inactive\n\n\nAdded after a few minutes of inactivity\n\n\n\n\n\n\n.jw-flag-controlbar-only\n\n\nPlayer is less than 30 pixels tall\n\n\n\n\n\n\n.jw-flag-media-audio\n\n\nContent being played is an audio file\n\n\n\n\n\n\n.jw-flag-dragging\n\n\nMouse down with cursor over control bar\n\n\n\n\n\n\n.jw-flag-aspect-mode\n\n\nEnable a padding to create an aspect ratio\n\n\n\n\n\n\n.jw-flag-compact-player\n\n\nWhen the player is rendering in small UI mode\n\n\n\n\n\n\n\n\n\n\nColors\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-background-color\n\n\nThis is a class that will add a set of style to all interface elements without having to change it for each individual class.\n\n\n\n\n\n\n\n\nWe advise only using \n.jw-background-color\n for color and not other CSS properties. The player will add this class to the following elements:\n\n\n\n\n.jw-dock-button\n\n\n.jw-icon-display-container\n\n\n.jw-controlbar\n\n\n.jw-menu\n\n\n.jw-slider-volume\n\n\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-button-color\n\n\nThis is a class that player will add to specific elements when color is overridden from within the player configuration setup. You can also use this to easily change all button colors in your skin. The player will add this class all icons.\n\n\n\n\n\n\n.jw-button-color:hover\n\n\nThis will adjust the color of all buttons when they are hovered on.\n\n\n\n\n\n\n\n\n\n\nPoster Images\n\n\nThese define how the poster image will be stretched to fill the space given. Internally this state is used to stretch the player using JS.\n\n\n\n\n.jw-stretch-none\n\n\n.jw-stretch-uniform\n\n\n.jw-stretch-fill\n\n\n.jw-stretch-exactfit\n\n\n\n\n\n\nIcons\n\n\nAll JW Player icons are rendered using the font \njw-six-icons.eot\n. Each icon has a character code that is mapped to a corresponding interface element.\n\n\n\n\n\n\n\n\nIcon\n\n\nCharacter Code\n\n\n\n\n\n\n\n\n\n\nPlay\n\n\n\\e60e\n\n\n\n\n\n\nReplay\n\n\n\\e610\n\n\n\n\n\n\nPause\n\n\n\\e60d\n\n\n\n\n\n\nPrevious\n\n\n\\e60f\n\n\n\n\n\n\nNext\n\n\n\\e60c\n\n\n\n\n\n\nCuepoint\n\n\n\\e606\n\n\n\n\n\n\nBuffering\n\n\n\\e601\n\n\n\n\n\n\nHD Off\n\n\n\\e60a\n\n\n\n\n\n\nHD On\n\n\n\\e609\n\n\n\n\n\n\nCC Off\n\n\n\\e605\n\n\n\n\n\n\nCC On\n\n\n\\e604\n\n\n\n\n\n\nFullscreen\n\n\n\\e608\n\n\n\n\n\n\nMenu Bullet\n\n\n\\e606\n\n\n\n\n\n\nAudio Tracks\n\n\n\\e600\n\n\n\n\n\n\nVolume On\n\n\n\\e612\n\n\n\n\n\n\nVolume Off\n\n\n\\e611\n\n\n\n\n\n\nMore\n\n\n\\e614\n\n\n\n\n\n\nClose\n\n\n\\e615\n\n\n\n\n\n\n\n\nThe easiest way to modify the default icons is to create a new font based on these character mappings. See Creating Web Font for more information.\n\n\n\n\nControls\n\n\nAll player controls are within the \n.jw-controls\n class. When JW Player is set to \ncontrols: false\n, this entire class has a visibility of hidden. To not include a specific item in your skin, you will need to override the style with a visibility or display of none. The controls section is split into Display, Controlbar, and Dock.\n\n\n\n\n\n\n\n\nGroup\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nDisplay\n\n\nThe set of icons in the center of the player\n\n\n\n\n\n\nControlbar\n\n\nHome to the controls for the player\n\n\n\n\n\n\nMenus\n\n\nThese are part of the controlbar but deserve their own section\n\n\n\n\n\n\nDock\n\n\nbuttons overlaid on the player for plugins\n\n\n\n\n\n\nLogo\n\n\na brands logo\n\n\n\n\n\n\nPreview\n\n\nthe poster image\n\n\n\n\n\n\n\n\nDisplay\n\n\nThe display component contains the main element container for the (re)play, buffer and error icons in the middle of the screen. To add styles to these containers based on states you will need to add the state classes in your stylesheet.\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-display-icon-container\n\n\nUsed to style the container in which the display icons are.\n\n\n\n\n\n\n.jw-icon-display\n\n\nUsed to style icons that appear in the display container. The icon that is rendered depends on the state the player is in.\n\n\n\n\n\n\n\n\nControlbar\n\n\nThe controlbar component contains all elements for the video controls at the bottom of the player. It is built using three functional groups within the \n.jw-controlbar\n parent class. This diagram presents an overview:\n\n\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-group\n\n\nUsed to vertically align the timeslider and all icons in the center of the controlbar.\n\n\n\n\n\n\n\n\nLeft Group\n\n\nThe left group contains playback controls, the visual playlist, and elapsed time:\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-controlbar-left-group\n\n\nThe main container that holds the play/pause elements as well as the previous/next and elapsed duration.\n\n\n\n\n\n\n.jw-icon-playback\n\n\nThe container that holds the play/pause icons. The icon is switched depending on the state the player is in.\n\n\n\n\n\n\n.jw-icon-prev\n\n\nThe control to toggle to the previous playlist item.\n\n\n\n\n\n\n.jw-icon-next\n\n\nThe control to toggle to the next playlist item.\n\n\n\n\n\n\n.jw-text-elapsed\n\n\nThe container for the elapsed video duration.\n\n\n\n\n\n\n.jw-icon-playlist\n\n\nThe container for the visual playlist icon. The player will add the visual playlist overlay automatically when this element is hovered over.\n\n\n\n\n\n\n\n\nCenter Group\n\n\nThe center group contains the elements that make up the timeslider.\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-slider-horizontal .jw-slider-container\n\n\nThe containers that hold the timeslider elements.\n\n\n\n\n\n\n.jw-rail\n\n\nSets the style for the base layer of the slider.\n\n\n\n\n\n\n.jw-buffer\n\n\nSets the style for the how much of video has been buffered, which is layered on top of \n.jw-rail\n.\n\n\n\n\n\n\n.jw-progress\n\n\nSets the style for the elapsed video, which is layered on top of \n.jw-buffer\n.\n\n\n\n\n\n\n.jw-knob\n\n\nThis marks the tip of the progress rail, used to indicate where playback is currently.\n\n\n\n\n\n\n.jw-slider-horizontal .jw-cue\n\n\nThis class is used for timeslider cuepoints, like chapters and ad breaks.\n\n\n\n\n\n\n\n\nRight Group\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-text-duration\n\n\nWrapper for the total duration of the file being played. This allows you style both current time and duration differently.\n\n\n\n\n\n\n.jw-icon-hd\n\n\nThis is the class assigned to the div contains the HD icon. The player will automatically add a menu to the hover state of this div if there are more than 2 qualities provided per playlist item. Otherwise this div will have a state class .jw-toggle to indicate it was toggled on.\n\n\n\n\n\n\n.jw-icon-cc\n\n\nThis is class assigned to the div contains the closed-caption CC icon. The player will automatically add a menu to the hover state of this div if there are more than 2 caption tracks per playlist item. Otherwise this div will have a state class .jw-toggle to indicate it was toggled on.\n\n\n\n\n\n\n.jw-icon-audio-tracks\n\n\nThis is class assigned to the div contains the multiple audiotracks icon. The player will automatically add a menu to the hover state of this div if there are more than 2 qualities provided per playlist item.\n\n\n\n\n\n\n.jw-icon-volume\n\n\nThis is class assigned to the div contains the volume icon. The player will automatically add a menu to the hover state of this div that contains the slider volume.\n\n\n\n\n\n\n.jw-icon-volume .jw-off\n\n\nWhen the player is muted the .jw-off class gets added to toggle the volume off icon.\n\n\n\n\n\n\n.jw-icon-fullscreen\n\n\nThis is class assigned to the div contains the fullscreen icons. The player will add .jw-off class to toggle between fullscreen and exit fullscreen icons.\n\n\n\n\n\n\n.jw-icon-cast\n\n\nThis class is used to display the Chromecast icon.\n\n\n\n\n\n\n\n\nDock\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-controls-right\n\n\nThis is the parent container that positions the dock elements. In JW 7 the dock elements are on the upper right corner of the player.\n\n\n\n\n\n\n.jw-dock\n\n\nThis is the container that houses all of the dock buttons.\n\n\n\n\n\n\n.jw-dock-button\n\n\nThis is the class assigned to the div to style the interface button for dock elements.\n\n\n\n\n\n\n.jw-overlay\n\n\nThis is the overlay tooltip that appears on hover of the dock buttons.\n\n\n\n\n\n\n\n\n\n\nMenus and Overlays\n\n\nJW Player will automatically populate overlay divs on mouseover/touch of certain interface elements. These overlays are for the timeslider tooltip, closed-captions, video qualities, multiple audio-tracks, and the volume slider. There is also a new special menu for the visual playlist.\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-overlay\n\n\nAll overlays are wrapped in this class. It is not advised to modify this class but rather the containers within this class. This class when appended to the parent controlbar class will position the overlays.\n\n\n\n\n\n\n\n\nIcon Tooltips\n\n\nIcon tooltips are menus that appear when hovering over an one of the icon interface elements.\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-icon-tooltip\n\n\nThis class is added to icons that open menus.\n\n\n\n\n\n\n.jw-menu\n\n\nThis class is added to an unordered list for HD, CC, and audio-tracks menus.\n\n\n\n\n\n\n.jw-text .jw-option .item-x .jw-active-option\n\n\nThis sets the font color and background color for the active item in HD, CC and audio-track menus.\n\n\n\n\n\n\n\n\nTitle and Preview Image\n\n\nThe title and description configuration options are displayed in their own classes overlaid on the player.\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-title\n\n\nThis is the wrapper class the text overlays.\n\n\n\n\n\n\n.jw-title-primary\n\n\nThis class is populated with content from the title configuration option from the player setup.\n\n\n\n\n\n\n.jw-title-secondary\n\n\nThis class is populated with content from the description configuration option in the player setup per-playlist item.\n\n\n\n\n\n\n.jw-preview\n\n\nThis class styles the preview image from the image configuration option in the player setup per-playlist item.\n\n\n\n\n\n\n\n\nVisual Playlist Overlay\n\n\nThe visual playlist is added by the player for all setups that have more than one playlist item. These are the elements used to build a visual playlist.\n\n\n\n\n\n\n\n\nCSS Class\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n.jw-playlist\n\n\nSets the background color for the entire wrapper of the the visual playlist.\n\n\n\n\n\n\n.jw-playlist-container\n\n\nThis is used to position the entire container over the playlist icon.\n\n\n\n\n\n\n.jw-playlist-container .jw-option\n\n\nSets the style for the visual playlist items.\n\n\n\n\n\n\n.jw-playlist-container .jw-option .jw-active-option\n\n\nAllows you to adjust the color of the playlist item when hovering and has a different active style.\n\n\n\n\n\n\n.jw-playlist-container .jw-option:hover .jw-label\n\n\nChanges the color of the label when hovering.\n\n\n\n\n\n\n.jw-icon-playlist\n\n\nAligns the playlist header icon with the items in the playlist.\n\n\n\n\n\n\n.jw-label .jw-icon-play\n\n\nSets the color of the play icon of the currently playing playlist item.\n\n\n\n\n\n\n.jw-label .jw-icon-play:before\n\n\nAligns the playlist play icon with the items in the playlist.\n\n\n\n\n\n\n.jw-tooltip-title\n\n\nSets the style for the the playlist title div.", 
            "title": "CSS Reference List"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#main-div", 
            "text": "The main div will be given a class  jwplayer . It is strongly advised to  not  add any additional inline styling on this div besides what is included in your skin css file.", 
            "title": "Main Div"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#skinning-namespace", 
            "text": "All skin related styles should be namespaced with a class on the main div, of the form of:  .jw-skin-SKINNAME  If none are present on initialization, we will add  jw-skin-seven , which uses the seven skin.", 
            "title": "Skinning Namespace"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#player-states", 
            "text": "The state of the player is reflected in the DOM by a class on the main div. It will always contain one of the following:     CSS Class  Definition      .jw-state-playing  While content is playing    .jw-state-paused  While content is paused    .jw-state-buffering  While content is buffering    .jw-state-idle  Before pressing play    .jw-state-complete  After playlist completes", 
            "title": "Player States"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#flags", 
            "text": "Sometimes the player needs to signify certain modes of the playback. These flags will be present on the main div and can be:     CSS Class  Definition      .jw-flag-fullscreen  When the player is in fullscreen    .jw-flag-live  When the player is playing back live video    .jw-flag-user-inactive  Added after a few minutes of inactivity    .jw-flag-controlbar-only  Player is less than 30 pixels tall    .jw-flag-media-audio  Content being played is an audio file    .jw-flag-dragging  Mouse down with cursor over control bar    .jw-flag-aspect-mode  Enable a padding to create an aspect ratio    .jw-flag-compact-player  When the player is rendering in small UI mode", 
            "title": "Flags"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#colors", 
            "text": "CSS Class  Definition      .jw-background-color  This is a class that will add a set of style to all interface elements without having to change it for each individual class.     We advise only using  .jw-background-color  for color and not other CSS properties. The player will add this class to the following elements:   .jw-dock-button  .jw-icon-display-container  .jw-controlbar  .jw-menu  .jw-slider-volume      CSS Class  Definition      .jw-button-color  This is a class that player will add to specific elements when color is overridden from within the player configuration setup. You can also use this to easily change all button colors in your skin. The player will add this class all icons.    .jw-button-color:hover  This will adjust the color of all buttons when they are hovered on.", 
            "title": "Colors"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#poster-images", 
            "text": "These define how the poster image will be stretched to fill the space given. Internally this state is used to stretch the player using JS.   .jw-stretch-none  .jw-stretch-uniform  .jw-stretch-fill  .jw-stretch-exactfit", 
            "title": "Poster Images"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#icons", 
            "text": "All JW Player icons are rendered using the font  jw-six-icons.eot . Each icon has a character code that is mapped to a corresponding interface element.     Icon  Character Code      Play  \\e60e    Replay  \\e610    Pause  \\e60d    Previous  \\e60f    Next  \\e60c    Cuepoint  \\e606    Buffering  \\e601    HD Off  \\e60a    HD On  \\e609    CC Off  \\e605    CC On  \\e604    Fullscreen  \\e608    Menu Bullet  \\e606    Audio Tracks  \\e600    Volume On  \\e612    Volume Off  \\e611    More  \\e614    Close  \\e615     The easiest way to modify the default icons is to create a new font based on these character mappings. See Creating Web Font for more information.", 
            "title": "Icons"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#controls", 
            "text": "All player controls are within the  .jw-controls  class. When JW Player is set to  controls: false , this entire class has a visibility of hidden. To not include a specific item in your skin, you will need to override the style with a visibility or display of none. The controls section is split into Display, Controlbar, and Dock.     Group  Definition      Display  The set of icons in the center of the player    Controlbar  Home to the controls for the player    Menus  These are part of the controlbar but deserve their own section    Dock  buttons overlaid on the player for plugins    Logo  a brands logo    Preview  the poster image", 
            "title": "Controls"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#display", 
            "text": "The display component contains the main element container for the (re)play, buffer and error icons in the middle of the screen. To add styles to these containers based on states you will need to add the state classes in your stylesheet.     CSS Class  Definition      .jw-display-icon-container  Used to style the container in which the display icons are.    .jw-icon-display  Used to style icons that appear in the display container. The icon that is rendered depends on the state the player is in.", 
            "title": "Display"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#controlbar", 
            "text": "The controlbar component contains all elements for the video controls at the bottom of the player. It is built using three functional groups within the  .jw-controlbar  parent class. This diagram presents an overview:      CSS Class  Definition      .jw-group  Used to vertically align the timeslider and all icons in the center of the controlbar.", 
            "title": "Controlbar"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#left-group", 
            "text": "The left group contains playback controls, the visual playlist, and elapsed time:     CSS Class  Definition      .jw-controlbar-left-group  The main container that holds the play/pause elements as well as the previous/next and elapsed duration.    .jw-icon-playback  The container that holds the play/pause icons. The icon is switched depending on the state the player is in.    .jw-icon-prev  The control to toggle to the previous playlist item.    .jw-icon-next  The control to toggle to the next playlist item.    .jw-text-elapsed  The container for the elapsed video duration.    .jw-icon-playlist  The container for the visual playlist icon. The player will add the visual playlist overlay automatically when this element is hovered over.", 
            "title": "Left Group"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#center-group", 
            "text": "The center group contains the elements that make up the timeslider.     CSS Class  Definition      .jw-slider-horizontal .jw-slider-container  The containers that hold the timeslider elements.    .jw-rail  Sets the style for the base layer of the slider.    .jw-buffer  Sets the style for the how much of video has been buffered, which is layered on top of  .jw-rail .    .jw-progress  Sets the style for the elapsed video, which is layered on top of  .jw-buffer .    .jw-knob  This marks the tip of the progress rail, used to indicate where playback is currently.    .jw-slider-horizontal .jw-cue  This class is used for timeslider cuepoints, like chapters and ad breaks.", 
            "title": "Center Group"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#right-group", 
            "text": "CSS Class  Definition      .jw-text-duration  Wrapper for the total duration of the file being played. This allows you style both current time and duration differently.    .jw-icon-hd  This is the class assigned to the div contains the HD icon. The player will automatically add a menu to the hover state of this div if there are more than 2 qualities provided per playlist item. Otherwise this div will have a state class .jw-toggle to indicate it was toggled on.    .jw-icon-cc  This is class assigned to the div contains the closed-caption CC icon. The player will automatically add a menu to the hover state of this div if there are more than 2 caption tracks per playlist item. Otherwise this div will have a state class .jw-toggle to indicate it was toggled on.    .jw-icon-audio-tracks  This is class assigned to the div contains the multiple audiotracks icon. The player will automatically add a menu to the hover state of this div if there are more than 2 qualities provided per playlist item.    .jw-icon-volume  This is class assigned to the div contains the volume icon. The player will automatically add a menu to the hover state of this div that contains the slider volume.    .jw-icon-volume .jw-off  When the player is muted the .jw-off class gets added to toggle the volume off icon.    .jw-icon-fullscreen  This is class assigned to the div contains the fullscreen icons. The player will add .jw-off class to toggle between fullscreen and exit fullscreen icons.    .jw-icon-cast  This class is used to display the Chromecast icon.", 
            "title": "Right Group"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#dock", 
            "text": "CSS Class  Definition      .jw-controls-right  This is the parent container that positions the dock elements. In JW 7 the dock elements are on the upper right corner of the player.    .jw-dock  This is the container that houses all of the dock buttons.    .jw-dock-button  This is the class assigned to the div to style the interface button for dock elements.    .jw-overlay  This is the overlay tooltip that appears on hover of the dock buttons.", 
            "title": "Dock"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#menus-and-overlays", 
            "text": "JW Player will automatically populate overlay divs on mouseover/touch of certain interface elements. These overlays are for the timeslider tooltip, closed-captions, video qualities, multiple audio-tracks, and the volume slider. There is also a new special menu for the visual playlist.     CSS Class  Definition      .jw-overlay  All overlays are wrapped in this class. It is not advised to modify this class but rather the containers within this class. This class when appended to the parent controlbar class will position the overlays.", 
            "title": "Menus and Overlays"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#icon-tooltips", 
            "text": "Icon tooltips are menus that appear when hovering over an one of the icon interface elements.     CSS Class  Definition      .jw-icon-tooltip  This class is added to icons that open menus.    .jw-menu  This class is added to an unordered list for HD, CC, and audio-tracks menus.    .jw-text .jw-option .item-x .jw-active-option  This sets the font color and background color for the active item in HD, CC and audio-track menus.", 
            "title": "Icon Tooltips"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#title-and-preview-image", 
            "text": "The title and description configuration options are displayed in their own classes overlaid on the player.     CSS Class  Definition      .jw-title  This is the wrapper class the text overlays.    .jw-title-primary  This class is populated with content from the title configuration option from the player setup.    .jw-title-secondary  This class is populated with content from the description configuration option in the player setup per-playlist item.    .jw-preview  This class styles the preview image from the image configuration option in the player setup per-playlist item.", 
            "title": "Title and Preview Image"
        }, 
        {
            "location": "/customization/css-skinning/skins_reference/#visual-playlist-overlay", 
            "text": "The visual playlist is added by the player for all setups that have more than one playlist item. These are the elements used to build a visual playlist.     CSS Class  Definition      .jw-playlist  Sets the background color for the entire wrapper of the the visual playlist.    .jw-playlist-container  This is used to position the entire container over the playlist icon.    .jw-playlist-container .jw-option  Sets the style for the visual playlist items.    .jw-playlist-container .jw-option .jw-active-option  Allows you to adjust the color of the playlist item when hovering and has a different active style.    .jw-playlist-container .jw-option:hover .jw-label  Changes the color of the label when hovering.    .jw-icon-playlist  Aligns the playlist header icon with the items in the playlist.    .jw-label .jw-icon-play  Sets the color of the play icon of the currently playing playlist item.    .jw-label .jw-icon-play:before  Aligns the playlist play icon with the items in the playlist.    .jw-tooltip-title  Sets the style for the the playlist title div.", 
            "title": "Visual Playlist Overlay"
        }, 
        {
            "location": "/customization/css-skinning/dom-structure/", 
            "text": "", 
            "title": "DOM Structure Visual Reference"
        }, 
        {
            "location": "/customization/css-skinning/skins_example/", 
            "text": "Overview\n\n\nHere is the CSS used by JW Player 7 to render\u00a0the seven \nskin\n. This skin is designed to fit any website with just a few quick color changes and is built into the player itself.\u00a0You can use this skin as a reference for building out your own custom CSS.\n\n\nCreating Your Own CSS\n\n\n\n\nDuplicate the CSS from this reference.\n\n\nReplace all mentions of \"seven\" with your custom skin name.\n\n\nMake any changes and customizations that you require.\n\n\nHost your CSS file on your web server.\n\n\nInclude your CSS in the head of your page or provide JW Player with the URL in setup.\n\n\nUpdate your player embed to include the name of your custom skin.\n\n\n\n\nNotes\n\n\n\n\nThis CSS does not take into account the state classes that were defined in the full class reference. If you want to override the style for a specific state you will need to include styles here with those classes.\n\n\nEvery skin file is included the download package found in the Downloads section of your player account.\n\n\n\n\nSample Skin\n\n\n\n.jw-icon {\n    font-family: 'jw-icons';\n    -webkit-font-smoothing: antialiased;\n    font-style: normal;\n    font-weight: normal;\n    text-transform: none;\n    background-color: transparent;\n    font-variant: normal;\n    -webkit-font-feature-settings: \"liga\";\n    -moz-font-feature-settings: \"liga=1\";\n    -moz-font-feature-settings: \"liga\";\n    -ms-font-feature-settings: \"liga\" 1;\n    -o-font-feature-settings: \"liga\";\n    font-feature-settings: \"liga\";\n    -moz-osx-font-smoothing: grayscale\n}\n\n/* Use this class to set a global background color for all elemnts. */\n.jw-skin-seven .jw-background-color {\n  background: #000;\n}\n\n/* This is the class that houses all controls. Use this to adjust the appearance of the entire controlbar. */\n.jw-skin-seven .jw-controlbar {\n  border-top: #333 1px solid;\n  height: 2.5em;\n}\n\n/* Vertically aligns the timeslider and icons in the center of the controlbar. */\n.jw-skin-seven .jw-group {\n  vertical-align: middle;\n}\n\n/* Sets the style for the visual playlist. */\n\n.jw-skin-seven .jw-playlist {\n  background-color: rgba(0, 0, 0, 0.8);\n}\n\n/* Aligns the visual playlist above its icon. */\n\n.jw-skin-seven .jw-playlist-container {\n  left: -43%;\n  background-color: rgba(0, 0, 0, 0.8);\n}\n\n/* Sets the style for the visual playlist items. */\n.jw-skin-seven .jw-playlist-container .jw-option {\n  border-bottom: 1px solid #444;\n}\n\n/* Allows you to adjust the color of the playlist item when hovering and has a different active style.*/\n\n.jw-skin-seven .jw-playlist-container .jw-option:hover,\n.jw-skin-seven .jw-playlist-container .jw-option.jw-active-option {\n  background-color: black;\n}\n\n/* Changes the color of the label when hovering.*/\n\n.jw-skin-seven .jw-playlist-container .jw-option:hover .jw-label {\n  color: #ff0046;\n}\n\n/* Aligns the playlist header icon with the items in the playlist. */\n.jw-skin-seven .jw-playlist-container .jw-icon-playlist {\n  margin-left: 0;\n}\n\n/* Sets the color of the play icon of the currently playing playlist item.*/\n.jw-skin-seven .jw-playlist-container .jw-label .jw-icon-play {\n  color: #ff0046;\n}\n\n/* Aligns the playlist play icon with the items in the playlist. */\n.jw-skin-seven .jw-playlist-container .jw-label .jw-icon-play:before {\n    padding-left: 0\n}\n\n/* Sets the color of the playlist title */\n.jw-skin-seven .jw-tooltip-title {\n    background-color: #000;\n    color: #fff\n}\n\n/* Style for playlist item, current time, qualities, and caption text.*/\n.jw-skin-seven .jw-text {\n  color: #ffffff;\n}\n\n/* Color for all buttons when they are inactive. This is over-ridden with the \ninactive configuration in the skin block.*/\n.jw-skin-seven .jw-button-color {\n  color: #ffffff;\n}\n\n/* Color for all buttons for when they are hovered on. This is over-ridden with the \nactive configuration in the skin block.*/\n\n.jw-skin-seven .jw-button-color:hover {\n  color: #ff0046;\n}\n\n/* Color for when HD/CD icons are toggled on. */\n.jw-skin-seven .jw-toggle {\n  color: #ff0046;\n}\n\n/* Color for when HD/CD icons are toggled off. */\n.jw-skin-seven .jw-toggle.jw-off {\n  color: #ffffff;\n}\n\n/* Sets spacing between controlbar icons and text */\n.jw-skin-seven .jw-controlbar .jw-icon:before,\n.jw-skin-seven .jw-text-elapsed,\n.jw-skin-seven .jw-text-duration {\n    padding: 0 .7em;\n}\n\n/* Removes icon padding to align the playlist header icon with the items in the playlist. */\n.jw-skin-seven .jw-controlbar .jw-icon-prev:before {\n    padding-right: .25em;\n}\n\n/* Removes icon padding to align the playlist header icon with the items in the playlist. */\n.jw-skin-seven .jw-controlbar .jw-icon-playlist:before {\n    padding: 0 .45em;\n}\n\n.jw-skin-seven .jw-controlbar .jw-icon-next:before {\n    padding-left: .25em\n}\n\n/* Sets the style for the prev and next icons. */\n.jw-skin-seven .jw-icon-prev,\n.jw-skin-seven .jw-icon-next {\n    font-size: .7em\n}\n\n/* Adds the spacer style to between the play icon and the previous icon. */\n.jw-skin-seven .jw-icon-prev:before {\n  border-left: 1px solid #666;\n}\n\n/* Adds the spacer style to between the next item and current time.  */\n.jw-skin-seven .jw-icon-next:before {\n  border-right: 1px solid #666;\n}\n\n/* Color of the display icon */\n.jw-skin-seven .jw-icon-display {\n  color: #fff;\n}\n\n/* Centers the display icon in it's container */\n.jw-skin-seven .jw-icon-display:before {\n  padding-left: 0;\n}\n\n/* Turns the display icon container into a circle. */\n.jw-skin-seven .jw-display-icon-container {\n    border-radius: 50%;\n    border: 1px solid #333\n}\n\n/* Styles the timeslider rail */\n.jw-skin-seven .jw-rail {\n  background-color: #384154;\n  box-shadow: none;\n}\n\n/* Sets the color for the buffer of the timeslider rail. */\n.jw-skin-seven .jw-buffer {\n    background-color: #666f82\n}\n\n/* Sets the style for the elaspesd progress. */\n.jw-skin-seven .jw-progress {\n    background: #ff0046\n}\n\n/* Sets the width of the knob's container */\n.jw-skin-seven .jw-knob {\n    width: .6em;\n    height: .6em;\n    background-color: #fff;\n    box-shadow: 0 0 0 1px #000;\n    border-radius: 1em\n}\n\n/* Sets the height for the horizontal slider container. */\n.jw-skin-seven .jw-slider-horizontal .jw-slider-container {\n    height: .95em\n}\n\n/* Sets the height for the horizontal slider elements. */\n.jw-skin-seven .jw-slider-horizontal .jw-rail,\n.jw-skin-seven .jw-slider-horizontal .jw-buffer,\n.jw-skin-seven .jw-slider-horizontal .jw-progress {\n    height: .2em;\n    border-radius: 0\n}\n\n/* Centers the knob vertically. */\n.jw-skin-seven .jw-slider-horizontal .jw-knob {\n    top: -0.19999999999999998em\n}\n\n/* Cetners the timeslider cuepoints vertically. */\n.jw-skin-seven .jw-slider-horizontal .jw-cue {\n    top: -0.04999999999999999em;\n    width: .3em;\n    height: .3em;\n    background-color: #fff;\n    border-radius: 50%\n}\n\n/* Sets the width for the vertical slider elements. */\n.jw-skin-seven .jw-slider-vertical .jw-rail,\n.jw-skin-seven .jw-slider-vertical .jw-buffer,\n.jw-skin-seven .jw-slider-vertical .jw-progress {\n    width: .2em\n}\n\n/* Sets the position of the volume slider container. */\n.jw-skin-seven .jw-volume-tip {\n    width: 100%;\n    left: -45%;\n    padding-bottom: .7em\n}\n\n/* Sets the color of the duration text in the controlbar. */\n.jw-skin-seven .jw-text-duration {\n    color: #666f82\n}\n\n/* Adds a left border as a spacer between all contorlbar icons. */\n.jw-skin-seven .jw-controlbar-right-group .jw-icon-tooltip:before,\n.jw-skin-seven .jw-controlbar-right-group .jw-icon-inline:before {\n    border-left: 1px solid #666\n}\n\n/* Removes the border from the first icon after the time duration text. */\n.jw-skin-seven .jw-controlbar-right-group .jw-icon-inline:first-child:before {\n    border: 0\n}\n\n/* This styles the dock icons into a circle. */\n.jw-skin-seven .jw-dock .jw-dock-button {\n    border-radius: 50%;\n    border: 1px solid #333\n}\n\n/* This styles tooltip for dock text background. */\n.jw-skin-seven .jw-dock .jw-overlay {\n    border-radius: 2.5em\n}\n\n/*This sets the font color and background color for the active item in HD and CC menus. */\n.jw-skin-seven .jw-icon-tooltip .jw-active-option {\n    background-color: #ff0046;\n    color: #fff\n}\n\n/* Sets a min width for the volume container so that when it changes between mute and volume, the controlbar does not shift. */\n.jw-skin-seven .jw-icon-volume {\n    min-width: 2.6em\n}\n\n/* Sets the style for the time tooltip, menu, volume. */\n.jw-skin-seven .jw-time-tip,\n.jw-skin-seven .jw-menu,\n.jw-skin-seven .jw-volume-tip,\n.jw-skin-seven .jw-skip {\n    border: 1px solid #333\n}\n\n/* Sets the position for the time tooltip. */\n.jw-skin-seven .jw-time-tip {\n    padding: .2em;\n    bottom: 1.3em\n}\n\n/* Sets the position for the vertical volume slider. */\n.jw-skin-seven .jw-menu,\n.jw-skin-seven .jw-volume-tip {\n    bottom: .24em\n}\n\n/* Sets the shape of the skip icon. */\n.jw-skin-seven .jw-skip {\n    padding: .4em;\n    border-radius: 1.75em\n}\n\n/* Sets the style for the skip text. */\n.jw-skin-seven .jw-skip .jw-text,\n.jw-skin-seven .jw-skip .jw-icon-inline {\n    color: #fff;\n    line-height: 1.75em\n}\n.jw-skin-seven .jw-skip.jw-skippable:hover .jw-text,\n.jw-skin-seven .jw-skip.jw-skippable:hover .jw-icon-inline {\n    color: #ff0046\n}", 
            "title": "Example CSS File"
        }, 
        {
            "location": "/customization/css-skinning/skins_example/#overview", 
            "text": "Here is the CSS used by JW Player 7 to render\u00a0the seven  skin . This skin is designed to fit any website with just a few quick color changes and is built into the player itself.\u00a0You can use this skin as a reference for building out your own custom CSS.", 
            "title": "Overview"
        }, 
        {
            "location": "/customization/css-skinning/skins_example/#creating-your-own-css", 
            "text": "Duplicate the CSS from this reference.  Replace all mentions of \"seven\" with your custom skin name.  Make any changes and customizations that you require.  Host your CSS file on your web server.  Include your CSS in the head of your page or provide JW Player with the URL in setup.  Update your player embed to include the name of your custom skin.", 
            "title": "Creating Your Own CSS"
        }, 
        {
            "location": "/customization/css-skinning/skins_example/#notes", 
            "text": "This CSS does not take into account the state classes that were defined in the full class reference. If you want to override the style for a specific state you will need to include styles here with those classes.  Every skin file is included the download package found in the Downloads section of your player account.", 
            "title": "Notes"
        }, 
        {
            "location": "/customization/css-skinning/skins_example/#sample-skin", 
            "text": ".jw-icon {\n    font-family: 'jw-icons';\n    -webkit-font-smoothing: antialiased;\n    font-style: normal;\n    font-weight: normal;\n    text-transform: none;\n    background-color: transparent;\n    font-variant: normal;\n    -webkit-font-feature-settings: \"liga\";\n    -moz-font-feature-settings: \"liga=1\";\n    -moz-font-feature-settings: \"liga\";\n    -ms-font-feature-settings: \"liga\" 1;\n    -o-font-feature-settings: \"liga\";\n    font-feature-settings: \"liga\";\n    -moz-osx-font-smoothing: grayscale\n}\n\n/* Use this class to set a global background color for all elemnts. */\n.jw-skin-seven .jw-background-color {\n  background: #000;\n}\n\n/* This is the class that houses all controls. Use this to adjust the appearance of the entire controlbar. */\n.jw-skin-seven .jw-controlbar {\n  border-top: #333 1px solid;\n  height: 2.5em;\n}\n\n/* Vertically aligns the timeslider and icons in the center of the controlbar. */\n.jw-skin-seven .jw-group {\n  vertical-align: middle;\n}\n\n/* Sets the style for the visual playlist. */\n\n.jw-skin-seven .jw-playlist {\n  background-color: rgba(0, 0, 0, 0.8);\n}\n\n/* Aligns the visual playlist above its icon. */\n\n.jw-skin-seven .jw-playlist-container {\n  left: -43%;\n  background-color: rgba(0, 0, 0, 0.8);\n}\n\n/* Sets the style for the visual playlist items. */\n.jw-skin-seven .jw-playlist-container .jw-option {\n  border-bottom: 1px solid #444;\n}\n\n/* Allows you to adjust the color of the playlist item when hovering and has a different active style.*/\n\n.jw-skin-seven .jw-playlist-container .jw-option:hover,\n.jw-skin-seven .jw-playlist-container .jw-option.jw-active-option {\n  background-color: black;\n}\n\n/* Changes the color of the label when hovering.*/\n\n.jw-skin-seven .jw-playlist-container .jw-option:hover .jw-label {\n  color: #ff0046;\n}\n\n/* Aligns the playlist header icon with the items in the playlist. */\n.jw-skin-seven .jw-playlist-container .jw-icon-playlist {\n  margin-left: 0;\n}\n\n/* Sets the color of the play icon of the currently playing playlist item.*/\n.jw-skin-seven .jw-playlist-container .jw-label .jw-icon-play {\n  color: #ff0046;\n}\n\n/* Aligns the playlist play icon with the items in the playlist. */\n.jw-skin-seven .jw-playlist-container .jw-label .jw-icon-play:before {\n    padding-left: 0\n}\n\n/* Sets the color of the playlist title */\n.jw-skin-seven .jw-tooltip-title {\n    background-color: #000;\n    color: #fff\n}\n\n/* Style for playlist item, current time, qualities, and caption text.*/\n.jw-skin-seven .jw-text {\n  color: #ffffff;\n}\n\n/* Color for all buttons when they are inactive. This is over-ridden with the \ninactive configuration in the skin block.*/\n.jw-skin-seven .jw-button-color {\n  color: #ffffff;\n}\n\n/* Color for all buttons for when they are hovered on. This is over-ridden with the \nactive configuration in the skin block.*/\n\n.jw-skin-seven .jw-button-color:hover {\n  color: #ff0046;\n}\n\n/* Color for when HD/CD icons are toggled on. */\n.jw-skin-seven .jw-toggle {\n  color: #ff0046;\n}\n\n/* Color for when HD/CD icons are toggled off. */\n.jw-skin-seven .jw-toggle.jw-off {\n  color: #ffffff;\n}\n\n/* Sets spacing between controlbar icons and text */\n.jw-skin-seven .jw-controlbar .jw-icon:before,\n.jw-skin-seven .jw-text-elapsed,\n.jw-skin-seven .jw-text-duration {\n    padding: 0 .7em;\n}\n\n/* Removes icon padding to align the playlist header icon with the items in the playlist. */\n.jw-skin-seven .jw-controlbar .jw-icon-prev:before {\n    padding-right: .25em;\n}\n\n/* Removes icon padding to align the playlist header icon with the items in the playlist. */\n.jw-skin-seven .jw-controlbar .jw-icon-playlist:before {\n    padding: 0 .45em;\n}\n\n.jw-skin-seven .jw-controlbar .jw-icon-next:before {\n    padding-left: .25em\n}\n\n/* Sets the style for the prev and next icons. */\n.jw-skin-seven .jw-icon-prev,\n.jw-skin-seven .jw-icon-next {\n    font-size: .7em\n}\n\n/* Adds the spacer style to between the play icon and the previous icon. */\n.jw-skin-seven .jw-icon-prev:before {\n  border-left: 1px solid #666;\n}\n\n/* Adds the spacer style to between the next item and current time.  */\n.jw-skin-seven .jw-icon-next:before {\n  border-right: 1px solid #666;\n}\n\n/* Color of the display icon */\n.jw-skin-seven .jw-icon-display {\n  color: #fff;\n}\n\n/* Centers the display icon in it's container */\n.jw-skin-seven .jw-icon-display:before {\n  padding-left: 0;\n}\n\n/* Turns the display icon container into a circle. */\n.jw-skin-seven .jw-display-icon-container {\n    border-radius: 50%;\n    border: 1px solid #333\n}\n\n/* Styles the timeslider rail */\n.jw-skin-seven .jw-rail {\n  background-color: #384154;\n  box-shadow: none;\n}\n\n/* Sets the color for the buffer of the timeslider rail. */\n.jw-skin-seven .jw-buffer {\n    background-color: #666f82\n}\n\n/* Sets the style for the elaspesd progress. */\n.jw-skin-seven .jw-progress {\n    background: #ff0046\n}\n\n/* Sets the width of the knob's container */\n.jw-skin-seven .jw-knob {\n    width: .6em;\n    height: .6em;\n    background-color: #fff;\n    box-shadow: 0 0 0 1px #000;\n    border-radius: 1em\n}\n\n/* Sets the height for the horizontal slider container. */\n.jw-skin-seven .jw-slider-horizontal .jw-slider-container {\n    height: .95em\n}\n\n/* Sets the height for the horizontal slider elements. */\n.jw-skin-seven .jw-slider-horizontal .jw-rail,\n.jw-skin-seven .jw-slider-horizontal .jw-buffer,\n.jw-skin-seven .jw-slider-horizontal .jw-progress {\n    height: .2em;\n    border-radius: 0\n}\n\n/* Centers the knob vertically. */\n.jw-skin-seven .jw-slider-horizontal .jw-knob {\n    top: -0.19999999999999998em\n}\n\n/* Cetners the timeslider cuepoints vertically. */\n.jw-skin-seven .jw-slider-horizontal .jw-cue {\n    top: -0.04999999999999999em;\n    width: .3em;\n    height: .3em;\n    background-color: #fff;\n    border-radius: 50%\n}\n\n/* Sets the width for the vertical slider elements. */\n.jw-skin-seven .jw-slider-vertical .jw-rail,\n.jw-skin-seven .jw-slider-vertical .jw-buffer,\n.jw-skin-seven .jw-slider-vertical .jw-progress {\n    width: .2em\n}\n\n/* Sets the position of the volume slider container. */\n.jw-skin-seven .jw-volume-tip {\n    width: 100%;\n    left: -45%;\n    padding-bottom: .7em\n}\n\n/* Sets the color of the duration text in the controlbar. */\n.jw-skin-seven .jw-text-duration {\n    color: #666f82\n}\n\n/* Adds a left border as a spacer between all contorlbar icons. */\n.jw-skin-seven .jw-controlbar-right-group .jw-icon-tooltip:before,\n.jw-skin-seven .jw-controlbar-right-group .jw-icon-inline:before {\n    border-left: 1px solid #666\n}\n\n/* Removes the border from the first icon after the time duration text. */\n.jw-skin-seven .jw-controlbar-right-group .jw-icon-inline:first-child:before {\n    border: 0\n}\n\n/* This styles the dock icons into a circle. */\n.jw-skin-seven .jw-dock .jw-dock-button {\n    border-radius: 50%;\n    border: 1px solid #333\n}\n\n/* This styles tooltip for dock text background. */\n.jw-skin-seven .jw-dock .jw-overlay {\n    border-radius: 2.5em\n}\n\n/*This sets the font color and background color for the active item in HD and CC menus. */\n.jw-skin-seven .jw-icon-tooltip .jw-active-option {\n    background-color: #ff0046;\n    color: #fff\n}\n\n/* Sets a min width for the volume container so that when it changes between mute and volume, the controlbar does not shift. */\n.jw-skin-seven .jw-icon-volume {\n    min-width: 2.6em\n}\n\n/* Sets the style for the time tooltip, menu, volume. */\n.jw-skin-seven .jw-time-tip,\n.jw-skin-seven .jw-menu,\n.jw-skin-seven .jw-volume-tip,\n.jw-skin-seven .jw-skip {\n    border: 1px solid #333\n}\n\n/* Sets the position for the time tooltip. */\n.jw-skin-seven .jw-time-tip {\n    padding: .2em;\n    bottom: 1.3em\n}\n\n/* Sets the position for the vertical volume slider. */\n.jw-skin-seven .jw-menu,\n.jw-skin-seven .jw-volume-tip {\n    bottom: .24em\n}\n\n/* Sets the shape of the skip icon. */\n.jw-skin-seven .jw-skip {\n    padding: .4em;\n    border-radius: 1.75em\n}\n\n/* Sets the style for the skip text. */\n.jw-skin-seven .jw-skip .jw-text,\n.jw-skin-seven .jw-skip .jw-icon-inline {\n    color: #fff;\n    line-height: 1.75em\n}\n.jw-skin-seven .jw-skip.jw-skippable:hover .jw-text,\n.jw-skin-seven .jw-skip.jw-skippable:hover .jw-icon-inline {\n    color: #ff0046\n}", 
            "title": "Sample Skin"
        }, 
        {
            "location": "/customization/designer-kit/", 
            "text": "JW7 Designer Kit\n\n\nThe \nJW7 Designer Kit\n is a starting point for designing and building new skins. This photoshop template includes GUI elements found in the 7.3.0 release of JW7. The purpose of this kit is to encourage designers and developers to fully customize the player to create fully branded experiences for their content.\n\n\nThis PSD includes well organized and labeled layers that correspond to css selectors in our skinning model for easy collaboration between designers and developers. All elements and shapes within the PSD are fully editable.\n\n\nYou may also find our \nDOM Structure Visual Reference\n documentation useful as you get started designing your new skin.\n\n\nDownload the JW7 Designer Kit\n\n\n\n\nBelow is a preview of what is included in the \nJW7 Designer Kit\n.\n\n\nPlayer State Idle\n\n\n\n\n\nPlayer State Paused\n\n\n\n\n\nSharing Overlay\n\n\n\n\n\nRelated Overlay", 
            "title": "Design Resources"
        }, 
        {
            "location": "/customization/designer-kit/#jw7-designer-kit", 
            "text": "The  JW7 Designer Kit  is a starting point for designing and building new skins. This photoshop template includes GUI elements found in the 7.3.0 release of JW7. The purpose of this kit is to encourage designers and developers to fully customize the player to create fully branded experiences for their content.  This PSD includes well organized and labeled layers that correspond to css selectors in our skinning model for easy collaboration between designers and developers. All elements and shapes within the PSD are fully editable.  You may also find our  DOM Structure Visual Reference  documentation useful as you get started designing your new skin.  Download the JW7 Designer Kit   Below is a preview of what is included in the  JW7 Designer Kit .", 
            "title": "JW7 Designer Kit"
        }, 
        {
            "location": "/beta/html5_hls_beta/", 
            "text": "JW Player HLS HTML5 Beta\n\n\nWith JW Player 7.4, HLS streams will use MSE extensions to render video and audio streams in HTML5. HTML5 playback of HLS will work in Chrome on Desktop. In all other instances, we will either use native HTML5 HLS support (Safari, Edge, Android Chrome) or our Flash provider (IE9-11, Firefox). Support will be investigated as the stability of streams in other browsers can be verified. \n\n\nCurrent Beta Features\n\n\n\n\n\n\n\n\n7.4 Beta Release (Now)\n\n\nFull 7.4 Release (April)\n\n\nFuture Enhancement (Q2 - Q3 2016)\n\n\n\n\n\n\n\n\n\n\nAdaptive VOD streams\n\n\nRobust error messaging\n\n\nChoosing audio track based on system language\n\n\n\n\n\n\nSingle quality Live/DVR streams\n\n\nM3U8 WebVTT captions\n\n\nCustom quality labels\n\n\n\n\n\n\nDesktop Google Chrome only\n\n\nAdaptive quality in Live\n\n\n708 captioning\n\n\n\n\n\n\nBasic error message support\n\n\n608 Captions\n\n\nAES decryption via HTTP\n\n\n\n\n\n\n608 caption support\n\n\n\n\nMozilla Firefox support\n\n\n\n\n\n\nAES 128 decryption over HTTPS only\n\n\n\n\nByte-range requests\n\n\n\n\n\n\nAAC/MP3 audio fragment support\n\n\n\n\n\n\n\n\n\n\nTimed ID3 MetaData\n\n\n\n\n\n\n\n\n\n\nAAC/MP3 audio support\n\n\n\n\n\n\n\n\n\n\nTimed ID3 MetaData\n\n\n\n\n\n\n\n\n\n\n\n\nCurrent Limitations\n\n\n\n\nHE-AAC has a known issue with working in Chrome. For information on its resolution, please see the ticket in the \nChromium Project\n.\n\n\nMidrolls when played with Google IMA ad manager are not currently pausing the main video content.\n\n\nMidrolls after replaying the current item are not working correctly.\n\n\nVideo only streams, streams without any audio, stall.\n\n\n608 captions are in progress.\n\n\n\n\nVerified Encoders and CDNs\n\n\n\n\nAkamai\n\n\nEdgecast\n\n\nFastly\n\n\nZencoder\n\n\nAmazon\n\n\nWowza - some adaptive VOD streams are having issues with quality switching.\n\n\n\n\nFAQ\n\n\nQ: Why is my HLS stream still rendering in Flash?\n\n\nIn order to enable HLS HTML5, set your default rendering mode to html5 in player setup or via your dashboard. If your player is still using Flash, please ensure that you are testing on the latest version of Google Chrome.\n\n\nQ: Does this require any additional configuration for my M3U8 files?\n\n\nNo, your existing M3U8 files will work between Flash and HTML5, provided that they follow our guidelines above. However, please ensure that your CORS and crossdomain.xml are both set correctly to allow interoperability between Flash and HTML5.\n\n\nQ: Why doesn\u2019t my HLS stream play?\n\n\nAs mentioned above, this beta is only supporting specific VOD and Live streams. If your streams meet our criteria, and still fail to play, we highly encourage you to fill out our form and send us a bug report.\n\n\nQ: Will [HLS feature] ever be supported? I don\u2019t see it in your roadmap.\n\n\nIf you see a feature missing from our timeline above, let us know! Much like our Flash HLS provider, we will always be adding new functionality to keep up with both trends and specs.\n\n\nQ: Why is this not supported in [browser]? It\u2019s my favorite browser!\n\n\nWe are currently developing and troubleshooting on Google Chrome due to its market share and stable MSE implementation. Firefox is the next planned browser to work with HLS HTML5.\n\n\nQ: Will my Flash VPAID ads work with HTML5 HLS when it\u2019s launched?\n\n\nNo, Flash ads will only render when the player is in Flash mode. We suggest using VPAID 2 Javascript ads or HTML5 compatible VAST.\n\n\nReporting Issues\n\n\nIf you are experiencing issues while testing your HLS streams, please follow the steps below to submit your feedback:\n\n\n1 - Confirm that your HLS stream is currently compatible\n\n\nWe are currently beta testing standard VOD and Live streams. Many features, such as multitrack audio and advertising are not yet available. Please see our compatibility list above for our current support. If there is a missing feature that you would like supported, please let us know.\n\n\n2 - If your stream should be compatible, use our feedback form\n\n\nClick here to visit our Google form and submit feedback to our team. We\u2019ll be in contact with any updates.", 
            "title": "HLS in HTML5"
        }, 
        {
            "location": "/beta/html5_hls_beta/#jw-player-hls-html5-beta", 
            "text": "With JW Player 7.4, HLS streams will use MSE extensions to render video and audio streams in HTML5. HTML5 playback of HLS will work in Chrome on Desktop. In all other instances, we will either use native HTML5 HLS support (Safari, Edge, Android Chrome) or our Flash provider (IE9-11, Firefox). Support will be investigated as the stability of streams in other browsers can be verified.", 
            "title": "JW Player HLS HTML5 Beta"
        }, 
        {
            "location": "/beta/html5_hls_beta/#current-beta-features", 
            "text": "7.4 Beta Release (Now)  Full 7.4 Release (April)  Future Enhancement (Q2 - Q3 2016)      Adaptive VOD streams  Robust error messaging  Choosing audio track based on system language    Single quality Live/DVR streams  M3U8 WebVTT captions  Custom quality labels    Desktop Google Chrome only  Adaptive quality in Live  708 captioning    Basic error message support  608 Captions  AES decryption via HTTP    608 caption support   Mozilla Firefox support    AES 128 decryption over HTTPS only   Byte-range requests    AAC/MP3 audio fragment support      Timed ID3 MetaData      AAC/MP3 audio support      Timed ID3 MetaData", 
            "title": "Current Beta Features"
        }, 
        {
            "location": "/beta/html5_hls_beta/#current-limitations", 
            "text": "HE-AAC has a known issue with working in Chrome. For information on its resolution, please see the ticket in the  Chromium Project .  Midrolls when played with Google IMA ad manager are not currently pausing the main video content.  Midrolls after replaying the current item are not working correctly.  Video only streams, streams without any audio, stall.  608 captions are in progress.", 
            "title": "Current Limitations"
        }, 
        {
            "location": "/beta/html5_hls_beta/#verified-encoders-and-cdns", 
            "text": "Akamai  Edgecast  Fastly  Zencoder  Amazon  Wowza - some adaptive VOD streams are having issues with quality switching.", 
            "title": "Verified Encoders and CDNs"
        }, 
        {
            "location": "/beta/html5_hls_beta/#faq", 
            "text": "", 
            "title": "FAQ"
        }, 
        {
            "location": "/beta/html5_hls_beta/#q-why-is-my-hls-stream-still-rendering-in-flash", 
            "text": "In order to enable HLS HTML5, set your default rendering mode to html5 in player setup or via your dashboard. If your player is still using Flash, please ensure that you are testing on the latest version of Google Chrome.", 
            "title": "Q: Why is my HLS stream still rendering in Flash?"
        }, 
        {
            "location": "/beta/html5_hls_beta/#q-does-this-require-any-additional-configuration-for-my-m3u8-files", 
            "text": "No, your existing M3U8 files will work between Flash and HTML5, provided that they follow our guidelines above. However, please ensure that your CORS and crossdomain.xml are both set correctly to allow interoperability between Flash and HTML5.", 
            "title": "Q: Does this require any additional configuration for my M3U8 files?"
        }, 
        {
            "location": "/beta/html5_hls_beta/#q-why-doesnt-my-hls-stream-play", 
            "text": "As mentioned above, this beta is only supporting specific VOD and Live streams. If your streams meet our criteria, and still fail to play, we highly encourage you to fill out our form and send us a bug report.", 
            "title": "Q: Why doesn\u2019t my HLS stream play?"
        }, 
        {
            "location": "/beta/html5_hls_beta/#q-will-hls-feature-ever-be-supported-i-dont-see-it-in-your-roadmap", 
            "text": "If you see a feature missing from our timeline above, let us know! Much like our Flash HLS provider, we will always be adding new functionality to keep up with both trends and specs.", 
            "title": "Q: Will [HLS feature] ever be supported? I don\u2019t see it in your roadmap."
        }, 
        {
            "location": "/beta/html5_hls_beta/#q-why-is-this-not-supported-in-browser-its-my-favorite-browser", 
            "text": "We are currently developing and troubleshooting on Google Chrome due to its market share and stable MSE implementation. Firefox is the next planned browser to work with HLS HTML5.", 
            "title": "Q: Why is this not supported in [browser]? It\u2019s my favorite browser!"
        }, 
        {
            "location": "/beta/html5_hls_beta/#q-will-my-flash-vpaid-ads-work-with-html5-hls-when-its-launched", 
            "text": "No, Flash ads will only render when the player is in Flash mode. We suggest using VPAID 2 Javascript ads or HTML5 compatible VAST.", 
            "title": "Q: Will my Flash VPAID ads work with HTML5 HLS when it\u2019s launched?"
        }, 
        {
            "location": "/beta/html5_hls_beta/#reporting-issues", 
            "text": "If you are experiencing issues while testing your HLS streams, please follow the steps below to submit your feedback:", 
            "title": "Reporting Issues"
        }, 
        {
            "location": "/beta/html5_hls_beta/#1-confirm-that-your-hls-stream-is-currently-compatible", 
            "text": "We are currently beta testing standard VOD and Live streams. Many features, such as multitrack audio and advertising are not yet available. Please see our compatibility list above for our current support. If there is a missing feature that you would like supported, please let us know.", 
            "title": "1 - Confirm that your HLS stream is currently compatible"
        }, 
        {
            "location": "/beta/html5_hls_beta/#2-if-your-stream-should-be-compatible-use-our-feedback-form", 
            "text": "Click here to visit our Google form and submit feedback to our team. We\u2019ll be in contact with any updates.", 
            "title": "2 - If your stream should be compatible, use our feedback form"
        }
    ]
}